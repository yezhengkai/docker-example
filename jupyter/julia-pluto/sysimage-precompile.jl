precompile(Tuple{Type{REPL.Terminals.TTYTerminal}, String, Base.PipeEndpoint, Base.TTY, Base.TTY})
precompile(Tuple{typeof(Base.getindex), Base.EnvDict, String})
precompile(Tuple{typeof(ZeroMQ_jll.__init__)})
precompile(Tuple{Type{NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), T} where T<:Tuple}, Tuple{Nothing, Nothing, Symbol}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), Tuple{Nothing, Nothing, Symbol}}, Type{Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.FreeBSD, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Libdl.dlopen), String})
precompile(Tuple{typeof(ZMQ.__init__)})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.MPFR.BigFloat, 1}, Base.MPFR.BigFloat})
precompile(Tuple{typeof(MbedTLS_jll.__init__)})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(MbedTLS.f_send), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.f_recv), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.__init__)})
precompile(Tuple{typeof(IJulia.__init__)})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{IO}, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{IO}, Base.TTY})
precompile(Tuple{typeof(Base.CoreLogging.logmsg_code), Module, String, Int64, Symbol, String, Symbol, Vararg{Symbol, N} where N})
precompile(Tuple{typeof(Base.CoreLogging.log_record_id), Module, Symbol, String, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.pathof), Module})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.get), Base.EnvDict, String, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.EnvDict, Int64, String})
precompile(Tuple{typeof(Base.typeintersect), Any, Any})
precompile(Tuple{typeof(Base.allocatedinline), Type{ZMQ._Message}})
precompile(Tuple{typeof(IJulia.heartbeat_thread), Ptr{Nothing}})
precompile(Tuple{getfield(JSON.Parser, Symbol("##parse#2")), Type{T} where T, Type{Int64}, Bool, Nothing, typeof(JSON.Parser.parse), Base.IOStream})
precompile(Tuple{typeof(JSON.Parser.parse_value), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Int64, String})
precompile(Tuple{typeof(Base.split), String, String})
precompile(Tuple{typeof(Base.:(!=)), Base.SubString{String}, String})
precompile(Tuple{typeof(Base.Unicode.uppercase), Base.SubString{String}})
precompile(Tuple{Type{MbedTLS.MD{IsHMAC} where IsHMAC}, MbedTLS.MDKind, String})
precompile(Tuple{Type{IJulia.IJuliaStdio{IO_t} where IO_t<:IO}, Base.PipeEndpoint, String})
precompile(Tuple{typeof(Base.redirect_stdout), IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{typeof(Base.redirect_stderr), IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{typeof(Base.redirect_stdin), IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{Type{Base.Multimedia.TextDisplay}, IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{Type{Base.CoreLogging.SimpleLogger}, IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Base.UUID})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UUID})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Base.UUID, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, String}, String})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Dates.DateTime}, Base.Pair{String, String}, Base.Pair{String, String}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Dates.DateTime}, Base.Pair{String, String}, Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{String}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Dates.DateTime}, Base.Pair{String, String}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, String}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Dates.DateTime, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Dates.DateTime}, Base.Pair{String, String}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(JSON.Writer.json), Base.Dict{String, Any}})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Dates.DateTime})
precompile(Tuple{typeof(JSON.Writer.json), Base.Dict{String, String}})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{String, String}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.Filesystem.isfile), String})
precompile(Tuple{typeof(Base.Multimedia.pushdisplay), IJulia.InlineDisplay})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{IO}})
precompile(Tuple{typeof(IJulia.watch_stdio)})
precompile(Tuple{typeof(Base.task_local_storage)})
precompile(Tuple{typeof(Base.delete!), Base.IdDict{Any, Any}, Any})
precompile(Tuple{typeof(IJulia.waitloop)})
precompile(Tuple{getfield(IJulia, Symbol("#22#24"))})
precompile(Tuple{getfield(Base, Symbol("#538#539")){typeof(IJulia.send_stdout), Base.Timer}})
precompile(Tuple{getfield(IJulia, Symbol("#23#25"))})
precompile(Tuple{getfield(Base, Symbol("#538#539")){typeof(IJulia.send_stderr), Base.Timer}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Ptr{Nothing}, Base.InterpreterIP}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}}}})
precompile(Tuple{getfield(IJulia, Symbol("#14#17"))})
precompile(Tuple{getfield(IJulia, Symbol("#15#18"))})
precompile(Tuple{getfield(JSON.Parser, Symbol("##parse#1")), Type{T} where T, Type{Int64}, Bool, Nothing, typeof(JSON.Parser.parse), String})
precompile(Tuple{typeof(JSON.Parser.parse_value), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{Type{IJulia.Msg}, Array{String, 1}, Base.Dict{String, Any}, Base.Dict{String, Any}, Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, Function}, String})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}, Base.Pair{String, String}}}})
precompile(Tuple{typeof(IJulia.kernel_info_request), ZMQ.Socket, IJulia.Msg})
precompile(Tuple{typeof(Base.print_to_string), UInt32, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Base.Dict{String, String}, 1}, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{Base.Dict{String, String}, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.flush), IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{typeof(JSON.Parser.skip!), JSON.Parser.MemoryParserState, UInt8, UInt8, Vararg{UInt8, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}, Base.Pair{String, Base.Dict{Any, Any}}}}})
precompile(Tuple{typeof(IJulia.execute_request), ZMQ.Socket, IJulia.Msg})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Int64})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, Int64}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Int64}, Base.Pair{String, String}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{Int64}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Int64}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Int64}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, Int64}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(IJulia.msg_pub), IJulia.Msg, String, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Int64})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{typeof(SoftGlobalScope.softscope_include_string), Module, String, String})
precompile(Tuple{typeof(ColorTypes.__init__)})
precompile(Tuple{typeof(Base.Experimental.register_error_hint), Function, Type{T} where T})
precompile(Tuple{typeof(Bzip2_jll.__init__)})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#artifact_meta##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(Zlib_jll.__init__)})
precompile(Tuple{typeof(FreeType2_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(FreeType2_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(FreeType2_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(libfdk_aac_jll.__init__)})
precompile(Tuple{typeof(OpenSSL_jll.__init__)})
precompile(Tuple{typeof(x265_jll.__init__)})
precompile(Tuple{typeof(Ogg_jll.__init__)})
precompile(Tuple{typeof(LAME_jll.__init__)})
precompile(Tuple{typeof(FriBidi_jll.__init__)})
precompile(Tuple{typeof(Opus_jll.__init__)})
precompile(Tuple{typeof(x264_jll.__init__)})
precompile(Tuple{typeof(libass_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(libass_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(libass_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(libvorbis_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(libvorbis_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(libvorbis_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(FFMPEG_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(FFMPEG_jll, Symbol("#13#15")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(FFMPEG_jll, Symbol("#14#16")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Requires.__init__)})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(PlotThemes.__init__)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, PlotThemes.PlotTheme}, PlotThemes.PlotTheme, Symbol})
precompile(Tuple{typeof(Base.get!), getfield(Requires, Symbol("#1#2")), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.push!), Array{Function, 1}, Function})
precompile(Tuple{typeof(GR.js.send), Base.Cstring, Int32})
precompile(Tuple{typeof(GR.js.recv), Base.Cstring, Int32, Base.Cstring})
precompile(Tuple{typeof(GR.__init__)})
precompile(Tuple{typeof(GR.isijulia)})
precompile(Tuple{typeof(Plots.__init__)})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.foreach), Function, Array{Base.Dict{Symbol, Any}, 1}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Nothing, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Float64, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Plots.reset_axis_defaults_byletter!)})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Plots, Symbol("#270#303"))})
precompile(Tuple{typeof(Requires.withnotifications), String, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("#271#304"))})
precompile(Tuple{typeof(Requires.err), Any, Module, String})
precompile(Tuple{getfield(Plots, Symbol("#272#305"))})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Plots._init_ijulia_plotting)})
precompile(Tuple{typeof(IJulia.undisplay), Nothing})
precompile(Tuple{typeof(Base.Multimedia.display)})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{K, V} where V where K, 1}}, Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{K, V} where V where K, 1}}, Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{K, V} where V where K, 1}}, Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Base.Dict{K, V} where V where K, 1}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{K, V} where V where K, 1}}, Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Base.Dict{Any, Any}, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{Base.Dict{K, V} where V where K, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{Any, Any}}}}})
precompile(Tuple{typeof(IJulia.execute_request), ZMQ.Socket, IJulia.Msg})
precompile(Tuple{Type{Main.LinpackData}, Array{Int64, 1}, Array{Float64, 1}, String, Symbol})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Int64})
precompile(Tuple{getfield(StaticArrays, Symbol("##s37#12")), Any, Any, Any, Any})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{1}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{1}}})
precompile(Tuple{typeof(Base.:(*)), Int64})
precompile(Tuple{getfield(StaticArrays, Symbol("##s37#6")), Any, Any, Any, Any, Any, Type{T} where T, Type{T} where T, Type{T} where T, Any})
precompile(Tuple{typeof(Base.all), Function, Core.SimpleVector})
precompile(Tuple{typeof(Base._all), getfield(StaticArrays, Symbol("#7#8")), Core.SimpleVector, Base.Colon})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{1}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s37#2")), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.ntuple), getfield(StaticArrays, Symbol("#3#4")), Base.Val{1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{RecipesBase.RecipeData}})
precompile(Tuple{typeof(RecipesBase.plot)})
precompile(Tuple{typeof(Base.setproperty!), Plots.CurrentBackend, Symbol, Plots.GRBackend})
precompile(Tuple{Type{Plots.Plot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend, Int64, RecipesPipeline.DefaultsDict, Array{Plots.Series, 1}, Nothing, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.EmptyLayout, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Bool})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{}})
precompile(Tuple{typeof(RecipesPipeline.recipe_pipeline!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Nothing, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, String, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Bool, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Float64, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(PlotUtils.isdark), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Plots.build_layout), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots.layout_args), Int64})
precompile(Tuple{Type{Plots.GridLayout}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##GridLayout#141")), Plots.RootLayout, Array{Float64, 1}, Array{Float64, 1}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Plots.GridLayout}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{Type{Array{RecipesBase.AbstractLayout, 2}}, UndefInitializer, Int64, Int64})
precompile(Tuple{Type{Measures.Length{:pct, Float64}}, Float64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots.build_layout), Plots.GridLayout, Int64})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:parent,), Tuple{Plots.GridLayout}}, Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend})
precompile(Tuple{typeof(Plots.attr), Plots.EmptyLayout, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{Type{Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Plots._update_subplot_periphery), Plots.Subplot{Plots.GRBackend}, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Plots.convertLegendValue), Symbol})
precompile(Tuple{typeof(PlotUtils.get_color_palette), Symbol, Int64})
precompile(Tuple{typeof(PlotUtils.get_colorscheme), Symbol})
precompile(Tuple{Type{PlotUtils.ColorPalette}, ColorSchemes.ColorScheme{Array{ColorTypes.RGB{Float64}, 1}, String, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, PlotUtils.ColorPalette, Symbol})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Int64})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, Symbol}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.allocatedinline), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Plots.Subplot{Plots.GRBackend}}})
precompile(Tuple{typeof(Base._unsafe_copyto!), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64, Array{Plots.Subplot{Plots.GRBackend}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Symbol}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Axis, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#83#84")){getfield(Plots, Symbol("#132#133"))}, Base.Iterators.Pairs{Int64, Base.Dict{Symbol, Any}, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Array{Base.Dict{Symbol, Any}, 1}}}, typeof(Base.first)}})
precompile(Tuple{typeof(Base.:(==)), Bool, Symbol})
precompile(Tuple{typeof(Base.vect), Main.LinpackData, Vararg{Main.LinpackData, N} where N})
precompile(Tuple{typeof(Base.iterate), Array{Main.LinpackData, 1}})
precompile(Tuple{typeof(Base.getproperty), Main.LinpackData, Symbol})
precompile(Tuple{typeof(Base.length), Array{Float64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(/)), Array{Float64, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:label, :color), T} where T<:Tuple}, Tuple{String, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Symbol}}})
precompile(Tuple{getfield(Base, Symbol("##s91#155")), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:label, :color), Tuple{String, Symbol}}}, Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Symbol, Symbol}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.OneTo{Int64}}})
precompile(Tuple{getfield(Plots, Symbol("#scatter!##kw")), NamedTuple{(:label, :color), Tuple{String, Symbol}}, typeof(Plots.scatter!), Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##scatter!#339")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:label, :color), Tuple{String, Symbol}}}, typeof(Plots.scatter!), Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:label, :color, :seriestype), Tuple{String, Symbol, Symbol}}, typeof(RecipesBase.plot!), Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#126")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:label, :color, :seriestype), Tuple{String, Symbol, Symbol}}}, typeof(RecipesBase.plot!), Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:label, :color, :seriestype), Tuple{String, Symbol, Symbol}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot!#127")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:label, :color, :seriestype), Tuple{String, Symbol, Symbol}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Int64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesPipeline.recipe_pipeline!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Int64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.prepend!), Array{RecipesBase.RecipeData, 1}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Array{Int64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(RecipesPipeline._process_fillrange), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.length), Array{Nothing, 1}})
precompile(Tuple{typeof(RecipesPipeline._process_ribbon), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.getindex), Array{Nothing, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._filter_input_data!), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.process_userrecipe!), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:scatter}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Base.show_unquoted_quote_expr), Base.GenericIOBuffer{Array{UInt8, 1}}, Any, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Plots._cycle), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{typeof(Plots.get_subplot), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{getfield(Base, Symbol("##chop#342")), Int64, Int64, typeof(Base.chop), String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, PlotUtils.ColorPalette, Symbol})
precompile(Tuple{typeof(PlotUtils.get_color_palette), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Base.convert), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._slice_series_args!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Int64})
precompile(Tuple{typeof(RecipesPipeline.is_seriestype_supported), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots.is_seriestype_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Float64})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, String})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Int64})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Nothing})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, PlotUtils.ColorPalette})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, RecipesPipeline.DefaultsDict, Symbol, Int64})
precompile(Tuple{typeof(RecipesPipeline.is3d), Symbol})
precompile(Tuple{typeof(RecipesPipeline.needs_3d_axes), Symbol})
precompile(Tuple{typeof(Base.:(==)), Plots.Axis, Symbol})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(==)), Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Bool})
precompile(Tuple{typeof(Plots.get_series_color), Symbol, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{typeof(Base.isabstracttype), Any})
precompile(Tuple{typeof(ColorTypes.basetype), Any})
precompile(Tuple{typeof(Base.typename), DataType})
precompile(Tuple{typeof(Base.eltype), Type{C}} where C<:(ColorTypes.Colorant{T, N} where N where T))
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Colorant{T, N}}} where N where T)
precompile(Tuple{typeof(Base.typename), UnionAll})
precompile(Tuple{typeof(ColorTypes._eltypes_supported), Type{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(Base.nameof), UnionAll})
precompile(Tuple{typeof(Base.nameof), DataType})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:categorical,), Tuple{Nothing}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(PlotUtils.plot_color), Symbol})
precompile(Tuple{typeof(ColorTypes._eltypes_supported), Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(ColorTypes._parameter_upper_bound), UnionAll, Int64})
precompile(Tuple{typeof(Colors._parse_colorant), String})
precompile(Tuple{typeof(Base.convert), Type{ColorTypes.RGBA{Float64}}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, String, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.label_to_string), Tuple{Base.RefValue{String}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Plots.label_to_string), Tuple{Base.RefValue{String}, Int64}}})
precompile(Tuple{typeof(Base.:(==)), Int64, Symbol})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Nothing}})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#142#143")){Base.Set{Symbol}}, Base.Dict{Symbol, Base.Set{Symbol}}, Symbol})
precompile(Tuple{typeof(Base.union!), Base.Set{Symbol}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Symbol}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Base.Set{Symbol}}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Iterators.Flatten{Tuple{Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Base.Set{Symbol}}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Set{Symbol}, Int64})
precompile(Tuple{typeof(Base.iterate), RecipesPipeline.DefaultsDict, Tuple{Array{Symbol, 1}, Int64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Nothing})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Float64, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(!=)), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(!=)), Bool, Bool})
precompile(Tuple{typeof(Base.:(!=)), Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.:(*)), Array{Int64, 1}, Float64})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:label, :color), Tuple{String, Symbol}}, typeof(RecipesBase.plot!), Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#126")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:label, :color), Tuple{String, Symbol}}}, typeof(RecipesBase.plot!), Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:label, :color), Tuple{String, Symbol}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot!#127")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:label, :color), Tuple{String, Symbol}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.iterate), Array{Main.LinpackData, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:legend,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:legend,), Tuple{Symbol}}, typeof(RecipesBase.plot!)})
precompile(Tuple{getfield(Plots, Symbol("##plot!#126")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:legend,), Tuple{Symbol}}}, typeof(RecipesBase.plot!)})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:legend,), Tuple{Symbol}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:xlabel,), Tuple{String}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Plots.xlabel!), String})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:xlabel,), Tuple{String}}, typeof(RecipesBase.plot!)})
precompile(Tuple{getfield(Plots, Symbol("##plot!#126")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:xlabel,), Tuple{String}}}, typeof(RecipesBase.plot!)})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:xlabel,), Tuple{String}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.slice_arg), String, Int64})
precompile(Tuple{Type{NamedTuple{(:guide,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:guide,), Tuple{String}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:ylabel,), Tuple{String}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Plots.ylabel!), String})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:ylabel,), Tuple{String}}, typeof(RecipesBase.plot!)})
precompile(Tuple{getfield(Plots, Symbol("##plot!#126")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:ylabel,), Tuple{String}}}, typeof(RecipesBase.plot!)})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:ylabel,), Tuple{String}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:xticks,), Tuple{Array{Int64, 1}}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Plots.xticks!), Array{Int64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##xticks!#411")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.xticks!), Array{Int64, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:xticks,), Tuple{Array{Int64, 1}}}, typeof(RecipesBase.plot!)})
precompile(Tuple{getfield(Plots, Symbol("##plot!#126")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol}, NamedTuple{(:xticks,), Tuple{Array{Int64, 1}}}}, typeof(RecipesBase.plot!)})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:xticks,), Tuple{Array{Int64, 1}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.slice_arg), Array{Int64, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:ticks,), T} where T<:Tuple}, Tuple{Array{Int64, 1}}})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:ticks,), Tuple{Array{Int64, 1}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Base.:(==)), Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:yticks,), Tuple{Base.UnitRange{Int64}}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Plots.yticks!), Base.UnitRange{Int64}})
precompile(Tuple{getfield(Plots, Symbol("##yticks!#412")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.yticks!), Base.UnitRange{Int64}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:yticks,), Tuple{Base.UnitRange{Int64}}}, typeof(RecipesBase.plot!)})
precompile(Tuple{getfield(Plots, Symbol("##plot!#126")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol}, NamedTuple{(:yticks,), Tuple{Base.UnitRange{Int64}}}}, typeof(RecipesBase.plot!)})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:yticks,), Tuple{Base.UnitRange{Int64}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.slice_arg), Base.UnitRange{Int64}, Int64})
precompile(Tuple{Type{NamedTuple{(:ticks,), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:ticks,), Tuple{Base.UnitRange{Int64}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Base.:(==)), Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, Plots.Plot{Plots.GRBackend}, Int64})
precompile(Tuple{typeof(IJulia.undisplay), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia.metadata), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia.display_dict), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Base.Multimedia.MIME{Symbol("image/svg+xml")}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("image/svg+xml")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(*)), Int64, Measures.Length{:mm, Float64}})
precompile(Tuple{Type{Measures.Length{:mm, Float64}}, Float64})
precompile(Tuple{Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.setproperty!), Plots.GridLayout, Symbol, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.convert), Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.map), Function, Array{RecipesBase.AbstractLayout, 2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots._update_min_padding!), Array{RecipesBase.AbstractLayout, 2}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}})
precompile(Tuple{typeof(Base.:(==)), Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.:(==)), String, Symbol})
precompile(Tuple{typeof(Plots._transform_ticks), Array{Int64, 1}})
precompile(Tuple{typeof(Base.in), Array{Int64, 1}, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Plots.optimal_ticks_and_labels), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Array{Int64, 1}})
precompile(Tuple{typeof(Plots.axis_limits), Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.getproperty), Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.:(<=)), Float64, Float64})
precompile(Tuple{typeof(Base.isfinite), Float64})
precompile(Tuple{typeof(Base.getproperty), Plots.Axis, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{typeof(Plots.ispolar), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.widen), Float64, Float64, Symbol})
precompile(Tuple{getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, Float64})
precompile(Tuple{typeof(Base.identity), Float64})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{getfield(RecipesPipeline, Symbol("#13#14")){Symbol}, Float64})
precompile(Tuple{typeof(Base.filter), getfield(Plots, Symbol("#100#102")){Float64, Float64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{Int64, 1}, Type{Float64}, Base.Generator{Array{Int64, 1}, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Int64, 1}, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}})
precompile(Tuple{typeof(Base._similar_for), Array{Float64, 1}, Type{Float64}, Base.Generator{Array{Float64, 1}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.any), Function, Array{Float64, 1}})
precompile(Tuple{getfield(Base, Symbol("##any#636")), Function, typeof(Base.any), Function, Array{Float64, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.isfinite), Array{Float64, 1}, Base.Colon})
precompile(Tuple{typeof(Plots.labelfunc), Symbol, Plots.GRBackend})
precompile(Tuple{typeof(Showoff.showoff), Array{Float64, 1}, Symbol})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.string), Array{String, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, typeof(Base.string)}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64, Int64})
precompile(Tuple{typeof(Plots._transform_ticks), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.in), Base.UnitRange{Int64}, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Plots.optimal_ticks_and_labels), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.filter), getfield(Plots, Symbol("#100#102")){Float64, Float64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.in), Tuple{Array{Float64, 1}, Array{String, 1}}, Tuple{Nothing, Bool, Symbol}})
precompile(Tuple{typeof(Base.:(==)), Float64, Symbol})
precompile(Tuple{typeof(Plots.font), String, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##font#86")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.font), String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.in), String, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.parse), Type{ColorTypes.Colorant{T, N} where N where T}, String})
precompile(Tuple{typeof(Base.in), Int64, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.in), Float64, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.in), ColorTypes.RGBA{Float64}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Plots.Font}, String, Int64, Symbol, Symbol, Float64, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.sign), Int64})
precompile(Tuple{Type{NamedTuple{(:halign, :valign, :rotation), T} where T<:Tuple}, Tuple{Symbol, Symbol, Int64}})
precompile(Tuple{getfield(Plots, Symbol("#gr_set_font##kw")), NamedTuple{(:halign, :valign, :rotation), Tuple{Symbol, Symbol, Int64}}, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#334")), Symbol, Symbol, ColorTypes.RGBA{Float64}, Int64, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.get_thickness_scaling), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.get_thickness_scaling), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Base.:(*)), Float64, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.get_size), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.get_size), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Base.maximum), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{typeof(GR.setcharheight), Float64})
precompile(Tuple{typeof(Base.Math.sind), Int64})
precompile(Tuple{typeof(Base.Math.cosd), Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Int64}, String})
precompile(Tuple{typeof(Plots.gr_get_ticks_size), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(GR.latin1), String})
precompile(Tuple{typeof(Base._extrema_itr), typeof(Base.identity), Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(*)), Int64, Float64})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#334")), Symbol, Symbol, ColorTypes.RGBA{Float64}, Float64, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Math.sind), Float64})
precompile(Tuple{typeof(Base.Math.cosd), Float64})
precompile(Tuple{typeof(Plots.gr_text_size), String})
precompile(Tuple{typeof(Base.:(==)), Bool, Bool})
precompile(Tuple{typeof(Base.vect), Measures.Length{:mm, Float64}, Vararg{Measures.Length{:mm, Float64}, N} where N})
precompile(Tuple{typeof(Base.:(*)), Int64, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Measures.Length{:mm, Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{Type{Tuple}, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Nothing, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 2}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Int64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{RecipesBase.AbstractLayout, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.leftpad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}})
precompile(Tuple{typeof(Plots.leftpad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Int64})
precompile(Tuple{typeof(Base.maximum), Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{RecipesBase.AbstractLayout, 2}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.toppad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}})
precompile(Tuple{typeof(Plots.toppad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.rightpad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}})
precompile(Tuple{typeof(Plots.rightpad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.bottompad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}})
precompile(Tuple{typeof(Plots.bottompad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Int64})
precompile(Tuple{getfield(Base, Symbol("#maximum##kw")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.maximum), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.reducedim_init), Function, typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{getfield(Base, Symbol("##mapfoldl#204")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.mapfoldl), Function, Function, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.min), NamedTuple{(), Tuple{}}, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}})
precompile(Tuple{typeof(Base.:(!=)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base._realtype), Function, Type{T} where T})
precompile(Tuple{typeof(Base.reducedim_initarray), Array{Measures.Length{:mm, Float64}, 2}, Int64, Measures.Length{:mm, Float64}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.mapreducedim!), Function, Function, Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base._mapreducedim!), typeof(Base.identity), typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.max), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{typeof(Base.getindex), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64})
precompile(Tuple{typeof(Base.eachindex), Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.last), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.:(+)), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Measures.Length{:mm, Float64}, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}, Int64})
precompile(Tuple{typeof(Base.sum), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.:(==)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.:(/)), Measures.Length{:pct, Float64}, Int64})
precompile(Tuple{typeof(Base.:(*)), Measures.Length{:mm, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Plots.plotarea!), Plots.Subplot{Plots.GRBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.afoldl), Function, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.bbox!), Plots.Subplot{Plots.GRBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(GR.inqdspsize)})
precompile(Tuple{typeof(Base.float), Int64})
precompile(Tuple{typeof(GR.setwsviewport), Int64, Float64, Int64, Float64})
precompile(Tuple{typeof(GR.setwswindow), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Float64, Int64})
precompile(Tuple{typeof(Plots.gr_fill_viewport), Array{Float64, 1}, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(GR.fillrect), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Plots.gr_display), Plots.Subplot{Plots.GRBackend}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_viewport_from_bbox), Plots.Subplot{Plots.GRBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Plots.Series, 1}, typeof(Plots.hascolorbar)}, Base.Colon})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Symbol, 1}, getfield(Plots, Symbol("#47#48")){Plots.Series}}, Base.Colon})
precompile(Tuple{typeof(Plots.legendfont), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(GR.setviewport), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.:(>)), Float64, Float64})
precompile(Tuple{typeof(Base.:(&)), Int64, Int64})
precompile(Tuple{typeof(GR.tick), Float64, Float64})
precompile(Tuple{typeof(GR.setwindow), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(GR.setlinewidth), Int64})
precompile(Tuple{typeof(Plots.get_minor_ticks), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Tuple{Array{Float64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.in), Bool, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64}}, Tuple{Float64, Float64}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.iterate), Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Plots.gr_set_line), Float64, Symbol, ColorTypes.RGBA{Float64}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.nominal_size), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.max), Int64, Float64})
precompile(Tuple{typeof(GR.setlinewidth), Float64})
precompile(Tuple{typeof(Plots.gr_set_transparency), ColorTypes.RGBA{Float64}, Float64})
precompile(Tuple{typeof(Plots.gr_set_line), Int64, Symbol, ColorTypes.RGBA{Float64}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(/)), Int64, Float64})
precompile(Tuple{typeof(Base.in), Tuple{Array{Float64, 1}, Array{String, 1}}, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Float64, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, String}, Int64, Int64})
precompile(Tuple{typeof(GR.wctondc), Float64, Float64})
precompile(Tuple{typeof(Plots.gr_tick_label), Plots.Axis, String})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{String, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Plots.gr_axis_height), Plots.Subplot{Plots.GRBackend}, Plots.Axis})
precompile(Tuple{typeof(Plots.gr_axis_width), Plots.Subplot{Plots.GRBackend}, Plots.Axis})
precompile(Tuple{typeof(Plots.gr_set_gradient), Plots.Series})
precompile(Tuple{typeof(Plots.get_clims), Plots.Subplot{Plots.GRBackend}, Plots.Series})
precompile(Tuple{typeof(Plots.get_clims), Plots.Subplot{Plots.GRBackend}, Plots.Series, Function})
precompile(Tuple{typeof(Plots.get_clims), Plots.Series, typeof(Plots.ignorenan_extrema)})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Plots._update_clims), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.collect), Array{Float64, 1}})
precompile(Tuple{typeof(Base.in), Float64, Array{Float64, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Symbol, 1}, getfield(Plots, Symbol("#49#51")){Plots.Series}}, Base.Colon})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Tuple{Symbol, Symbol, Symbol}, getfield(Plots, Symbol("#50#52")){Plots.Series}}, Base.Colon})
precompile(Tuple{typeof(RecipesPipeline.is3d), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots.iter_segments), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Plots.SegmentsIterator})
precompile(Tuple{typeof(Base.findfirst), Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#64#65")){getfield(Plots, Symbol("#9#10")){Tuple{Array{Float64, 1}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#9#10")){Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.push!), Array{Base.UnitRange{Int64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Plots.SegmentsIterator, Int64})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Array{Float64, 1}, Array{Float64, 1}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Array{Float64, 1}, Array{Float64, 1}, Tuple{Float64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Base.UnitRange{Int64}, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Plots._cycle), Symbol, Int64})
precompile(Tuple{typeof(Plots.gr_draw_marker), Plots.Series, Float64, Float64, Tuple{Float64, Float64}, Int64, Int64, Int64, Symbol})
precompile(Tuple{typeof(Plots.get_markerstrokecolor), Plots.Series, Int64})
precompile(Tuple{typeof(Plots._cycle), ColorTypes.RGBA{Float64}, Int64})
precompile(Tuple{typeof(Plots.gr_set_bordercolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.get_markercolor), Plots.Series, Float64, Float64, Int64})
precompile(Tuple{typeof(Plots.gr_set_markercolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.get_markeralpha), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.nominal_size), Plots.Series})
precompile(Tuple{typeof(GR.setmarkersize), Float64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Base.UnitRange{Int64}, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Plots.get_linecolor), Plots.Series, Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Plots.get_linecolor), Plots.Series, Float64, Float64, Int64})
precompile(Tuple{typeof(Plots._cycle), Int64, Int64})
precompile(Tuple{typeof(Plots.gr_set_fillcolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.gr_set_transparency), ColorTypes.RGBA{Float64}, Nothing})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:arrowside, :arrowstyle), T} where T<:Tuple}, Tuple{Symbol, Symbol}})
precompile(Tuple{getfield(Plots, Symbol("#gr_polyline##kw")), NamedTuple{(:arrowside, :arrowstyle), Tuple{Symbol, Symbol}}, typeof(Plots.gr_polyline), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_legend_pos), Plots.Subplot{Plots.GRBackend}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(GR.drawrect), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Plots.get_linecolor), Plots.Series, Tuple{Float64, Float64}})
precompile(Tuple{typeof(GR.polyline), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_set_textcolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{Any, Any}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Int64}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
precompile(Tuple{typeof(Expat_jll.__init__)})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#artifact_meta##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(Libiconv_jll.__init__)})
precompile(Tuple{typeof(XML2_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(XML2_jll, Symbol("#13#15")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(XML2_jll, Symbol("#14#16")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Libgpg_error_jll.__init__)})
precompile(Tuple{typeof(Libgcrypt_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Libgcrypt_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Libgcrypt_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(XSLT_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(XSLT_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(XSLT_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Gettext_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Gettext_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Gettext_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(libpng_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(libpng_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(libpng_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Xorg_xtrans_jll.__init__)})
precompile(Tuple{typeof(Xorg_libpthread_stubs_jll.__init__)})
precompile(Tuple{typeof(Xorg_libXdmcp_jll.__init__)})
precompile(Tuple{typeof(Xorg_libXau_jll.__init__)})
precompile(Tuple{typeof(Xorg_libxcb_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libxcb_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libxcb_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Xorg_libX11_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libX11_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libX11_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Xorg_libXrender_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libXrender_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libXrender_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Libuuid_jll.__init__)})
precompile(Tuple{typeof(Fontconfig_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Fontconfig_jll, Symbol("#34#36")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Fontconfig_jll, Symbol("#35#37")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Libmount_jll.__init__)})
precompile(Tuple{typeof(LZO_jll.__init__)})
precompile(Tuple{typeof(Pixman_jll.__init__)})
precompile(Tuple{typeof(Xorg_libXext_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libXext_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libXext_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(PCRE_jll.__init__)})
precompile(Tuple{typeof(Libffi_jll.__init__)})
precompile(Tuple{typeof(Glib_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Glib_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Glib_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Cairo_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Cairo_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Cairo_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Graphite2_jll.__init__)})
precompile(Tuple{typeof(HarfBuzz_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(HarfBuzz_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(HarfBuzz_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Pango_jll.__init__)})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(Base.foreach), getfield(Pango_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Pango_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(MacroTools.__init__)})
precompile(Tuple{typeof(Random.shuffle!), Random.MersenneTwister, Array{Symbol, 1}})
precompile(Tuple{typeof(Media.__init__)})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Function, 1}}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Base.PkgId, Array{Function, 1}}, Int64})
precompile(Tuple{getfield(PlotThemes, Symbol("#14#17"))})
precompile(Tuple{getfield(PlotThemes, Symbol("#15#18"))})
precompile(Tuple{getfield(PlotThemes, Symbol("#16#19"))})
precompile(Tuple{typeof(PlotThemes.include), String})
precompile(Tuple{typeof(Juno.isactive)})
precompile(Tuple{getfield(Plots, Symbol("#273#306"))})
precompile(Tuple{getfield(Plots, Symbol("#274#307"))})
precompile(Tuple{getfield(Plots, Symbol("#275#308"))})
precompile(Tuple{typeof(AssetRegistry.__init__)})
precompile(Tuple{typeof(WebIO.__init__)})
precompile(Tuple{getfield(WebIO, Symbol("#75#87"))})
precompile(Tuple{getfield(WebIO, Symbol("#76#88"))})
precompile(Tuple{getfield(WebIO, Symbol("#77#89"))})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:file, :code), Tuple{String, String}}, Symbol})
precompile(Tuple{typeof(Base.include_string), Module, String, String})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{getfield(WebIO, Symbol("#@js_str")), LineNumberNode, Module, Any})
precompile(Tuple{Type{WebIO.Interpolator{S} where S<:AbstractString}, String})
precompile(Tuple{typeof(Base.map), Function, WebIO.Interpolator{String}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(WebIO, Symbol("#15#16")), WebIO.Interpolator{String}})
precompile(Tuple{typeof(Base.collect), Base.Generator{WebIO.Interpolator{String}, getfield(WebIO, Symbol("#15#16"))}})
precompile(Tuple{typeof(WebIO.iterate_interpolations), String, Int64})
precompile(Tuple{getfield(WebIO, Symbol("#15#16")), String})
precompile(Tuple{typeof(Base.grow_to!), Array{Expr, 1}, Base.Generator{WebIO.Interpolator{String}, getfield(WebIO, Symbol("#15#16"))}, Int64})
precompile(Tuple{getfield(WebIO, Symbol("#15#16")), Symbol})
precompile(Tuple{typeof(Base.iterate), WebIO.Interpolator{String}, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}}})
precompile(Tuple{typeof(WebIO.setup), Symbol})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt64})
precompile(Tuple{getfield(WebIO, Symbol("#95#96")){String, String}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, WebIO.JSString})
precompile(Tuple{typeof(Base.Multimedia.display), Media.DisplayHook, Base.Docs.HTML{String}})
precompile(Tuple{getfield(Media, Symbol("##getdisplay#13")), Nothing, typeof(Media.getdisplay), Type{T} where T, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Any, 1}, Base.Colon})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), getfield(Media, Symbol("#11#12")){UnionAll}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{getfield(Media, Symbol("#11#12")){UnionAll}, Type{T} where T, Type{T} where T})
precompile(Tuple{typeof(Media.distance), Type{T} where T, Type{T} where T})
precompile(Tuple{typeof(Media.media), Type{Base.Docs.HTML{T} where T}})
precompile(Tuple{getfield(Base, Symbol("##mapfoldl#204")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.mapfoldl), Function, Function, Base.KeySet{Any, Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), getfield(Media, Symbol("#11#12")){DataType}, NamedTuple{(), Tuple{}}, Base.KeySet{Any, Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Type{T} where T})
precompile(Tuple{typeof(Base.Multimedia.display), IJulia.InlineDisplay, Base.Docs.HTML{String}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, Base.Docs.HTML{String}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.string), Base.Multimedia.MIME{Symbol("text/plain")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Base.Docs.HTML{String}})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, Base.Docs.HTML{String}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.Docs.HTML{String}}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.Docs.HTML{String}}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.Docs.HTML{String}}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.Docs.HTML{String}}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/markdown")}, Base.Docs.HTML{String}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/html")}, Base.Docs.HTML{String}})
precompile(Tuple{typeof(IJulia.display_mimestring), Base.Multimedia.MIME{Symbol("text/html")}, Base.Docs.HTML{String}})
precompile(Tuple{typeof(Base.string), Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, Base.Docs.HTML{String}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.Docs.HTML{String}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.Docs.HTML{String}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.Docs.HTML{String}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.Docs.HTML{String}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.Docs.HTML{String}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.Docs.HTML{String}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Base.Docs.HTML{String}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Base.Docs.HTML{String}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.webio.node+json")}, Base.Docs.HTML{String}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.Dict{Any, Any}}, Base.Dict{Any, Any}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Base.Dict{Any, Any}}, Tuple{Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Base.Dict{Any, Any}}, Type{String}, Type{Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Base.Dict{K, V} where V where K}, Base.Dict{String, Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.Dict{K, V} where V where K}, Base.Dict{String, Union{String, JSON.Writer.JSONText}}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}, Int64})
precompile(Tuple{typeof(IJulia.msg_pub), IJulia.Msg, String, Base.Dict{String, Base.Dict{K, V} where V where K}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Dates.DateTime}, Base.Pair{String, String}, Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Dates.DateTime}, Base.Pair{String, String}, Base.Pair{String, String}}, Int64})
precompile(Tuple{Type{IJulia.Msg}, Array{String, 1}, Base.Dict{String, Any}, Base.Dict{String, Base.Dict{K, V} where V where K}, Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.json), Base.Dict{String, Base.Dict{K, V} where V where K}})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{String, Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{String, Union{String, JSON.Writer.JSONText}}})
precompile(Tuple{typeof(InteractBase.__init__)})
precompile(Tuple{typeof(Interact.__init__)})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex2), OrderedCollections.OrderedDict{Symbol, InteractBase.WidgetTheme}, Symbol})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Symbol, InteractBase.WidgetTheme}, Interact.Bulma, Symbol, Int64})
precompile(Tuple{typeof(Base.Multimedia.display)})
precompile(Tuple{typeof(IJulia.execute_request), ZMQ.Socket, IJulia.Msg})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, Int64}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Int64}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(IJulia.msg_pub), IJulia.Msg, String, Base.Dict{String, Any}})
precompile(Tuple{getfield(Unitful, Symbol("##s49#29")), Any, Any, Any})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{Type{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Int64, Base.Rational{Int64}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}, Base.Rational{Int64}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{#s136} where #s136<:(AbstractArray{E, N} where N)} where E)
precompile(Tuple{getfield(Unitful, Symbol("##s35#8")), Any, Any, Any})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Length}}})
precompile(Tuple{Type{Unitful.Dimension{:Length}}, Base.Rational{Int64}})
precompile(Tuple{getfield(Unitful, Symbol("##s50#97")), Any, Any, Any})
precompile(Tuple{typeof(Base.:(*)), Int64, Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Float64, Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.flush), IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{typeof(IJulia.send_stream), String})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{K, V} where V where K, 1}}, Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{K, V} where V where K, 1}}, Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{K, V} where V where K, 1}}, Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{getfield(Widgets, Symbol("#@manipulate")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Widgets.symbols), Array{Any, 1}})
precompile(Tuple{getfield(Widgets, Symbol("#114#115")), Expr})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Symbol}, Base.Generator{Array{Any, 1}, getfield(Widgets, Symbol("#114#115"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Any, 1}, getfield(Widgets, Symbol("#114#115"))}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Widgets.make_widget), Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Widgets.make_widget)}})
precompile(Tuple{typeof(Widgets.make_widget), Expr})
precompile(Tuple{typeof(Widgets.map_block), Expr, Array{Symbol, 1}, Nothing})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Expr, 1}, getfield(Widgets, Symbol("#111#113")){Nothing}}})
precompile(Tuple{getfield(Widgets, Symbol("#get_obs#112")), Expr, Nothing})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Expr, 1}, getfield(Widgets, Symbol("#111#113")){Nothing}}, Int64})
precompile(Tuple{getfield(Unitful, Symbol("#@u_str")), LineNumberNode, Module, Any})
precompile(Tuple{typeof(Base.Meta.parse), String})
precompile(Tuple{typeof(Base.vect), Module})
precompile(Tuple{typeof(Base.iterate), Array{Module, 1}})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{typeof(Unitful.lookup_units), Array{Module, 1}, Symbol})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Unitful, Symbol("#5#7")){Unitful.FreeUnits{(Unitful.Unit{:Radian, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.any), Base.Generator{Array{Any, 1}, getfield(Unitful, Symbol("#5#7")){Unitful.FreeUnits{(Unitful.Unit{:Radian, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Degree, Unitful.Dimensions{()}()}}})
precompile(Tuple{Type{Unitful.Unit{:Degree, Unitful.Dimensions{()}()}}, Int64, Base.Rational{Int64}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Degree, Unitful.Dimensions{()}()}}})
precompile(Tuple{typeof(Base.:(*)), Int64, Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Float64, Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}})
precompile(Tuple{getfield(Unitful, Symbol("##s50#57")), Any, Any})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{}})
precompile(Tuple{Base.Colon, Unitful.Quantity{Int64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{Type{NamedTuple{(:label,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Unitful.Unit{:Degree, Unitful.Dimensions{()}()}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.allocatedinline), Type{FunctionalCollections.DenseBitmappedTrie{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.StackTraces.StackFrame, Int64}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{WebIO.Asset}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Dict{String, Any}, Base.Dict{String, String}}}})
precompile(Tuple{getfield(Widgets, Symbol("#rangeslider##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.rangeslider), Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{getfield(Widgets, Symbol("##rangeslider#58")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:label,), Tuple{String}}}, typeof(Widgets.rangeslider), Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{getfield(Widgets, Symbol("#rangeslider##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.rangeslider), Interact.Bulma, Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{getfield(Widgets, Symbol("#rangeslider##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.rangeslider), Interact.Bulma, Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Array{String, 1}})
precompile(Tuple{getfield(InteractBase, Symbol("##rangeslider#67")), Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:label,), Tuple{String}}}, typeof(Widgets.rangeslider), Interact.Bulma, Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Array{String, 1}})
precompile(Tuple{Type{Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{typeof(Base.vec), Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{typeof(Base.axes), Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:f, :g), Tuple{getfield(InteractBase, Symbol("#68#71")), getfield(InteractBase, Symbol("#70#73"))}}, Type{Observables.ObservablePair{S, T} where T where S}, Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}})
precompile(Tuple{typeof(InteractBase._searchsortedfirst), Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{getfield(Base.Sort, Symbol("##searchsortedfirst#4")), Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.Sort.searchsortedfirst), Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{typeof(Base.Sort.searchsortedfirst), Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Observables.on), Function, Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}})
precompile(Tuple{typeof(WebIO.setup_comm), Function, Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}})
precompile(Tuple{typeof(Observables.on), Function, Observables.Observable{Any}})
precompile(Tuple{typeof(WebIO.setup_comm), Function, Observables.Observable{Any}})
precompile(Tuple{Type{NamedTuple{(:value,), T} where T<:Tuple}, Tuple{Observables.Observable{Any}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:value,), Tuple{Observables.Observable{Any}}}}, Type{NamedTuple{(:label,), Tuple{String}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:value,), Tuple{Observables.Observable{Any}}}, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:label,), Tuple{String}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Nothing}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{WebIO.Scope, Observables.Observable{Any}, getfield(InteractBase, Symbol("#91#98")){String, Bool, String}}}})
precompile(Tuple{getfield(Widgets, Symbol("#rangeslider##kw")), NamedTuple{(:value, :label), Tuple{Observables.Observable{Any}, String}}, typeof(Widgets.rangeslider), Interact.Bulma, Base.OneTo{Int64}, Array{String, 1}})
precompile(Tuple{getfield(InteractBase, Symbol("#86#93")), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(InteractBase, Symbol("#88#95")), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Any}, WeakRef})
precompile(Tuple{typeof(Base.:(==)), Observables.Observable{Any}, WeakRef})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Any}, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{WeakRef, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{WeakRef, String}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), WeakRef, Symbol})
precompile(Tuple{typeof(JSExpr.jsexpr), Base.Dict{String, String}})
precompile(Tuple{getfield(JSExpr, Symbol("#1#2")), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Bool}, WeakRef})
precompile(Tuple{typeof(Base.:(==)), Observables.Observable{Bool}, WeakRef})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Bool}, Observables.Observable{Bool}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Int64}, WeakRef})
precompile(Tuple{typeof(Base.:(==)), Observables.Observable{Int64}, WeakRef})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Int64}, Observables.Observable{Int64}})
precompile(Tuple{typeof(Base.fill), Bool, Int64})
precompile(Tuple{typeof(Base.join), Array{Bool, 1}, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Array{Bool, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Bool, 1}, String})
precompile(Tuple{getfield(InteractBase, Symbol("#89#96")){Array{String, 1}, WebIO.JSString, Int64, Int64, String, WebIO.JSString, WebIO.JSString, WebIO.JSString, WebIO.JSString}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{typeof(WebIO.tojs), String})
precompile(Tuple{typeof(WebIO.showjs), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{getfield(WebIO, Symbol("#42#43")){WebIO.Scope, WebIO.JSString}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(WebIO, Symbol("#23#24")){WebIO.Async}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(WebIO.lowerassets), Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(WebIO.lowerassets)}})
precompile(Tuple{typeof(WebIO.lowerassets), WebIO.Asset})
precompile(Tuple{typeof(Base.print_to_string), Int32, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Tuple{String, Int64}, String})
precompile(Tuple{typeof(JSON.Writer.print), Base.IOStream, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.IOStream}, JSON.Serializations.StandardSerialization, String, Array{Any, 1}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.IOStream}, JSON.Serializations.StandardSerialization, String})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.IOStream}, JSON.Serializations.StandardSerialization, Int64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.IOStream}, JSON.Serializations.StandardSerialization, String, Tuple{String, Int64}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Nothing}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, String}, Type{String}, Type{Union{Nothing, String}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Union{Nothing, String}}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Union{Nothing, String}}, Nothing, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Union{Nothing, String}}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Nothing}}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Base.Dict{String, Union{Nothing, String}}}, Base.Generator{Array{Any, 1}, typeof(WebIO.lowerassets)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Dict{String, Union{Nothing, String}}, 1}, Base.Dict{String, Union{Nothing, String}}, Base.Generator{Array{Any, 1}, typeof(WebIO.lowerassets)}, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Array{Base.Dict{String, Union{Nothing, String}}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, Union{Nothing, String}}, 1}}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Dict{String, Union{Nothing, String}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, Union{Nothing, String}}, 1}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, Union{Nothing, String}}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Base.Dict{String, Union{Nothing, String}}, 1}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, Union{Nothing, String}}, 1}}}, Int64})
precompile(Tuple{typeof(WebIO.showjs), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, String, Array{Base.Dict{String, Union{Nothing, String}}, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, Base.Pair{String, Union{Nothing, String}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, String, String})
precompile(Tuple{typeof(Widgets.slap_design!), WebIO.Scope, Interact.Bulma})
precompile(Tuple{getfield(JSExpr, Symbol("#1#2")), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(WebIO.ensure_sync), WebIO.Scope, String})
precompile(Tuple{typeof(Observables.listeners), Observables.Observable{Any}})
precompile(Tuple{typeof(Observables.on), WebIO.SyncCallback, Observables.Observable{Any}})
precompile(Tuple{typeof(WebIO.setup_comm), WebIO.SyncCallback, Observables.Observable{Any}})
precompile(Tuple{typeof(WebIO.onjs), WebIO.Scope, String, WebIO.JSString})
precompile(Tuple{typeof(Base.get!), getfield(WebIO, Symbol("#46#47")), Base.Dict{Any, Any}, String})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Base.Dict{String, V} where V, Tuple{Symbol, Symbol}, NamedTuple{(:style, :attributes), Tuple{Base.Dict{String, Any}, Base.Dict{String, String}}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Base.Dict{String, V} where V, Tuple{Symbol, Symbol}, NamedTuple{(:style, :attributes), Tuple{Base.Dict{String, Any}, Base.Dict{String, String}}}}, Int64})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Base.Dict{String, V} where V}, Vararg{Base.Pair{Symbol, Base.Dict{String, V} where V}, N} where N})
precompile(Tuple{Type{Base.Dict{Symbol, Base.Dict{String, V} where V}}, Tuple{Base.Pair{Symbol, Base.Dict{String, V} where V}, Base.Pair{Symbol, Base.Dict{String, V} where V}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Dict{String, V} where V}, Base.Dict{String, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Dict{String, V} where V}, Base.Dict{String, String}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Dict{String, String}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Dict{String, Any}, Symbol})
precompile(Tuple{typeof(Base.vect), Base.Pair{String, Observables.Observable{Any}}, Vararg{Any, N} where N})
precompile(Tuple{Type{Array{Base.Pair{String, Observables.Observable{T} where T}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{String, Observables.Observable{T} where T}, 1}, Tuple{Base.Pair{String, Observables.Observable{Any}}, Base.Pair{String, Observables.Observable{Int64}}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Observables.Observable{Any}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Observables.Observable{Int64}})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Observables.Observable{Int64}, Symbol})
precompile(Tuple{getfield(Widgets, Symbol("#_#1#2")), Observables.Observable{Any}, WebIO.Scope, Function, Type{Widgets.Widget{:rangeslider, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{Type{NamedTuple{(:output,), T} where T<:Tuple}, Tuple{Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:output,), Tuple{Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}}, Type{Widgets.Widget{T, S} where S where T}, Widgets.Widget{:rangeslider, Any}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:output,), Tuple{Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}}, Type{Widgets.Widget{:rangeslider, S} where S}, Widgets.Widget{:rangeslider, Any}})
precompile(Tuple{getfield(Widgets, Symbol("##_#7")), Base.Iterators.Pairs{Symbol, Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Tuple{Symbol}, NamedTuple{(:output,), Tuple{Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}}}, Type{Widgets.Widget{:rangeslider, S} where S}, Widgets.Widget{:rangeslider, Any}})
precompile(Tuple{typeof(Base.get!), Base.Dict{Symbol, Any}, Symbol, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{typeof(Base.get!), Base.Dict{Symbol, Any}, Symbol, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.get!), Base.Dict{Symbol, Any}, Symbol, WebIO.Scope})
precompile(Tuple{typeof(Base.get!), Base.Dict{Symbol, Any}, Symbol, Function})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#142#143")){getfield(InteractBase, Symbol("#91#98")){String, Bool, String}}, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{Type{NamedTuple{(:output, :components, :layout, :scope), T} where T<:Tuple}, Tuple{Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, OrderedCollections.OrderedDict{Symbol, Any}, getfield(InteractBase, Symbol("#91#98")){String, Bool, String}, WebIO.Scope}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, getfield(InteractBase, Symbol("#91#98")){String, Bool, String}, WebIO.Scope}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:output, :components, :layout, :scope), Tuple{Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, OrderedCollections.OrderedDict{Symbol, Any}, getfield(InteractBase, Symbol("#91#98")){String, Bool, String}, WebIO.Scope}}, Type{Widgets.Widget{:rangeslider, S} where S}})
precompile(Tuple{getfield(Widgets, Symbol("#_#1#2")), Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, WebIO.Scope, Function, Type{Widgets.Widget{:rangeslider, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, String})
precompile(Tuple{getfield(Widgets, Symbol("#widget##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.widget), Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}})
precompile(Tuple{typeof(Base.vect), Bool, Vararg{Bool, N} where N})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:className, :style), Tuple{String, Base.Dict{Any, Any}}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Base.Dict{Any, Any}}}})
precompile(Tuple{getfield(Widgets, Symbol("#widget##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.widget), Array{Bool, 1}})
precompile(Tuple{getfield(Widgets, Symbol("#togglebuttons##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.togglebuttons), Array{Bool, 1}})
precompile(Tuple{getfield(Widgets, Symbol("##togglebuttons#70")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:label,), Tuple{String}}}, typeof(Widgets.togglebuttons), Array{Bool, 1}})
precompile(Tuple{getfield(Widgets, Symbol("#togglebuttons##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.togglebuttons), Interact.Bulma, Array{Bool, 1}})
precompile(Tuple{typeof(InteractBase.getclass), Symbol, String})
precompile(Tuple{typeof(InteractBase.getclass), Interact.Bulma, Symbol, String})
precompile(Tuple{typeof(InteractBase.getclass), Interact.Bulma, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:className,), Tuple{String}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:className,), Tuple{String}}}, Int64})
precompile(Tuple{typeof(Base.map), Type{T} where T, Observables.Observable{Array{Bool, 1}}})
precompile(Tuple{Type{InteractBase.Vals2Idxs{T} where T}, Array{Bool, 1}})
precompile(Tuple{getfield(Observables, Symbol("##map#31")), InteractBase.Vals2Idxs{Bool}, typeof(Base.map), Type{T} where T, Observables.Observable{Array{Bool, 1}}})
precompile(Tuple{Type{Observables.MapUpdater{F, T} where T where F}, Type{InteractBase.Vals2Idxs{T} where T}, Observables.Observable{Any}})
precompile(Tuple{typeof(Observables.onany), Function, Observables.Observable{Array{Bool, 1}}})
precompile(Tuple{Type{Observables.OnUpdate{F, Args} where Args where F}, Observables.MapUpdater{UnionAll, Any}, Tuple{Observables.Observable{Array{Bool, 1}}}})
precompile(Tuple{typeof(Observables.on), Function, Observables.Observable{Array{Bool, 1}}})
precompile(Tuple{typeof(WebIO.setup_comm), Function, Observables.Observable{Array{Bool, 1}}})
precompile(Tuple{typeof(Base.first), InteractBase.Vals2Idxs{Bool}})
precompile(Tuple{getfield(InteractBase, Symbol("##initvalueindex#131")), Bool, Bool, Bool, typeof(InteractBase.initvalueindex), InteractBase.Automatic, Nothing, Observables.Observable{Any}})
precompile(Tuple{Type{NamedTuple{(:f, :g), T} where T<:Tuple}, Tuple{getfield(InteractBase, Symbol("#125#128")){Observables.Observable{Any}, typeof(Base.get)}, getfield(InteractBase, Symbol("#126#129")){Observables.Observable{Any}}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:f, :g), Tuple{getfield(InteractBase, Symbol("#125#128")){Observables.Observable{Any}, typeof(Base.get)}, getfield(InteractBase, Symbol("#126#129")){Observables.Observable{Any}}}}, Type{Observables.ObservablePair{S, T} where T where S}, Observables.Observable{Any}})
precompile(Tuple{getfield(Observables, Symbol("##ObservablePair#42")), getfield(InteractBase, Symbol("#125#128")){Observables.Observable{Any}, typeof(Base.get)}, Function, Type{Observables.ObservablePair{S, T} where T where S}, Observables.Observable{Any}})
precompile(Tuple{getfield(InteractBase, Symbol("#125#128")){Observables.Observable{Any}, typeof(Base.get)}, Bool})
precompile(Tuple{typeof(Base.get), InteractBase.Vals2Idxs{Bool}, Bool})
precompile(Tuple{Type{Observables.Observable{Any}}, Int64})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:f, :g), Tuple{getfield(InteractBase, Symbol("#125#128")){Observables.Observable{Any}, typeof(Base.get)}, getfield(InteractBase, Symbol("#126#129")){Observables.Observable{Any}}}}, Type{Observables.ObservablePair{S, T} where T where S}, Observables.Observable{Any}, Observables.Observable{Any}})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Tuple{String, String, String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{String, String, String}, Char})
precompile(Tuple{getfield(InteractBase, Symbol("#146#150")), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Base.Dict{String, String}, Tuple{Symbol}, NamedTuple{(:attributes,), Tuple{Base.Dict{String, String}}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Base.Dict{String, String}, Tuple{Symbol}, NamedTuple{(:attributes,), Tuple{Base.Dict{String, String}}}}, Int64})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Base.Dict{String, String}}})
precompile(Tuple{typeof(Base.map), Function, Observables.Observable{Array{Bool, 1}}})
precompile(Tuple{getfield(InteractBase, Symbol("#118#119")){typeof(Base.string), Nothing}, Array{Bool, 1}})
precompile(Tuple{getfield(Observables, Symbol("##map#31")), Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}, typeof(Base.map), Function, Observables.Observable{Array{Bool, 1}}})
precompile(Tuple{Type{Observables.MapUpdater{F, T} where T where F}, getfield(InteractBase, Symbol("#118#119")){typeof(Base.string), Nothing}, Observables.Observable{Any}})
precompile(Tuple{Type{Observables.OnUpdate{F, Args} where Args where F}, Observables.MapUpdater{getfield(InteractBase, Symbol("#118#119")){typeof(Base.string), Nothing}, Any}, Tuple{Observables.Observable{Array{Bool, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Pair{String, String}, Symbol})
precompile(Tuple{getfield(Widgets, Symbol("##wdglabel#78")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Widgets.wdglabel), String})
precompile(Tuple{typeof(Widgets.wdglabel), Interact.Bulma, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Tuple{String, String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:className, :style), Tuple{String, Base.Dict{Any, Any}}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:className, :style), Tuple{String, Base.Dict{Any, Any}}}}, Int64})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Any}, Vararg{Base.Pair{Symbol, Any}, N} where N})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}}})
precompile(Tuple{getfield(WebIO, Symbol("##Node#25")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:className,), Tuple{String}}}, Type{WebIO.Node{T} where T}, Symbol, WebIO.Node{WebIO.DOM}, Vararg{WebIO.Node{WebIO.DOM}, N} where N})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Observables.Observable{Any}})
precompile(Tuple{getfield(Knockout, Symbol("#knockout##kw")), NamedTuple{(:methods,), Tuple{Base.Dict{String, WebIO.JSString}}}, typeof(Knockout.knockout), WebIO.Node{WebIO.DOM}, Array{Base.Pair{String, Observables.Observable{Any}}, 1}})
precompile(Tuple{getfield(Knockout, Symbol("#2#7")){WebIO.JSString, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, String, WebIO.JSString})
precompile(Tuple{getfield(Knockout, Symbol("#13#15")){Base.Dict{Any, Any}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.ValueIterator{Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.iterate), Base.ValueIterator{Base.Dict{Any, Any}}, Int64})
precompile(Tuple{typeof(WebIO.showjs), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{WebIO.JSString}})
precompile(Tuple{typeof(WebIO.showjs), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{WebIO.JSString, WebIO.JSString}})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Base.Dict{String, String}}, Base.Generator{Array{Any, 1}, typeof(WebIO.lowerassets)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Dict{String, String}, 1}, Base.Dict{String, String}, Base.Generator{Array{Any, 1}, typeof(WebIO.lowerassets)}, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Array{Base.Dict{String, String}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Dict{String, String}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}}, Int64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, String, Array{Base.Dict{String, String}, 1}})
precompile(Tuple{typeof(Base.vect), Base.Pair{String, Observables.Observable{Array{Bool, 1}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Pair{String, Observables.Observable{Array{Bool, 1}}}, Base.Pair{String, Observables.Observable{Any}}, Vararg{Base.Pair{String, Observables.Observable{Any}}, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{String, Observables.Observable{T} where T}, 1}, Tuple{Base.Pair{String, Observables.Observable{Array{Bool, 1}}}, Base.Pair{String, Observables.Observable{Any}}, Base.Pair{String, Observables.Observable{Any}}}})
precompile(Tuple{Type{NamedTuple{(:scope, :output, :layout), T} where T<:Tuple}, Tuple{WebIO.Scope, Observables.Observable{Any}, getfield(InteractBase, Symbol("#147#151"))}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{WebIO.Scope, Observables.Observable{Any}, getfield(InteractBase, Symbol("#147#151"))}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:scope, :output, :layout), Tuple{WebIO.Scope, Observables.Observable{Any}, getfield(InteractBase, Symbol("#147#151"))}}, Type{Widgets.Widget{:togglebuttons, S} where S}, Array{Base.Pair{String, Observables.Observable{T} where T}, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Observables.Observable{Array{Bool, 1}}})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Observables.Observable{Array{Bool, 1}}, Symbol})
precompile(Tuple{getfield(Widgets, Symbol("#_#1#2")), Observables.Observable{Any}, WebIO.Scope, Function, Type{Widgets.Widget{:togglebuttons, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Widgets.Widget{:togglebuttons, Any}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Base.Pair{Symbol, Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Vararg{Base.Pair{Symbol, B} where B, N} where N})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Symbol, Any}}, Tuple{Base.Pair{Symbol, Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Base.Pair{Symbol, Widgets.Widget{:togglebuttons, Any}}}})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Widgets.Widget{:togglebuttons, Any}, Symbol})
precompile(Tuple{typeof(Base.map), Function, Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Widgets.Widget{:togglebuttons, Any}})
precompile(Tuple{getfield(Unitful, Symbol("##s56#154")), Any, Any, Any})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}})
precompile(Tuple{typeof(Unitful.basefactor), Float64, Base.Rational{Int64}, Int64, Int64, Base.Rational{Int64}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Float64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#86#90")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#87#91")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#88#92")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.:(<)), Float64, Int64})
precompile(Tuple{typeof(Base.:(&)), Bool, Bool})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#89#93")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Radian, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}})
precompile(Tuple{typeof(Base.:(//)), Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Degree, Unitful.Dimensions{()}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.tensfactor), typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Degree, Unitful.Dimensions{()}()}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Radian, Unitful.Dimensions{()}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.tensfactor), typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Radian, Unitful.Dimensions{()}()}}})
precompile(Tuple{typeof(Base.:(^)), Float64, Int64})
precompile(Tuple{typeof(Base.:(>)), Float64, Int64})
precompile(Tuple{typeof(Base.denominator), Base.Rational{Int64}})
precompile(Tuple{typeof(Base.:(^)), Base.Rational{Int64}, Int64})
precompile(Tuple{typeof(Base.numerator), Base.Rational{Int64}})
precompile(Tuple{typeof(Base.isapprox), Float64, Float64})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.tensfactor), typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#58#59")), Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.eltype), Type})
precompile(Tuple{getfield(Unitful, Symbol("##s50#48")), Any, Any, Any, Any, Type{T} where T, Any, Any})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#49#50")){Int64}, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.:(*)), Base.Rational{Int64}, Int64})
precompile(Tuple{getfield(Main, Symbol("#1#2")), Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Bool})
precompile(Tuple{Type{Archimedes.BoxShip}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Radian, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{typeof(Cairo.write_to_stream_callback), Base.GenericIOBuffer{Array{UInt8, 1}}, Ptr{UInt8}, UInt32})
precompile(Tuple{getfield(Archimedes, Symbol("##draw#16")), Bool, Bool, typeof(Archimedes.draw), Archimedes.BoxShip, Int64, Function})
precompile(Tuple{typeof(Luxor.background), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.push!), Array{Tuple{Float64, Float64, Float64, Float64}, 1}, Tuple{Float64, Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.pop!), Array{Tuple{Float64, Float64, Float64, Float64}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64, Float64, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64, Float64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Luxor.set_current_redvalue), Float64})
precompile(Tuple{typeof(Luxor.set_current_greenvalue), Float64})
precompile(Tuple{typeof(Luxor.set_current_bluevalue), Float64})
precompile(Tuple{typeof(Luxor.set_current_alpha), Float64})
precompile(Tuple{getfield(Archimedes, Symbol("##draw#11")), Bool, Bool, typeof(Archimedes.draw), Archimedes.CoordMapping, Archimedes.BoxShip, typeof(Archimedes.toship)})
precompile(Tuple{typeof(Base.convert), Type{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.getproperty), ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Luxor.set_current_redvalue), FixedPointNumbers.Normed{UInt8, 8}})
precompile(Tuple{typeof(Luxor.set_current_greenvalue), FixedPointNumbers.Normed{UInt8, 8}})
precompile(Tuple{typeof(Luxor.set_current_bluevalue), FixedPointNumbers.Normed{UInt8, 8}})
precompile(Tuple{typeof(Base.vect), Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Float64, Vararg{Float64, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Tuple{Int64, Float64, Float64}})
precompile(Tuple{typeof(Base.vect), Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Float64, Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Float64, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Tuple{Float64, Float64, Int64, Float64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Archimedes.Point2D, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getindex), Tuple{Base.Broadcast.Extruded{Array{Tuple{Int64, Archimedes.Point2D}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Archimedes.triangulate), Tuple{Archimedes.Point2D, Archimedes.Point2D, Archimedes.Point2D, Archimedes.Point2D}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Archimedes.area), Tuple{Array{Tuple{Archimedes.Point2D, Archimedes.Point2D, Archimedes.Point2D}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Archimedes.area), Tuple{Array{Tuple{Archimedes.Point2D, Archimedes.Point2D, Archimedes.Point2D}, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Archimedes.area), Tuple{Array{Tuple{Archimedes.Point2D, Archimedes.Point2D, Archimedes.Point2D}, 1}}}})
precompile(Tuple{typeof(Base.sum), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}, 1}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Archimedes.centroid), Tuple{Array{Tuple{Archimedes.Point2D, Archimedes.Point2D, Archimedes.Point2D}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Archimedes.centroid), Tuple{Array{Tuple{Archimedes.Point2D, Archimedes.Point2D, Archimedes.Point2D}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Archimedes.Point2D, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Archimedes.getx), Tuple{Array{Archimedes.Point2D, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Archimedes.getx), Tuple{Array{Archimedes.Point2D, 1}}}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Archimedes.getx), Tuple{Array{Archimedes.Point2D, 1}}}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Archimedes.getx), Tuple{Array{Archimedes.Point2D, 1}}}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}, 1}}}})
precompile(Tuple{typeof(Base.sum), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), nothing}}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Archimedes.gety), Tuple{Array{Archimedes.Point2D, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Archimedes.gety), Tuple{Array{Archimedes.Point2D, 1}}}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Archimedes.gety), Tuple{Array{Archimedes.Point2D, 1}}}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Archimedes.gety), Tuple{Array{Archimedes.Point2D, 1}}}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}, 1}}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Float64})
precompile(Tuple{typeof(Cairo.set_line_type), Cairo.CairoContext, String})
precompile(Tuple{typeof(Cairo.finish), Cairo.CairoSurfaceIOStream{UInt32}})
precompile(Tuple{typeof(Cairo.destroy), Cairo.CairoSurfaceIOStream{UInt32}})
precompile(Tuple{getfield(Observables, Symbol("##map#31")), Luxor.Drawing, typeof(Base.map), Function, Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Widgets.Widget{:togglebuttons, Any}})
precompile(Tuple{Type{Observables.MapUpdater{F, T} where T where F}, getfield(Main, Symbol("#1#2")), Observables.Observable{Any}})
precompile(Tuple{typeof(Observables.onany), Function, Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Vararg{Any, N} where N})
precompile(Tuple{Type{Observables.OnUpdate{F, Args} where Args where F}, Observables.MapUpdater{getfield(Main, Symbol("#1#2")), Any}, Tuple{Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Widgets.Widget{:togglebuttons, Any}}})
precompile(Tuple{typeof(Observables.on), Function, Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}})
precompile(Tuple{typeof(WebIO.setup_comm), Function, Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}})
precompile(Tuple{typeof(Observables.on), Function, Widgets.Widget{:togglebuttons, Any}})
precompile(Tuple{typeof(WebIO.setup_comm), Function, Widgets.Widget{:togglebuttons, Any}})
precompile(Tuple{typeof(Base.isequal), Widgets.Widget{:togglebuttons, Any}, WeakRef})
precompile(Tuple{typeof(Base.:(==)), Widgets.Widget{:togglebuttons, Any}, WeakRef})
precompile(Tuple{typeof(Base.isequal), Widgets.Widget{:togglebuttons, Any}, Observables.Observable{Bool}})
precompile(Tuple{typeof(Widgets.get_backend)})
precompile(Tuple{Type{NamedTuple{(:output, :layout), T} where T<:Tuple}, Tuple{Observables.Observable{Any}, getfield(InteractBase, Symbol("#158#159"))}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:output, :layout), Tuple{Observables.Observable{Any}, getfield(InteractBase, Symbol("#158#159"))}}, Type{Widgets.Widget{:manipulate, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{getfield(Widgets, Symbol("#_#1#2")), Observables.Observable{Any}, Nothing, Function, Type{Widgets.Widget{:manipulate, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, Widgets.Widget{:manipulate, Any}, Int64})
precompile(Tuple{getfield(WebIO, Symbol("#3#4")){WebIO.ConnectionPool}})
precompile(Tuple{typeof(IJulia.undisplay), Widgets.Widget{:manipulate, Any}})
precompile(Tuple{typeof(IJulia.metadata), Widgets.Widget{:manipulate, Any}})
precompile(Tuple{typeof(IJulia.display_dict), Widgets.Widget{:manipulate, Any}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, Widgets.Widget{:manipulate, Any}})
precompile(Tuple{getfield(InteractBase, Symbol("#158#159")), Widgets.Widget{:manipulate, Any}})
precompile(Tuple{typeof(InteractBase.center), Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}})
precompile(Tuple{typeof(Base._array_for), Type{Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Base.ValueIterator{OrderedCollections.OrderedDict{Symbol, Any}}, Base.HasLength})
precompile(Tuple{typeof(Base.allocatedinline), Type{Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, 1}, Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.Generator{Base.ValueIterator{OrderedCollections.OrderedDict{Symbol, Any}}, typeof(InteractBase.center)}, Int64})
precompile(Tuple{typeof(InteractBase.center), Widgets.Widget{:togglebuttons, Any}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Widgets.Widget{T, S} where S where T}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, 1}, Widgets.Widget{:togglebuttons, Any}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Widgets.Widget{T, S} where S where T, 1}, Base.Generator{Base.ValueIterator{OrderedCollections.OrderedDict{Symbol, Any}}, typeof(InteractBase.center)}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, Observables.Observable{Any}})
precompile(Tuple{typeof(InteractBase.center), Luxor.Drawing})
precompile(Tuple{getfield(Observables, Symbol("##map#31")), WebIO.Node{WebIO.DOM}, typeof(Base.map), Function, Observables.Observable{Any}})
precompile(Tuple{Type{Observables.MapUpdater{F, T} where T where F}, typeof(InteractBase.center), Observables.Observable{Any}})
precompile(Tuple{typeof(Observables.onany), Function, Observables.Observable{Any}})
precompile(Tuple{Type{Observables.OnUpdate{F, Args} where Args where F}, Observables.MapUpdater{typeof(InteractBase.center), Any}, Tuple{Observables.Observable{Any}}})
precompile(Tuple{typeof(Widgets.node), Symbol, Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(WebIO, Symbol("##node#26")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Widgets.node), Symbol, Vararg{Any, N} where N})
precompile(Tuple{Type{WebIO.Node{T} where T}, Symbol, Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(WebIO, Symbol("##Node#25")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{WebIO.Node{T} where T}, Symbol, Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Any})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol})
precompile(Tuple{typeof(Base.show_unquoted_quote_expr), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Any, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, FunctionalCollections.PersistentVector{Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Measures.Length{:px, Float64}}, Base.Pair{String, Measures.Length{:em, Float64}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Measures.Length{:em, Float64}}, Base.Pair{String, Measures.Length{:px, Float64}}}}})
precompile(Tuple{getfield(InteractBase, Symbol("#91#98")){String, Bool, String}, Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}})
precompile(Tuple{typeof(InteractBase.flex_row), String, WebIO.Scope})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{Measures.Length{:px, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Measures.Length{:px, Float64}}, Measures.Length{:px, Float64}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Measures.Length{:px, Float64}}, Tuple{Base.Pair{String, Measures.Length{:px, Float64}}, Base.Pair{String, Measures.Length{:em, Float64}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Measures.Length{:px, Float64}}, Type{String}, Type{Measures.Length{_A, Float64} where _A}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Measures.Length{_A, Float64} where _A}, Base.Dict{String, Measures.Length{:px, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Measures.Length{_A, Float64} where _A}, Measures.Length{:em, Float64}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Measures.Length{_A, Float64} where _A}, Tuple{Base.Pair{String, Measures.Length{:px, Float64}}, Base.Pair{String, Measures.Length{:em, Float64}}}, Int64})
precompile(Tuple{typeof(CSSUtil.style), Base.Dict{String, Measures.Length{_A, Float64} where _A}})
precompile(Tuple{WebIO.Node{WebIO.DOM}, Base.Dict{Symbol, Base.Dict{String, Measures.Length{_A, Float64} where _A}}})
precompile(Tuple{typeof(WebIO.recmerge!), Base.Dict{Any, Any}, Base.Dict{Symbol, Base.Dict{String, Measures.Length{_A, Float64} where _A}}, typeof(WebIO.recmerge)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Dict{String, Measures.Length{_A, Float64} where _A}, Symbol})
precompile(Tuple{getfield(WebIO, Symbol("#dom#13")){getfield(WebIO, Symbol("#dom#12#14")){Base.Dict{Any, Any}, WebIO.DOM}}, WebIO.Node{WebIO.DOM}, Vararg{WebIO.Node{WebIO.DOM}, N} where N})
precompile(Tuple{getfield(WebIO, Symbol("#dom#12#14")){Base.Dict{Any, Any}, WebIO.DOM}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, getfield(WebIO, Symbol("#dom#13")){getfield(WebIO, Symbol("#dom#12#14")){Base.Dict{Any, Any}, WebIO.DOM}}, WebIO.Node{WebIO.DOM}, Vararg{WebIO.Node{WebIO.DOM}, N} where N})
precompile(Tuple{typeof(Widgets.node), WebIO.DOM, WebIO.Node{WebIO.DOM}, Vararg{WebIO.Node{WebIO.DOM}, N} where N})
precompile(Tuple{getfield(WebIO, Symbol("##node#26")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Widgets.node), WebIO.DOM, Vararg{Any, N} where N})
precompile(Tuple{Type{WebIO.Node{T} where T}, WebIO.DOM, WebIO.Node{WebIO.DOM}, Vararg{WebIO.Node{WebIO.DOM}, N} where N})
precompile(Tuple{getfield(WebIO, Symbol("##Node#25")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{WebIO.Node{T} where T}, WebIO.DOM, WebIO.Node{WebIO.DOM}, Vararg{WebIO.Node{WebIO.DOM}, N} where N})
precompile(Tuple{typeof(WebIO.recmerge!), Base.Dict{Any, Any}, Base.Dict{Symbol, Base.Dict{String, String}}, typeof(WebIO.recmerge)})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Base.Pair{DataType, DataType}}, Any, Any})
precompile(Tuple{Type{Base.Pair{Symbol, DataType}}, Any, Any})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Dict{String, Measures.Length{_A, Float64} where _A}})
precompile(Tuple{typeof(Base.getproperty), TypeVar, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, TypeVar})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, TypeVar})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, TypeVar})
precompile(Tuple{Type{Base.Pair{DataType, UnionAll}}, Any, Any})
precompile(Tuple{typeof(Base.convert), Type{UnionAll}, Type{Measures.Length{_A, Float64} where _A}})
precompile(Tuple{Type{Base.Pair{Symbol, UnionAll}}, Any, Any})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Measures.Length{:em, Float64}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Measures.Length{:px, Float64}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Dict{String, Tuple{Observables.AbstractObservable{T} where T, Union{Nothing, Bool}}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Core.TypeName})
precompile(Tuple{typeof(Core.Compiler.typename), DataType})
precompile(Tuple{typeof(Core.Compiler.typename), UnionAll})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Tuple{Observables.AbstractObservable{T} where T, Union{Nothing, Bool}}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Tuple{Observables.Observable{Bool}, Nothing}})
precompile(Tuple{typeof(Base.convert), Type{UnionAll}, Type{Observables.AbstractObservable{T} where T}})
precompile(Tuple{Type{Base.Pair{Symbol, Union}}, Any, Any})
precompile(Tuple{typeof(Base.convert), Type{Union}, Type{Union{Nothing, Bool}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Tuple{Observables.Observable{Int64}, Nothing}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Tuple{Observables.Observable{Any}, Nothing}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Set{String}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Nothing})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{WebIO.Asset, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Channel{Any}})
precompile(Tuple{typeof(Base.print_to_string), Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Set{WebIO.AbstractConnection}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Task})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int16})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{WebIO.JSString, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Widgets.Widget{:togglebuttons, Any}})
precompile(Tuple{getfield(InteractBase, Symbol("#147#151")), Widgets.Widget{:togglebuttons, Any}})
precompile(Tuple{getfield(WebIO, Symbol("##node#26")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:className,), Tuple{String}}}, typeof(Widgets.node), Symbol, Vararg{Any, N} where N})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:className,), Tuple{String}}, Type{WebIO.Node{T} where T}, Symbol, WebIO.Scope})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}})
precompile(Tuple{typeof(Base.string), Core.TypeName})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, OrderedCollections.OrderedDict{String, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{String, Int64}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Type{T} where T, String})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Bool})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{UInt8, 1}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Widgets.Widget{:manipulate, Any}})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, Widgets.Widget{:manipulate, Any}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Widgets.Widget{:manipulate, Any}}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Widgets.Widget{:manipulate, Any}}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Widgets.Widget{:manipulate, Any}}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Widgets.Widget{:manipulate, Any}}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/markdown")}, Widgets.Widget{:manipulate, Any}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/html")}, Widgets.Widget{:manipulate, Any}})
precompile(Tuple{typeof(IJulia.display_mimestring), Base.Multimedia.MIME{Symbol("text/html")}, Widgets.Widget{:manipulate, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/html")}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, WebIO.DOM, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(WebIO.render), Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}})
precompile(Tuple{typeof(WebIO.render), WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(WebIO.render), Widgets.Widget{:togglebuttons, Any}})
precompile(Tuple{typeof(WebIO.render), Observables.Observable{Any}})
precompile(Tuple{Type{Observables.Observable{T} where T}, WebIO.Scope, String, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(Base.map!), Function, Observables.Observable{WebIO.Node{WebIO.DOM}}, Observables.Observable{Any}})
precompile(Tuple{Type{Observables.MapUpdater{F, T} where T where F}, getfield(WebIO, Symbol("#54#57")){Observables.Observable{Any}, WebIO.Scope}, Observables.Observable{WebIO.Node{WebIO.DOM}}})
precompile(Tuple{Type{Observables.OnUpdate{F, Args} where Args where F}, Observables.MapUpdater{getfield(WebIO, Symbol("#54#57")){Observables.Observable{Any}, WebIO.Scope}, WebIO.Node{WebIO.DOM}}, Tuple{Observables.Observable{Any}}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Any}, Observables.Observable{Bool}})
precompile(Tuple{typeof(Observables.listeners), Observables.Observable{WebIO.Node{WebIO.DOM}}})
precompile(Tuple{typeof(Observables.on), WebIO.SyncCallback, Observables.Observable{WebIO.Node{WebIO.DOM}}})
precompile(Tuple{typeof(WebIO.setup_comm), WebIO.SyncCallback, Observables.Observable{WebIO.Node{WebIO.DOM}}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{WebIO.Node{WebIO.DOM}}, WeakRef})
precompile(Tuple{typeof(Base.:(==)), Observables.Observable{WebIO.Node{WebIO.DOM}}, WeakRef})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{WebIO.Node{WebIO.DOM}}, Observables.Observable{WebIO.Node{WebIO.DOM}}})
precompile(Tuple{typeof(Base.getproperty), Observables.Observable{WebIO.Node{WebIO.DOM}}, Symbol})
precompile(Tuple{Type{WebIO.ObservableNode}, String, String})
precompile(Tuple{getfield(WebIO, Symbol("##node#26")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Widgets.node), WebIO.Scope, Vararg{Any, N} where N})
precompile(Tuple{Type{WebIO.Node{T} where T}, WebIO.Scope, WebIO.Node{WebIO.ObservableNode}})
precompile(Tuple{Type{Base.Dict{String, Any}}, Base.Pair{String, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, JSON.Writer.CompositeTypeWrapper{WebIO.DOM}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Base.Dict{Symbol, Any}, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, JSON.Writer.CompositeTypeWrapper{WebIO.DOM}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{Any, 1}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Base.Dict{String, String}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Base.Dict{String, Measures.Length{_A, Float64} where _A}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Measures.Length{:em, Float64}})
precompile(Tuple{typeof(Base.print_to_string), Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Measures.Length{:px, Float64}})
precompile(Tuple{typeof(WebIO.render), String})
precompile(Tuple{typeof(WebIO.render), WebIO.Scope})
precompile(Tuple{Type{WebIO.Node{T} where T}, WebIO.Scope, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, WebIO.Node{WebIO.Scope}})
precompile(Tuple{typeof(Observables.listeners), Observables.Observable{Bool}})
precompile(Tuple{typeof(Base.getindex), Observables.Observable{Bool}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Bool})
precompile(Tuple{typeof(Observables.obsid), Observables.Observable{Bool}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, Bool}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Bool}, Base.Pair{String, Bool}, Base.Pair{String, String}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Bool}, Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{Bool}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Bool}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Bool}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Bool}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, Bool}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Bool}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Observables.listeners), Observables.Observable{Int64}})
precompile(Tuple{typeof(Base.getindex), Observables.Observable{Int64}})
precompile(Tuple{typeof(Observables.obsid), Observables.Observable{Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Bool}, Base.Pair{String, Int64}, Base.Pair{String, String}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Int64}, Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Bool}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Int64}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Bool}, Type{String}, Type{Integer}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Integer}, Base.Dict{String, Bool}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Integer}, Int64, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Integer}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Int64}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Integer}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, Integer}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Int64}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.getindex), Observables.Observable{Any}})
precompile(Tuple{typeof(Observables.obsid), Observables.Observable{Any}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Nothing}, Base.Pair{String, Base.Dict{String, Any}}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Array{WebIO.JSString, 1}}, Base.Pair{String, Base.Dict{Any, Any}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Nothing}, Base.Pair{String, Base.Dict{String, Any}}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Array{WebIO.JSString, 1}}, Base.Pair{String, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, Nothing}, Base.Pair{String, Base.Dict{String, Any}}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Array{WebIO.JSString, 1}}, Base.Pair{String, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Union{Nothing, String}}, Tuple{Base.Pair{String, String}, Base.Pair{String, Nothing}, Base.Pair{String, Base.Dict{String, Any}}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Array{WebIO.JSString, 1}}, Base.Pair{String, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Union{Nothing, String}}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, Union{Nothing, String}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Nothing}, Base.Pair{String, Base.Dict{String, Any}}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Array{WebIO.JSString, 1}}, Base.Pair{String, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{WebIO.JSString, 1}, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{Base.Dict{String, Union{Nothing, String}}, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{String, Union{Nothing, String}}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, WebIO.JSString})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Nothing})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{WebIO.JSString, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Bool})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Bool}, Base.Pair{String, Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}}, Base.Pair{String, String}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}}, Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Bool}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Dict{String, V} where V}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Dict{String, String}, 1}, Base.Dict{String, Union{Nothing, String}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Dict{String, V} where V, 1}, Base.Generator{Array{Any, 1}, typeof(WebIO.lowerassets)}, Int64, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Array{Base.Dict{String, V} where V, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, V} where V, 1}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, V} where V, 1}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, V} where V, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Base.Dict{String, V} where V, 1}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, V} where V, 1}}}, Int64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{Base.Dict{String, V} where V, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, OrderedCollections.OrderedDict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{String, String}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{String, Int64}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.getindex), Observables.Observable{WebIO.Node{WebIO.DOM}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(Observables.obsid), Observables.Observable{WebIO.Node{WebIO.DOM}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Bool}, Base.Pair{String, WebIO.Node{WebIO.DOM}}, Base.Pair{String, String}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, WebIO.Node{WebIO.DOM}}, Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Bool}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, WebIO.Node{WebIO.DOM}}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, WebIO.Node{WebIO.DOM}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, WebIO.Node{WebIO.DOM}}, Base.Pair{String, String}}, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Array{Any, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Any, 1}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Any, 1}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Any, 1}}}, Int64})
precompile(Tuple{typeof(WebIO.render), WebIO.Node{WebIO.ObservableNode}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(WebIO.render), Luxor.Drawing})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("text/html")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("text/latex")}, Any})
precompile(Tuple{typeof(Base64.stringmime), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Luxor.Drawing})
precompile(Tuple{typeof(Base._similar_for), Array{String, 1}, Type{Base.Multimedia.MIME{Symbol("image/png")}}, Base.Generator{Array{String, 1}, Type{Base.Multimedia.MIME{mime} where mime}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Multimedia.MIME{Symbol("image/png")}, 1}, Base.Multimedia.MIME{Symbol("image/png")}, Base.Generator{Array{String, 1}, Type{Base.Multimedia.MIME{mime} where mime}}, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Multimedia.MIME{mime} where mime}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Multimedia.MIME{Symbol("image/png")}}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Multimedia.MIME{Symbol("image/png")}, 1}, Base.Multimedia.MIME{Symbol("image/jpeg")}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Multimedia.MIME{mime} where mime, 1}, Base.Generator{Array{String, 1}, Type{Base.Multimedia.MIME{mime} where mime}}, Int64, Int64})
precompile(Tuple{typeof(Base.in), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Array{Base.Multimedia.MIME{mime} where mime, 1}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, WebIO.Node{WebIO.ObservableNode}})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, WebIO.ObservableNode, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, JSON.Writer.CompositeTypeWrapper{WebIO.ObservableNode}, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, JSON.Writer.CompositeTypeWrapper{WebIO.ObservableNode}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, Widgets.Widget{:manipulate, Any}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Widgets.Widget{:manipulate, Any}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Widgets.Widget{:manipulate, Any}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Widgets.Widget{:manipulate, Any}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Widgets.Widget{:manipulate, Any}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Widgets.Widget{:manipulate, Any}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Widgets.Widget{:manipulate, Any}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Widgets.Widget{:manipulate, Any}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Widgets.Widget{:manipulate, Any}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.webio.node+json")}, Widgets.Widget{:manipulate, Any}})
precompile(Tuple{typeof(IJulia.display_mimejson), Base.Multimedia.MIME{Symbol("application/vnd.webio.node+json")}, Widgets.Widget{:manipulate, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("application/vnd.webio.node+json")}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(Base.string), Base.Multimedia.MIME{Symbol("application/vnd.webio.node+json")}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Int64}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Base.Dict{String, Union{String, JSON.Writer.JSONText}}, String})
precompile(Tuple{typeof(CoolProp_jll.__init__)})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(DocStringExtensions.__init__)})
precompile(Tuple{typeof(CompilerSupportLibraries_jll.__init__)})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#artifact_meta##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#nover#17")), String})
precompile(Tuple{Type{NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), T} where T<:Tuple}, Tuple{Base.VersionNumber, Nothing, Nothing}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), Tuple{Base.VersionNumber, Nothing, Nothing}}, Type{Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Pkg.BinaryPlatforms, Symbol("#32#34")){Pkg.BinaryPlatforms.Linux}, typeof(Base.push!), Base.KeySet{Pkg.BinaryPlatforms.Platform, Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Set{Pkg.BinaryPlatforms.Platform}})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#32#34")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(OpenSpecFun_jll.__init__)})
precompile(Tuple{typeof(ArrayInterface.__init__)})
precompile(Tuple{getfield(ArrayInterface, Symbol("#15#39"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#16#40"))})
precompile(Tuple{typeof(Requires.err), Any, Module, String})
precompile(Tuple{getfield(ArrayInterface, Symbol("#17#41"))})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{getfield(ArrayInterface, Symbol("#18#42"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#19#43"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#20#44"))})
precompile(Tuple{getfield(Requires, Symbol("#@require")), LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Requires.parsepkg), Expr})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64, Int64})
precompile(Tuple{typeof(Requires.isprecompiling)})
precompile(Tuple{getfield(ArrayInterface, Symbol("#65#68"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#66#69"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#67#70"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#33#57"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#34#58"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#35#59"))})
precompile(Tuple{typeof(FiniteDiff.__init__)})
precompile(Tuple{typeof(ChainRulesCore.__init__)})
precompile(Tuple{getfield(ChainRulesCore, Symbol("#58#59")), Base.PkgId})
precompile(Tuple{typeof(ChainRulesCore.refresh_rules), Function})
precompile(Tuple{typeof(Base.methods), Any})
precompile(Tuple{typeof(Base.methods), Any, Any, Union{Nothing, Module, AbstractArray{Module, N} where N}})
precompile(Tuple{getfield(ArrayInterface, Symbol("#21#45"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#22#46"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#23#47"))})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(RecursiveArrayTools.__init__)})
precompile(Tuple{getfield(RecursiveArrayTools, Symbol("#45#60"))})
precompile(Tuple{getfield(RecursiveArrayTools, Symbol("#46#61"))})
precompile(Tuple{getfield(RecursiveArrayTools, Symbol("#47#62"))})
precompile(Tuple{typeof(DiffEqBase.__init__)})
precompile(Tuple{getfield(DiffEqBase, Symbol("#498#537"))})
precompile(Tuple{getfield(DiffEqBase, Symbol("#499#538"))})
precompile(Tuple{getfield(DiffEqBase, Symbol("#500#539"))})
precompile(Tuple{getfield(DiffEqBase, Symbol("#507#546"))})
precompile(Tuple{getfield(DiffEqBase, Symbol("#508#547"))})
precompile(Tuple{getfield(DiffEqBase, Symbol("#509#548"))})
precompile(Tuple{getfield(ChainRulesCore, Symbol("#58#59")), Base.PkgId})
precompile(Tuple{typeof(ChainRulesCore.refresh_rules), Function})
precompile(Tuple{typeof(Base.methods), Any})
precompile(Tuple{typeof(Base.methods), Any, Any, Union{Nothing, Module, AbstractArray{Module, N} where N}})
precompile(Tuple{typeof(ChainRulesCore._primal_sig), typeof(ChainRulesCore.frule), DataType})
precompile(Tuple{typeof(ChainRulesCore._trigger_new_rule_hooks), Function, Type{T} where T})
precompile(Tuple{typeof(ChainRulesCore._primal_sig), typeof(ChainRulesCore.rrule), DataType})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(IJulia.execute_request), ZMQ.Socket, IJulia.Msg})
precompile(Tuple{typeof(REPL.ends_with_semicolon), AbstractString})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{Type{Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Int64, Base.Rational{Int64}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Temperature}}})
precompile(Tuple{Type{Unitful.Dimension{:Temperature}}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.:(*)), Float64, Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#58#59")), Tuple{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{Type{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Int64, Base.Rational{Int64}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.append!), AbstractArray{T, 1} where T, Any})
precompile(Tuple{Type{Base.IteratorSize}, Any})
precompile(Tuple{Type{Base.IteratorSize}, Type})
precompile(Tuple{typeof(Base._append!), Any, Union{Base.HasLength, Base.HasShape{N} where N}, Any})
precompile(Tuple{typeof(Base.length), Array{Unitful.Dimension{D} where D, 1}})
precompile(Tuple{typeof(Base.lastindex), Array{Unitful.Dimension{D} where D, 1}})
precompile(Tuple{typeof(Base.resize!), Array{Unitful.Dimension{D} where D, 1}, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Is} where Is<:Tuple)
precompile(Tuple{Type{Base.Iterators.Zip{Is}}, Any} where Is<:Tuple)
precompile(Tuple{typeof(Base.convert), Type{T}, T} where T<:Tuple{Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Is} where Is<:Tuple})
precompile(Tuple{typeof(Base.getproperty), Any, Symbol})
precompile(Tuple{typeof(Base.map), Any, Tuple{Any, Any}})
precompile(Tuple{getfield(Base.Iterators, Symbol("#3#4")), Any})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Any, Any})
precompile(Tuple{typeof(Base.Iterators._zip_isdone), Any, Any})
precompile(Tuple{typeof(Base.tail), Tuple})
precompile(Tuple{typeof(Base.argtail), Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.isdone), Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Tuple{}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Tuple{}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Tuple{Base.Missing}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Tuple{Base.Missing}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Tuple{Base.Missing, Base.Missing}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Tuple{Base.Missing, Base.Missing}}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_some), Any, Any, Tuple{T, Vararg{Any, N} where N}, T} where T)
precompile(Tuple{typeof(Base.Iterators._zip_iterate_some), Any, Any, Tuple{Any, Vararg{Any, N} where N}, Any})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_interleave), Any, Any, Any})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple, Int64, Any})
precompile(Tuple{typeof(Base.setindex!), Array{T, N} where N, Any, Int64} where T)
precompile(Tuple{typeof(Base.convert), Type{T}, T} where T)
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Is} where Is<:Tuple, Any})
precompile(Tuple{typeof(Base.map), typeof(tuple), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.tail), Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Unitful.name), Unitful.Dimension{D}} where D)
precompile(Tuple{Type{Unitful.Dimension{:Time}}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12")), Base.Order.ForwardOrdering}, Unitful.Dimension{:Length}, Unitful.Dimension{:Time}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Length}, Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{Type{Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}, Int64, Base.Rational{Int64}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Length}, Unitful.Dimension{:Mass}, Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12")), Base.Order.ForwardOrdering}, Unitful.Dimension{:Mass}, Unitful.Dimension{:Time}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12")), Base.Order.ForwardOrdering}, Unitful.Dimension{:Mass}, Unitful.Dimension{:Length}})
precompile(Tuple{Type{Unitful.Dimension{:Mass}}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.:(*)), Int64, Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Float64, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.flush), IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{typeof(IJulia.undisplay), Nothing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, Function, Int64})
precompile(Tuple{typeof(IJulia.undisplay), Function})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), typeof(Main.blasius)}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(IJulia.metadata), Function})
precompile(Tuple{typeof(IJulia.display_dict), Function})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, Function})
precompile(Tuple{typeof(IJulia.display_mimestring), Base.Multimedia.MIME{Symbol("text/plain")}, Function})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Function})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, Function})
precompile(Tuple{getfield(Base, Symbol("##any#636")), Function, typeof(Base.any), Function, Array{Base.Multimedia.MIME{mime} where mime, 1}})
precompile(Tuple{typeof(Base._any), getfield(IJulia, Symbol("#26#27")){typeof(Main.blasius)}, Array{Base.Multimedia.MIME{mime} where mime, 1}, Base.Colon})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.blasius)}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.blasius)}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.blasius)}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.blasius)}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, Function})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.blasius)}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.blasius)}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.blasius)}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.blasius)}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.blasius)}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.blasius)}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Function})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Function})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.webio.node+json")}, Function})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), typeof(Main.bcblasius)}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base._any), getfield(IJulia, Symbol("#26#27")){typeof(Main.bcblasius)}, Array{Base.Multimedia.MIME{mime} where mime, 1}, Base.Colon})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.bcblasius)}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.bcblasius)}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.bcblasius)}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.bcblasius)}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.bcblasius)}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.bcblasius)}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.bcblasius)}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.bcblasius)}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.bcblasius)}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.bcblasius)}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{Type{DiffEqBase.TwoPointBVProblem{iip} where iip}, Function, Function, Array{Float64, 1}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(DiffEqBase.isinplace), Function, Int64})
precompile(Tuple{typeof(DiffEqBase.num_types_in_tuple), Type{T} where T})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.MethodList, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Base.MethodList, getfield(DiffEqBase, Symbol("#1#2")){DataType, DataType, DataType, DataType, DataType, DataType}}, Int64})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{DiffEqBase.TwoPointBVProblem{true}}, Function, Function, Array{Float64, 1}, Tuple{Float64, Float64}, DiffEqBase.NullParameters})
precompile(Tuple{Type{DiffEqBase.BVProblem{true, tType, isinplace, P, F, bF, PT, K} where K where PT where bF where F where P where isinplace where tType}, Function, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, Array{Float64, 1}, Tuple{Float64, Float64}, DiffEqBase.NullParameters})
precompile(Tuple{typeof(Base.convert), Type{DiffEqBase.ODEFunction{true, F, TMM, Ta, Tt, TJ, JVP, VJP, JP, SP, TW, TWt, TPJ, S, TCV} where TCV where S where TPJ where TWt where TW where SP where JP where VJP where JVP where TJ where Tt where Ta where TMM where F}, Function})
precompile(Tuple{Type{NamedTuple{(:analytic, :tgrad, :jac, :jvp, :vjp, :Wfact, :Wfact_t, :paramjac, :syms, :colorvec), T} where T<:Tuple}, Tuple{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:analytic, :tgrad, :jac, :jvp, :vjp, :Wfact, :Wfact_t, :paramjac, :syms, :colorvec), Tuple{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}, Type{DiffEqBase.ODEFunction{true, true, TMM, Ta, Tt, TJ, JVP, VJP, JP, SP, TW, TWt, TPJ, S, TCV} where TCV where S where TPJ where TWt where TW where SP where JP where VJP where JVP where TJ where Tt where Ta where TMM}, Function})
precompile(Tuple{getfield(DiffEqBase, Symbol("##_#88")), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Type{DiffEqBase.ODEFunction{true, true, TMM, Ta, Tt, TJ, JVP, VJP, JP, SP, TW, TWt, TPJ, S, TCV} where TCV where S where TPJ where TWt where TW where SP where JP where VJP where JVP where TJ where Tt where Ta where TMM}, typeof(Main.blasius)})
precompile(Tuple{Type{DiffEqBase.BVProblem{uType, tType, isinplace, P, F, bF, PT, K} where K where PT where bF where F where P where isinplace where tType where uType}, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, Array{Float64, 1}, Tuple{Float64, Float64}, DiffEqBase.NullParameters})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Int64})
precompile(Tuple{typeof(IJulia.undisplay), DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}})
precompile(Tuple{typeof(IJulia.metadata), DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}})
precompile(Tuple{typeof(IJulia.display_dict), DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.Ryu.writeshortest), Array{UInt8, 1}, Int64, Float64, Bool, Bool, Bool, Int64, UInt8, Bool, UInt8, Bool, Bool})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.webio.node+json")}, DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}})
precompile(Tuple{Type{BoundaryValueDiffEq.MIRK4}})
precompile(Tuple{Type{NamedTuple{(:dt,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:u0, :p), Tuple{Array{Float64, 1}, DiffEqBase.NullParameters}}}, Type{NamedTuple{(:dt,), Tuple{Float64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Float64, 1}, DiffEqBase.NullParameters, Float64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, DiffEqBase.NullParameters, Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(DiffEqBase.__parameterless_type), Type{T} where T})
precompile(Tuple{getfield(DiffEqBase, Symbol("##s259#486")), Any, Any})
precompile(Tuple{typeof(Base.setdiff), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._shrink), Function, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Tuple{Symbol}}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.vectorfilter), Function, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, getfield(Base, Symbol("#89#90")){typeof(Base.in), typeof(Base.pop!), Base.Set{Symbol}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Base.Iterators.Filter{getfield(Base, Symbol("#89#90")){typeof(Base.in), typeof(Base.pop!), Base.Set{Symbol}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#89#90")){typeof(Base.in), typeof(Base.pop!), Base.Set{Symbol}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, typeof(Base.identity)}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DiffEqBase, Symbol("#487#488")), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Symbol, 1}, getfield(DiffEqBase, Symbol("#487#488"))}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Symbol, 1}, getfield(DiffEqBase, Symbol("#487#488"))}, Int64})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:f, :bc, :u0, :tspan, :p, :problem_type), Tuple{DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, Array{Float64, 1}, Tuple{Float64, Float64}, DiffEqBase.NullParameters, DiffEqBase.StandardBVProblem}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:f, :bc, :u0, :tspan, :p, :problem_type), Tuple{DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, Array{Float64, 1}, Tuple{Float64, Float64}, DiffEqBase.NullParameters, DiffEqBase.StandardBVProblem}}}, Type{NamedTuple{(:f, :u0, :p, :tspan), Tuple{DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, DiffEqBase.NullParameters, Tuple{Float64, Float64}}}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(DiffEqBase.has_kwargs), Type{DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.allocatedinline), Type{LeftChildRightSiblingTrees.Node{TerminalLoggers.ProgressBar}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{}}})
precompile(Tuple{typeof(Base.hasfield), Type{DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}, Symbol})
precompile(Tuple{typeof(Base.hasfield), Type{DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{getfield(DiffEqBase, Symbol("#solve##kw")), NamedTuple{(:dt,), Tuple{Float64}}, typeof(DiffEqBase.solve), DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, BoundaryValueDiffEq.MIRK4})
precompile(Tuple{typeof(Base.get), Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:dt,), Tuple{Float64}}}, Symbol, Bool})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:dt,), Tuple{Float64}}}})
precompile(Tuple{getfield(DiffEqBase, Symbol("#__solve##kw")), NamedTuple{(:dt,), Tuple{Float64}}, typeof(DiffEqBase.__solve), DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, BoundaryValueDiffEq.MIRK4})
precompile(Tuple{typeof(BoundaryValueDiffEq.vector_alloc), Type{T} where T, Int64, Int64})
precompile(Tuple{Type{Array{Array{Float64, 1}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.zeros), Type{Float64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Base.Rational{Int64}, Vararg{Base.Rational{Int64}, N} where N})
precompile(Tuple{Type{Array{Base.Rational{Int64}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Rational{Int64}, 1}, Tuple{Int64, Int64, Base.Rational{Int64}, Base.Rational{Int64}}})
precompile(Tuple{typeof(Base.vect), Base.Rational{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Rational{Int64}, Base.Rational{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Rational{Int64}, 1}, Tuple{Base.Rational{Int64}, Base.Rational{Int64}, Base.Rational{Int64}, Int64}})
precompile(Tuple{typeof(Base.typed_hvcat), Type{Base.Rational{Int64}}, Tuple{Int64, Int64, Int64, Int64}, Int64, Vararg{Number, N} where N})
precompile(Tuple{typeof(Base.hvcat_fill), Array{Base.Rational{Int64}, 2}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Base.Rational{Int64}, Base.Rational{Int64}, Int64, Int64, Base.Rational{Int64}, Base.Rational{Int64}, Int64, Int64}})
precompile(Tuple{typeof(SparseArrays.sparse), Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Int64, Int64, Function})
precompile(Tuple{typeof(SparseArrays.sparse!), Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Int64, Int64, typeof(Base.:(+)), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(NLSolversBase, Symbol("##OnceDifferentiable#28")), Bool, Type{NLSolversBase.OnceDifferentiable{TF, TDF, TX} where TX where TDF where TF}, Function, Function, Function, Array{Float64, 1}, Array{Float64, 1}, SparseArrays.SparseMatrixCSC{Float64, Int64}})
precompile(Tuple{typeof(NLSolversBase.x_of_nans), Array{Float64, 1}, Type{T} where T})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Float64}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Float64}, Tuple{Array{Float64, 1}}}})
precompile(Tuple{Type{Float64}, Float64})
precompile(Tuple{typeof(Base.fill!), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Ptr{SuiteSparse.CHOLMOD.C_Sparse{Float64}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Ptr{SuiteSparse.CHOLMOD.C_Factor{Float64}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Complex{Float64}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Ptr{SuiteSparse.CHOLMOD.C_Dense{Float64}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Ptr{Int64}}})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nloops")), LineNumberNode, Module, Any, Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Expr, Expr})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Complex{Float32}}})
precompile(Tuple{getfield(BoundaryValueDiffEq, Symbol("#1#2")), NLSolversBase.OnceDifferentiable{Array{Float64, 1}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Array{Float64, 1}}, Array{Float64, 1}})
precompile(Tuple{getfield(BoundaryValueDiffEq, Symbol("#fj!#13")){BoundaryValueDiffEq.BVPJacobianWrapper{getfield(BoundaryValueDiffEq, Symbol("#22#24")){DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, BoundaryValueDiffEq.BVPSystem{Float64, Array{Float64, 1}, DiffEqBase.NullParameters}, BoundaryValueDiffEq.MIRKTableau{Float64}, BoundaryValueDiffEq.MIRK4GeneralCache{Array{Array{Float64, 1}, 1}}, getfield(BoundaryValueDiffEq, Symbol("#21#23"))}}, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}}, Array{Float64, 1}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Array{Float64, 1}})
precompile(Tuple{getfield(BoundaryValueDiffEq, Symbol("#Kᵣ!#9")){BoundaryValueDiffEq.BVPSystem{Float64, Array{Float64, 1}, DiffEqBase.NullParameters}, Int64, Float64, Array{Float64, 1}, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, Array{Float64, 1}, Array{Array{Float64, 1}, 1}, DiffEqBase.NullParameters, Array{Float64, 1}})
precompile(Tuple{getfield(BoundaryValueDiffEq, Symbol("#j!#14")){FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, getfield(BoundaryValueDiffEq, Symbol("#fj!#13")){BoundaryValueDiffEq.BVPJacobianWrapper{getfield(BoundaryValueDiffEq, Symbol("#22#24")){DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, BoundaryValueDiffEq.BVPSystem{Float64, Array{Float64, 1}, DiffEqBase.NullParameters}, BoundaryValueDiffEq.MIRKTableau{Float64}, BoundaryValueDiffEq.MIRK4GeneralCache{Array{Array{Float64, 1}, 1}}, getfield(BoundaryValueDiffEq, Symbol("#21#23"))}}, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}}}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(SuiteSparse.UMFPACK.umfpack_free_symbolic), SuiteSparse.UMFPACK.UmfpackLU{Float64, Int64}})
precompile(Tuple{DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Nothing, DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, BoundaryValueDiffEq.MIRK4, DiffEqBase.LinearInterpolation{Array{Float64, 1}, Array{Array{Float64, 1}, 1}}, Nothing}, Float64})
precompile(Tuple{DiffEqBase.LinearInterpolation{Array{Float64, 1}, Array{Array{Float64, 1}, 1}}, Float64, Nothing, Type{T} where T, DiffEqBase.NullParameters, Symbol})
precompile(Tuple{getfield(Base.Sort, Symbol("##searchsortedfirst#4")), Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.Sort.searchsortedfirst), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Base.Sort.searchsortedfirst), Array{Float64, 1}, Float64, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(IJulia.undisplay), Array{Float64, 1}})
precompile(Tuple{typeof(IJulia.metadata), Array{Float64, 1}})
precompile(Tuple{typeof(IJulia.display_dict), Array{Float64, 1}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Type})
precompile(Tuple{typeof(Base.alignment), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Float64, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64, typeof(Base.sprint), Function, Float64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float64})
precompile(Tuple{typeof(Base.print_matrix_row), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Float64, 1}, Array{Tuple{Int64, Int64}, 1}, Int64, Base.UnitRange{Int64}, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64, typeof(Base.sprint), Function, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Float64})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Array{Float64, 1}})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Array{Float64, 1}}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Array{Float64, 1}}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Array{Float64, 1}}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Array{Float64, 1}}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, Array{Float64, 1}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Array{Float64, 1}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Array{Float64, 1}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Array{Float64, 1}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Array{Float64, 1}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Array{Float64, 1}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Array{Float64, 1}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Array{Float64, 1}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Array{Float64, 1}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.webio.node+json")}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.sqrt), Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, Float64, Int64})
precompile(Tuple{typeof(IJulia.undisplay), Float64})
precompile(Tuple{typeof(IJulia.metadata), Float64})
precompile(Tuple{typeof(IJulia.display_dict), Float64})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, Float64})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Float64})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, Float64})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Float64}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Float64}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Float64}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Float64}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, Float64})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Float64}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Float64}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Float64}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Float64}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Float64}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Float64}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Float64})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Float64})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.webio.node+json")}, Float64})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.:(*)), Float64, Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.Affine{Base.Rational{Int64}(num=-5463, den=20)}}})
precompile(Tuple{getfield(Unitful, Symbol("##s56#155")), Any, Any, Any})
precompile(Tuple{typeof(Unitful.uconvert), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.Affine{Base.Rational{Int64}(num=-5463, den=20)}}}})
precompile(Tuple{typeof(Base.:(+)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Float64, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Int64})
precompile(Tuple{typeof(IJulia.undisplay), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(IJulia.metadata), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(IJulia.display_dict), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.webio.node+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(CoolProp.PropsSI), String, String, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, String, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, String})
precompile(Tuple{typeof(Base.__cat), Array{UInt8, 1}, Tuple{Int64}, Tuple{Bool}, Array{UInt8, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.cat_indices), Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{UInt8, 1}, Array{UInt8, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, UInt8})
precompile(Tuple{typeof(Base.Meta.parse), String})
precompile(Tuple{typeof(Unitful.lookup_units), Array{Module, 1}, Symbol})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Unitful, Symbol("#5#7")){Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.any), Base.Generator{Array{Any, 1}, getfield(Unitful, Symbol("#5#7")){Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Unitful, Symbol("#5#7")){Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.any), Base.Generator{Array{Any, 1}, getfield(Unitful, Symbol("#5#7")){Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}})
precompile(Tuple{typeof(Unitful.lookup_units), Array{Module, 1}, Expr})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Unitful, Symbol("#5#7")){Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.any), Base.Generator{Array{Any, 1}, getfield(Unitful, Symbol("#5#7")){Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}})
precompile(Tuple{typeof(CoolProp._si_value), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(CoolProp._si_value), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(CoolProp.PropsSI), String, String, Float64, String, Int64, String})
precompile(Tuple{typeof(Base.:(*)), Float64, Unitful.FreeUnits{(), Unitful.Dimensions{()}(), nothing}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12")), Base.Order.ForwardOrdering}, Unitful.Dimension{:Time}, Unitful.Dimension{:Time}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12")), Base.Order.ForwardOrdering}, Unitful.Dimension{:Time}, Unitful.Dimension{:Length}})
precompile(Tuple{typeof(Base.:(*)), Float64, Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}, Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Unitful, Symbol("#5#7")){Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.any), Base.Generator{Array{Any, 1}, getfield(Unitful, Symbol("#5#7")){Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Unitful, Symbol("#5#7")){Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.any), Base.Generator{Array{Any, 1}, getfield(Unitful, Symbol("#5#7")){Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{Type{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Int64, Base.Rational{Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Mass}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Length}, Unitful.Dimension{:Mass}}})
precompile(Tuple{typeof(Base.:(*)), Float64, Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-3, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), nothing}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Unitful, Symbol("#5#7")){Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.any), Base.Generator{Array{Any, 1}, getfield(Unitful, Symbol("#5#7")){Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{Type{Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}, Int64, Base.Rational{Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)),)}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12")), Base.Order.ForwardOrdering}, Unitful.Dimension{:Length}, Unitful.Dimension{:Mass}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12")), Base.Order.ForwardOrdering}, Unitful.Dimension{:Length}, Unitful.Dimension{:Length}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#58#59")), Tuple{Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)),)}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12")), Base.Order.ForwardOrdering}, Unitful.Dimension{:Length}, Unitful.Dimension{:Temperature}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)))}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Length}, Unitful.Dimension{:Temperature}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12")), Base.Order.ForwardOrdering}, Unitful.Dimension{:Temperature}, Unitful.Dimension{:Time}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12")), Base.Order.ForwardOrdering}, Unitful.Dimension{:Temperature}, Unitful.Dimension{:Length}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12")), Base.Order.ForwardOrdering}, Unitful.Dimension{:Mass}, Unitful.Dimension{:Temperature}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Length}, Unitful.Dimension{:Mass}, Unitful.Dimension{:Temperature}, Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.:(*)), Float64, Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Unitful, Symbol("#5#7")){Unitful.FreeUnits{(Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.any), Base.Generator{Array{Any, 1}, getfield(Unitful, Symbol("#5#7")){Unitful.FreeUnits{(Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#58#59")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{Type{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}, Int64, Base.Rational{Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)),)}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12")), Base.Order.ForwardOrdering}, Unitful.Dimension{:Mass}, Unitful.Dimension{:Mass}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)),)}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Length}, Unitful.Dimension{:Temperature}, Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.:(*)), Float64, Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-3, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#58#59")), Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{T, O} where O where T, Any, Any})
precompile(Tuple{typeof(Base.getproperty), Base.Order.By{getfield(Unitful, Symbol("#10#12")), Base.Order.ForwardOrdering}, Symbol})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ForwardOrdering, Symbol, Symbol})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12")), Base.Order.ForwardOrdering}, Unitful.Dimension{:Time}, Unitful.Dimension{:Mass}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Mass}, Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-3, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(//)), Int64, Base.Rational{Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Float64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#86#90")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#87#91")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#88#92")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#89#93")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Float64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#86#90")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#87#91")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#88#92")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#89#93")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.:(//)), Base.Rational{Int64}, Int64})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.tensfactor), typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.tensfactor), typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Unitful.uconvert), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#58#59")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)),)}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)),)}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)))}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-3, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Float64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#86#90")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#87#91")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#88#92")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#89#93")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.tensfactor), typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Unitful.uconvert), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#58#59")), Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)),)}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{getfield(Base, Symbol("#@show")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.sprint), Function, Symbol})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Base.allocatedinline), Type{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Unitful.Unit{U, D} where D where U}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.repr), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.empty), Array{Union{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, 1}, Type{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.push!), Array{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#148#150")), Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.empty), Array{Union{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, 1}, Type{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.push!), Array{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#149#151")), Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Array{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Unitful, Symbol("#146#147")){Base.GenericIOBuffer{Array{UInt8, 1}}, String}, Array{Unitful.Unit{U, D} where D where U, 1}})
precompile(Tuple{getfield(Unitful, Symbol("#146#147")){Base.GenericIOBuffer{Array{UInt8, 1}}, String}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{getfield(Unitful, Symbol("#146#147")){Base.GenericIOBuffer{Array{UInt8, 1}}, String}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.println), IJulia.IJuliaStdio{Base.PipeEndpoint}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.print), IJulia.IJuliaStdio{Base.PipeEndpoint}, String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), IJulia.IJuliaStdio{Base.PipeEndpoint}, String})
precompile(Tuple{typeof(Base.uv_alloc_buf), Ptr{Nothing}, UInt64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.uv_readcb), Ptr{Nothing}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.print), IJulia.IJuliaStdio{Base.PipeEndpoint}, Char})
precompile(Tuple{typeof(Base.repr), Float64})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Float64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), typeof(Main.y)}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base._any), getfield(IJulia, Symbol("#26#27")){typeof(Main.y)}, Array{Base.Multimedia.MIME{mime} where mime, 1}, Base.Colon})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.y)}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.y)}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.y)}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.y)}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.y)}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.y)}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.y)}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.y)}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.y)}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.y)}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(Base.vect), Expr})
precompile(Tuple{typeof(Widgets.symbols), Array{Expr, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{Expr, 1}, Type{Symbol}, Base.Generator{Array{Expr, 1}, getfield(Widgets, Symbol("#114#115"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Expr, 1}, getfield(Widgets, Symbol("#114#115"))}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Expr, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Widgets.make_widget), Array{Expr, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Expr, 1}, Base.Generator{Array{Expr, 1}, typeof(Widgets.make_widget)}})
precompile(Tuple{typeof(Unitful.ustrip), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{Base.Colon, Int64, Float64, Float64})
precompile(Tuple{getfield(Widgets, Symbol("#widget##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.widget), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(Widgets, Symbol("#slider##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.slider), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(Widgets, Symbol("##slider#56")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:label,), Tuple{String}}}, typeof(Widgets.slider), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(Widgets, Symbol("#slider##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.slider), Interact.Bulma, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(Widgets, Symbol("#slider##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.slider), Interact.Bulma, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{String, 1}})
precompile(Tuple{getfield(InteractBase, Symbol("##slider#74")), Float64, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:label,), Tuple{String}}}, typeof(Widgets.slider), Interact.Bulma, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{String, 1}})
precompile(Tuple{Type{Observables.Observable{Float64}}, Float64})
precompile(Tuple{typeof(Base.vec), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.axes), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:f, :g), Tuple{getfield(InteractBase, Symbol("#75#78")), getfield(InteractBase, Symbol("#77#80"))}}, Type{Observables.ObservablePair{S, T} where T where S}, Observables.Observable{Float64}})
precompile(Tuple{getfield(Observables, Symbol("##ObservablePair#42")), getfield(InteractBase, Symbol("#75#78")), Function, Type{Observables.ObservablePair{S, T} where T where S}, Observables.Observable{Float64}})
precompile(Tuple{typeof(InteractBase._searchsortedfirst), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64})
precompile(Tuple{Type{NamedTuple{(:f, :g), T} where T<:Tuple}, Tuple{getfield(InteractBase, Symbol("#75#78")), getfield(InteractBase, Symbol("#77#80"))}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:f, :g), Tuple{getfield(InteractBase, Symbol("#75#78")), getfield(InteractBase, Symbol("#77#80"))}}, Type{Observables.ObservablePair{S, T} where T where S}, Observables.Observable{Float64}, Observables.Observable{Any}})
precompile(Tuple{typeof(Observables.on), Function, Observables.Observable{Float64}})
precompile(Tuple{typeof(WebIO.setup_comm), Function, Observables.Observable{Float64}})
precompile(Tuple{typeof(WebIO.setup_comm), Function, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:bindto, :attributes, :extra_obs, :computed, :typ, :min, :max, :step, :className), Tuple{String, Base.Dict{Any, Any}, Array{Base.Pair{String, Array{String, 1}}, 1}, Array{Base.Pair{String, WebIO.JSString}, 1}, String, Int64, Int64, Int64, String}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Base.Dict{Any, Any}, Array{Base.Pair{String, Array{String, 1}}, 1}, Array{Base.Pair{String, WebIO.JSString}, 1}, String, Int64, Int64, Int64, String}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:className, :attributes, :style), Tuple{String, Base.Dict{Any, Any}, Base.Dict{Any, Any}}}}, Type{NamedTuple{(:min, :max, :step), Tuple{Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Int64, Int64, Int64}}})
precompile(Tuple{getfield(Widgets, Symbol("#slider##kw")), NamedTuple{(:value, :label), Tuple{Observables.Observable{Any}, String}}, typeof(Widgets.slider), Interact.Bulma, Base.OneTo{Int64}, Array{String, 1}})
precompile(Tuple{typeof(InteractBase.getclass), Symbol, String, String})
precompile(Tuple{typeof(InteractBase.getclass), Interact.Bulma, Symbol, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.:(==)), Tuple{String, String}, Tuple{String, String}})
precompile(Tuple{getfield(InteractBase, Symbol("#82#83")){Int64}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(Widgets, Symbol("#input##kw")), NamedTuple{(:bindto, :attributes, :extra_obs, :computed, :typ, :min, :max, :step, :className), Tuple{String, Base.Dict{Any, Any}, Array{Base.Pair{String, Array{String, 1}}, 1}, Array{Base.Pair{String, WebIO.JSString}, 1}, String, Int64, Int64, Int64, String}}, typeof(Widgets.input), Observables.Observable{Any}})
precompile(Tuple{getfield(Widgets, Symbol("##input#40")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:bindto, :attributes, :extra_obs, :computed, :typ, :min, :max, :step, :className), Tuple{String, Base.Dict{Any, Any}, Array{Base.Pair{String, Array{String, 1}}, 1}, Array{Base.Pair{String, WebIO.JSString}, 1}, String, Int64, Int64, Int64, String}}}, typeof(Widgets.input), Observables.Observable{Any}})
precompile(Tuple{getfield(Widgets, Symbol("#input##kw")), NamedTuple{(:bindto, :attributes, :extra_obs, :computed, :typ, :min, :max, :step, :className), Tuple{String, Base.Dict{Any, Any}, Array{Base.Pair{String, Array{String, 1}}, 1}, Array{Base.Pair{String, WebIO.JSString}, 1}, String, Int64, Int64, Int64, String}}, typeof(Widgets.input), Interact.Bulma, Observables.Observable{Any}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:className, :attributes, :style, :min, :max, :step), Tuple{String, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:className, :attributes, :style, :min, :max, :step), Tuple{String, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Int64, Int64, Int64}}}, Int64})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Int64, Symbol})
precompile(Tuple{typeof(WebIO.setobservable!), WebIO.Scope, String, Observables.Observable{Int64}})
precompile(Tuple{typeof(WebIO.onjs), Observables.Observable{Int64}, WebIO.JSString})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Int64}, WeakRef})
precompile(Tuple{typeof(Base.:(==)), Observables.Observable{Int64}, WeakRef})
precompile(Tuple{typeof(WebIO.ensure_sync), WebIO.Scope, String})
precompile(Tuple{typeof(Observables.on), WebIO.SyncCallback, Observables.Observable{Int64}})
precompile(Tuple{typeof(WebIO.setup_comm), WebIO.SyncCallback, Observables.Observable{Int64}})
precompile(Tuple{typeof(JSExpr.jsexpr), Observables.Observable{Int64}})
precompile(Tuple{typeof(WebIO.setobservable!), WebIO.Scope, String, Observables.Observable{Any}})
precompile(Tuple{typeof(WebIO.onjs), Observables.Observable{Any}, WebIO.JSString})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{Any}, WeakRef})
precompile(Tuple{typeof(Base.:(==)), Observables.Observable{Any}, WeakRef})
precompile(Tuple{typeof(WebIO.setup_comm), WebIO.SyncCallback, Observables.Observable{Any}})
precompile(Tuple{typeof(JSExpr.jsexpr), Observables.Observable{Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, WebIO.JSEvalSerialization, String, Array{String, 1}})
precompile(Tuple{typeof(WebIO.lowerassets), WebIO.Asset})
precompile(Tuple{Type{NamedTuple{(:scope, :output, :layout), T} where T<:Tuple}, Tuple{WebIO.Scope, Observables.Observable{Any}, getfield(Base, Symbol("#62#63")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{WebIO.Scope, Observables.Observable{Any}, getfield(Base, Symbol("#62#63")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:scope, :output, :layout), Tuple{WebIO.Scope, Observables.Observable{Any}, getfield(Base, Symbol("#62#63")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}}}, Type{Widgets.Widget{:input, S} where S}, Array{Base.Pair{String, Any}, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{String, 1}})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Array{String, 1}, Symbol})
precompile(Tuple{getfield(Widgets, Symbol("#_#1#2")), Observables.Observable{Any}, WebIO.Scope, Function, Type{Widgets.Widget{:input, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{typeof(Widgets.wdglabel), Interact.Bulma, String})
precompile(Tuple{typeof(Base.getproperty), WebIO.Scope, Symbol})
precompile(Tuple{getfield(WebIO, Symbol("##node#26")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:className,), Tuple{String}}}, typeof(Widgets.node), Symbol, Vararg{Any, N} where N})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:className,), Tuple{String}}, Type{WebIO.Node{T} where T}, Symbol, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(Base.setproperty!), WebIO.Scope, Symbol, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(Base.convert), Type{Any}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{Type{Widgets.Widget{:slider, S} where S}, Widgets.Widget{:input, Any}})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#142#143")){getfield(Base, Symbol("#62#63")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}}, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{Type{NamedTuple{(:output, :components, :layout, :scope), T} where T<:Tuple}, Tuple{Observables.Observable{Any}, OrderedCollections.OrderedDict{Symbol, Any}, getfield(Base, Symbol("#62#63")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Observables.Observable{Any}, getfield(Base, Symbol("#62#63")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:output, :components, :layout, :scope), Tuple{Observables.Observable{Any}, OrderedCollections.OrderedDict{Symbol, Any}, getfield(Base, Symbol("#62#63")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}}, Type{Widgets.Widget{:slider, S} where S}})
precompile(Tuple{getfield(Widgets, Symbol("#_#1#2")), Observables.Observable{Any}, WebIO.Scope, Function, Type{Widgets.Widget{:slider, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{Type{NamedTuple{(:output,), T} where T<:Tuple}, Tuple{Observables.Observable{Float64}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:output,), Tuple{Observables.Observable{Float64}}}, Type{Widgets.Widget{T, S} where S where T}, Widgets.Widget{:slider, Any}})
precompile(Tuple{Type{NamedTuple{(:output, :components, :layout, :scope), T} where T<:Tuple}, Tuple{Observables.Observable{Float64}, OrderedCollections.OrderedDict{Symbol, Any}, getfield(Base, Symbol("#62#63")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Observables.Observable{Float64}, getfield(Base, Symbol("#62#63")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:output, :components, :layout, :scope), Tuple{Observables.Observable{Float64}, OrderedCollections.OrderedDict{Symbol, Any}, getfield(Base, Symbol("#62#63")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}}, Type{Widgets.Widget{:slider, S} where S}})
precompile(Tuple{getfield(Widgets, Symbol("#_#1#2")), Observables.Observable{Float64}, WebIO.Scope, Function, Type{Widgets.Widget{:slider, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Widgets.Widget{:slider, Float64}, Observables.Observable{Float64}, String})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Widgets.Widget{:slider, Float64}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Base.Pair{Symbol, Widgets.Widget{:slider, Float64}}})
precompile(Tuple{typeof(Base.map), Function, Widgets.Widget{:slider, Float64}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{0}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{0}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{0}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{0}}})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nexprs")), LineNumberNode, Module, Int64, Expr})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@ncall")), LineNumberNode, Module, Int64, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:categorical,), Tuple{Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(Main, Symbol("#3#4")), Float64})
precompile(Tuple{typeof(Base.:(*)), Int64, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)),)}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{getfield(Unitful, Symbol("##s50#66")), Any, Any})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#67#68")), Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.sqrt), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(/)), Float64, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Main.y), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}}, Type{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}})
precompile(Tuple{typeof(Base.setindex!), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Main.y), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Nothing, DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, BoundaryValueDiffEq.MIRK4, DiffEqBase.LinearInterpolation{Array{Float64, 1}, Array{Array{Float64, 1}, 1}}, Nothing}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Nothing, DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, BoundaryValueDiffEq.MIRK4, DiffEqBase.LinearInterpolation{Array{Float64, 1}, Array{Array{Float64, 1}, 1}}, Nothing}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.getindex), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Nothing, DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, BoundaryValueDiffEq.MIRK4, DiffEqBase.LinearInterpolation{Array{Float64, 1}, Array{Array{Float64, 1}, 1}}, Nothing}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.getindex), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Nothing, DiffEqBase.BVProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.blasius), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, DiffEqBase.TwoPointBVPFunction{typeof(Main.bcblasius)}, DiffEqBase.StandardBVProblem, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, BoundaryValueDiffEq.MIRK4, DiffEqBase.LinearInterpolation{Array{Float64, 1}, Array{Array{Float64, 1}, 1}}, Nothing}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Int64}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(-)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Unitful.ustrip), Tuple{Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Unitful.ustrip), Tuple{Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Unitful.ustrip), Tuple{Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Unitful.ustrip), Tuple{Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:legend,), Tuple{Nothing}}, typeof(RecipesBase.plot), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:legend,), Tuple{Nothing}}}, typeof(RecipesBase.plot), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Array{Float64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.process_userrecipe!), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.build_layout), Plots.GridLayout, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Int64, Bool})
precompile(Tuple{typeof(Plots._update_subplot_periphery), Plots.Subplot{Plots.GRBackend}, Array{Any, 1}})
precompile(Tuple{typeof(Plots._slice_series_args!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Int64})
precompile(Tuple{typeof(RecipesPipeline.is_seriestype_supported), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.get_series_color), Symbol, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{typeof(RecipesPipeline.is_surface), Symbol})
precompile(Tuple{typeof(Base.:(==)), PlotUtils.ColorPalette, Symbol})
precompile(Tuple{typeof(Plots._cycle), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Base.lastindex), PlotUtils.ColorPalette})
precompile(Tuple{typeof(Base.lastindex), Array{ColorTypes.RGB{Float64}, 1}})
precompile(Tuple{typeof(Base.getindex), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Base.getindex), Array{ColorTypes.RGB{Float64}, 1}, Int64})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Symbol, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.label_to_string), Tuple{Base.RefValue{Symbol}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Plots.label_to_string), Tuple{Base.RefValue{Symbol}, Int64}}})
precompile(Tuple{typeof(Base.:(!=)), Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Unitful.ustrip), Tuple{Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Unitful.ustrip), Tuple{Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}}})
precompile(Tuple{typeof(CSSUtil.hbox), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{getfield(WebIO, Symbol("#dom#13")){getfield(WebIO, Symbol("#dom#12#14")){Base.Dict{Any, Any}, WebIO.DOM}}, Plots.Plot{Plots.GRBackend}, Vararg{Plots.Plot{Plots.GRBackend}, N} where N})
precompile(Tuple{getfield(WebIO, Symbol("#dom#12#14")){Base.Dict{Any, Any}, WebIO.DOM}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, getfield(WebIO, Symbol("#dom#13")){getfield(WebIO, Symbol("#dom#12#14")){Base.Dict{Any, Any}, WebIO.DOM}}, Plots.Plot{Plots.GRBackend}, Vararg{Plots.Plot{Plots.GRBackend}, N} where N})
precompile(Tuple{typeof(Widgets.node), WebIO.DOM, Plots.Plot{Plots.GRBackend}, Vararg{Plots.Plot{Plots.GRBackend}, N} where N})
precompile(Tuple{getfield(WebIO, Symbol("##node#26")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Widgets.node), WebIO.DOM, Vararg{Any, N} where N})
precompile(Tuple{Type{WebIO.Node{T} where T}, WebIO.DOM, Plots.Plot{Plots.GRBackend}, Vararg{Plots.Plot{Plots.GRBackend}, N} where N})
precompile(Tuple{getfield(WebIO, Symbol("##Node#25")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{WebIO.Node{T} where T}, WebIO.DOM, Plots.Plot{Plots.GRBackend}, Vararg{Plots.Plot{Plots.GRBackend}, N} where N})
precompile(Tuple{getfield(Observables, Symbol("##map#31")), WebIO.Node{WebIO.DOM}, typeof(Base.map), Function, Widgets.Widget{:slider, Float64}})
precompile(Tuple{Type{Observables.MapUpdater{F, T} where T where F}, getfield(Main, Symbol("#3#4")), Observables.Observable{Any}})
precompile(Tuple{typeof(Observables.onany), Function, Widgets.Widget{:slider, Float64}})
precompile(Tuple{Type{Observables.OnUpdate{F, Args} where Args where F}, Observables.MapUpdater{getfield(Main, Symbol("#3#4")), Any}, Tuple{Widgets.Widget{:slider, Float64}}})
precompile(Tuple{typeof(Observables.on), Function, Widgets.Widget{:slider, Float64}})
precompile(Tuple{typeof(WebIO.setup_comm), Function, Widgets.Widget{:slider, Float64}})
precompile(Tuple{typeof(Base.isequal), Widgets.Widget{:slider, Float64}, WeakRef})
precompile(Tuple{typeof(Base.:(==)), Widgets.Widget{:slider, Float64}, WeakRef})
precompile(Tuple{typeof(Base.isequal), Widgets.Widget{:slider, Float64}, Observables.Observable{WebIO.Node{WebIO.DOM}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Observables.Observable{Any}, getfield(InteractBase, Symbol("#158#159"))}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:output, :layout), Tuple{Observables.Observable{Any}, getfield(InteractBase, Symbol("#158#159"))}}, Type{Widgets.Widget{:manipulate, S} where S}, OrderedCollections.OrderedDict{Symbol, Widgets.Widget{:slider, Float64}}})
precompile(Tuple{typeof(IJulia.undisplay), Widgets.Widget{:manipulate, Any}})
precompile(Tuple{getfield(InteractBase, Symbol("#158#159")), Widgets.Widget{:manipulate, Any}})
precompile(Tuple{typeof(InteractBase.center), Widgets.Widget{:slider, Float64}})
precompile(Tuple{typeof(Base._array_for), Type{Widgets.Widget{:slider, Float64}}, Base.ValueIterator{OrderedCollections.OrderedDict{Symbol, Any}}, Base.HasLength})
precompile(Tuple{typeof(Base.allocatedinline), Type{Widgets.Widget{:slider, Float64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Widgets.Widget{:slider, Float64}, 1}, Widgets.Widget{:slider, Float64}, Base.Generator{Base.ValueIterator{OrderedCollections.OrderedDict{Symbol, Any}}, typeof(InteractBase.center)}, Int64})
precompile(Tuple{typeof(InteractBase.center), WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(Widgets.node), Symbol, Widgets.Widget{:slider, Float64}, Vararg{Any, N} where N})
precompile(Tuple{getfield(WebIO, Symbol("##node#26")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Widgets.node), Symbol, Vararg{Any, N} where N})
precompile(Tuple{Type{WebIO.Node{T} where T}, Symbol, Widgets.Widget{:slider, Float64}, Vararg{Any, N} where N})
precompile(Tuple{getfield(WebIO, Symbol("##Node#25")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{WebIO.Node{T} where T}, Symbol, Widgets.Widget{:slider, Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Any})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol})
precompile(Tuple{typeof(Base.show_unquoted_quote_expr), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Any, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Widgets.Widget{:slider, Float64}})
precompile(Tuple{getfield(Base, Symbol("#62#63")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, Widgets.Widget{:slider, Float64}})
precompile(Tuple{WebIO.Node{WebIO.DOM}, WebIO.Scope})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Dict{String, Tuple{Observables.AbstractObservable{T} where T, Union{Nothing, Bool}}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Set{String}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{WebIO.Asset, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Set{WebIO.AbstractConnection}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{WebIO.JSString, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Plots.GRBackend})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/html")}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(WebIO.render), Widgets.Widget{:slider, Float64}})
precompile(Tuple{typeof(WebIO.render), Observables.Observable{Any}})
precompile(Tuple{Type{Observables.Observable{T} where T}, WebIO.Scope, String, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(WebIO.setup_comm), WebIO.SyncCallback, Observables.Observable{WebIO.Node{WebIO.DOM}}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{WebIO.Node{WebIO.DOM}}, WeakRef})
precompile(Tuple{typeof(Base.:(==)), Observables.Observable{WebIO.Node{WebIO.DOM}}, WeakRef})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{WebIO.Node{WebIO.DOM}}, Observables.Observable{Any}})
precompile(Tuple{getfield(WebIO, Symbol("##node#26")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Widgets.node), WebIO.Scope, Vararg{Any, N} where N})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(WebIO.render), WebIO.Scope})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, V} where V, 1}}}, Int64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Any, 1}}}, Int64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(WebIO.render), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("text/html")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base64.stringmime), Base.Multimedia.MIME{Symbol("text/html")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._update_min_padding!), Plots.GridLayout})
precompile(Tuple{typeof(Base.map), Function, Array{RecipesBase.AbstractLayout, 2}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}})
precompile(Tuple{typeof(Plots._transform_ticks), Symbol})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Plots.axis_limits), Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Symbol, Function})
precompile(Tuple{getfield(PlotUtils, Symbol("#optimize_ticks##kw")), NamedTuple{(:k_min, :k_max), Tuple{Int64, Int64}}, typeof(PlotUtils.optimize_ticks), Float64, Float64})
precompile(Tuple{typeof(Base.map), Function, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}, Int64})
precompile(Tuple{typeof(Showoff.showoff), Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.map), Function, Array{String, 1}})
precompile(Tuple{typeof(Plots.font), String, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##font#86")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.font), String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.parse), Type{ColorTypes.Colorant{T, N} where N where T}, String})
precompile(Tuple{typeof(Base.in), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Plots.Font}, String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{getfield(Plots, Symbol("#gr_set_font##kw")), NamedTuple{(:halign, :valign, :rotation), Tuple{Symbol, Symbol, Int64}}, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#334")), Symbol, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Int64, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(*)), Int64, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Measures.Length{:mm, Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 2}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Int64})
precompile(Tuple{typeof(Base.maximum), Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Int64})
precompile(Tuple{getfield(Base, Symbol("#maximum##kw")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.maximum), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.reducedim_init), Function, typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.min), NamedTuple{(), Tuple{}}, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}})
precompile(Tuple{typeof(Base._mapreducedim!), typeof(Base.identity), typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.lastindex), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.:(+)), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Measures.Length{:mm, Float64}, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}, Int64})
precompile(Tuple{typeof(Base.sum), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.:(*)), Float64, Int64, Float64})
precompile(Tuple{typeof(Plots.gr_display), Plots.Subplot{Plots.GRBackend}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_viewport_from_bbox), Plots.Subplot{Plots.GRBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#334")), Symbol, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.get_minor_ticks), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Tuple{Array{Float64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Plots.gr_set_line), Float64, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr_set_transparency), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64})
precompile(Tuple{typeof(Plots.gr_set_line), Int64, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr_tick_label), Plots.Axis, String})
precompile(Tuple{typeof(Plots.get_clims), Plots.Subplot{Plots.GRBackend}, Plots.Series, Function})
precompile(Tuple{typeof(Plots.get_clims), Plots.Series, typeof(Plots.ignorenan_extrema)})
precompile(Tuple{typeof(Base.iterate), Plots.SegmentsIterator})
precompile(Tuple{typeof(Base.iterate), Plots.SegmentsIterator, Int64})
precompile(Tuple{typeof(Plots.get_linecolor), Plots.Series, Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, WebIO.Node{WebIO.ObservableNode}})
precompile(Tuple{typeof(IJulia.display_mimejson), Base.Multimedia.MIME{Symbol("application/vnd.webio.node+json")}, Widgets.Widget{:manipulate, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("application/vnd.webio.node+json")}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{WebIO.Node{WebIO.DOM}}, Observables.Observable{Bool}})
precompile(Tuple{typeof(Base.:(*)), Int64, Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.:(*)), Float64, Unitful.FreeUnits{(Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12")), Base.Order.ForwardOrdering}, Unitful.Dimension{:Temperature}, Unitful.Dimension{:Mass}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#58#59")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)),)}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Float64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.repr), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Int64, Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.:(*)), Float64, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(-)), Float64, Int64})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Float64})
precompile(Tuple{typeof(Base.repr), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.empty), Array{Unitful.Unit{U, D} where D where U, 1}, Type{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.push!), Array{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, 1}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#148#150")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.empty), Array{Unitful.Unit{U, D} where D where U, 1}, Type{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.push!), Array{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#149#151")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.push_widen), Array{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#149#151")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, 1}, Array{Unitful.Unit{U, D} where D where U, 1}})
precompile(Tuple{getfield(Unitful, Symbol("#146#147")){Base.GenericIOBuffer{Array{UInt8, 1}}, String}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{getfield(Unitful, Symbol("#146#147")){Base.GenericIOBuffer{Array{UInt8, 1}}, String}, Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{getfield(Unitful, Symbol("#146#147")){Base.GenericIOBuffer{Array{UInt8, 1}}, String}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Int64})
precompile(Tuple{typeof(IJulia.undisplay), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia.metadata), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia.display_dict), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.webio.node+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(^)), Int64, Float64})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Float64})
precompile(Tuple{typeof(Base.repr), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Float64})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Int64})
precompile(Tuple{typeof(Base.:(+)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#58#59")), Tuple{Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(^)), Float64, Float64})
precompile(Tuple{typeof(Base.:(*)), Int64, Unitful.FreeUnits{(Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Float64})
precompile(Tuple{typeof(Base.:(+)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(PGFPlotsX.__init__)})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#74#93"))})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#75#94"))})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#76#95"))})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#78#97"))})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#79#98"))})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#80#99"))})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#87#106"))})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#88#107"))})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#89#108"))})
precompile(Tuple{getfield(Plots, Symbol("#258#291"))})
precompile(Tuple{getfield(Plots, Symbol("#259#292"))})
precompile(Tuple{getfield(Plots, Symbol("#260#293"))})
precompile(Tuple{typeof(Plots.include), String})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#84#103"))})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#85#104"))})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#86#105"))})
precompile(Tuple{getfield(Base, Symbol("#@kwdef")), LineNumberNode, Module, Any})
precompile(Tuple{getfield(Printf, Symbol("#@sprintf")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.tail), Tuple{String, Expr, Expr, Expr}})
precompile(Tuple{typeof(Printf._printf), String, Expr, String, Tuple{Expr, Expr, Expr}})
precompile(Tuple{typeof(Base.tail), Tuple{String, Expr, Expr, Expr, Expr}})
precompile(Tuple{typeof(Printf._printf), String, Expr, String, Tuple{Expr, Expr, Expr, Expr}})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("#@warn")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.CoreLogging.logmsg_code), Module, String, Int64, Symbol, Expr})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr})
precompile(Tuple{getfield(Plots, Symbol("#478#481"))})
precompile(Tuple{getfield(Plots, Symbol("#479#482"))})
precompile(Tuple{getfield(Plots, Symbol("#480#483"))})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#@pgf")), LineNumberNode, Module, Any})
precompile(Tuple{typeof(MacroTools.prewalk), typeof(PGFPlotsX.procmap), Expr})
precompile(Tuple{typeof(MacroTools.normalise), Expr})
precompile(Tuple{typeof(Base.:(==)), Expr, Symbol})
precompile(Tuple{typeof(MacroTools.blockunify), Expr, Expr})
precompile(Tuple{typeof(MacroTools.match_inner), Expr, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.isbinding), Symbol})
precompile(Tuple{typeof(MacroTools.isslurp), Symbol})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(MacroTools, Symbol("#21#22")){typeof(PGFPlotsX.procmap)}, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#21#22")){typeof(PGFPlotsX.procmap)}}})
precompile(Tuple{getfield(MacroTools, Symbol("#21#22")){typeof(PGFPlotsX.procmap)}, Symbol})
precompile(Tuple{typeof(MacroTools.match), Expr, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.blockunify), Expr, Symbol})
precompile(Tuple{typeof(MacroTools.match_inner), Expr, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.walk), Symbol, Function, typeof(Base.identity)})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Symbol}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#21#22")){typeof(PGFPlotsX.procmap)}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#21#22")){typeof(PGFPlotsX.procmap)}}, Int64})
precompile(Tuple{getfield(MacroTools, Symbol("#21#22")){typeof(PGFPlotsX.procmap)}, Expr})
precompile(Tuple{typeof(MacroTools.rmlines), Expr})
precompile(Tuple{getfield(MacroTools, Symbol("#16#18")), Symbol})
precompile(Tuple{getfield(MacroTools, Symbol("#16#18")), Expr})
precompile(Tuple{typeof(MacroTools.slurprange), Array{Any, 1}})
precompile(Tuple{typeof(MacroTools.inrange), Int64, Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(MacroTools.bname), Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Symbol, Nothing})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(PGFPlotsX.procmap), Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(PGFPlotsX.procmap)}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(PGFPlotsX.prockey), Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(PGFPlotsX.prockey)}})
precompile(Tuple{typeof(PGFPlotsX.prockey), Expr})
precompile(Tuple{typeof(MacroTools.match), MacroTools.OrBind, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.blockunify), MacroTools.OrBind, Expr})
precompile(Tuple{typeof(MacroTools.match_inner), MacroTools.OrBind, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.trymatch), MacroTools.OrBind, Expr})
precompile(Tuple{typeof(MacroTools.trymatch), Expr, Expr})
precompile(Tuple{getfield(MacroTools, Symbol("#16#18")), Int64})
precompile(Tuple{typeof(MacroTools.match), Symbol, Int64, Base.Dict{Any, Any}})
precompile(Tuple{getfield(MacroTools, Symbol("#16#18")), String})
precompile(Tuple{typeof(MacroTools.match), Symbol, String, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.match), Symbol, Expr, Base.Dict{Any, Any}})
precompile(Tuple{getfield(MacroTools, Symbol("#16#18")), Bool})
precompile(Tuple{typeof(MacroTools.match), Symbol, Bool, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Expr}, Base.Generator{Array{Any, 1}, typeof(PGFPlotsX.procmap)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Array{Any, 1}, typeof(PGFPlotsX.procmap)}, Int64})
precompile(Tuple{typeof(PGFPlotsX.prockey), Symbol})
precompile(Tuple{getfield(MacroTools, Symbol("#16#18")), Type{T} where T})
precompile(Tuple{typeof(MacroTools.match), Symbol, Type{T} where T, Base.Dict{Any, Any}})
precompile(Tuple{typeof(PGFPlotsX.procmap), String})
precompile(Tuple{typeof(MacroTools.blockunify), Expr, String})
precompile(Tuple{typeof(MacroTools.match_inner), Expr, String, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{String}, Base.Generator{Array{Any, 1}, typeof(PGFPlotsX.procmap)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Any, 1}, typeof(PGFPlotsX.procmap)}, Int64})
precompile(Tuple{typeof(PGFPlotsX.procmap), Int64})
precompile(Tuple{typeof(MacroTools.match), Expr, Int64, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.blockunify), Expr, Int64})
precompile(Tuple{typeof(MacroTools.match_inner), Expr, Int64, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{String, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(PGFPlotsX.procmap)}, Int64, Int64})
precompile(Tuple{typeof(PGFPlotsX.procmap), Bool})
precompile(Tuple{typeof(MacroTools.match), Expr, Bool, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.blockunify), Expr, Bool})
precompile(Tuple{typeof(MacroTools.match_inner), Expr, Bool, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{String, 1}, Bool, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Symbol}, Base.Generator{Array{Any, 1}, typeof(PGFPlotsX.procmap)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Any, 1}, typeof(PGFPlotsX.procmap)}, Int64})
precompile(Tuple{getfield(MacroTools, Symbol("#21#22")){typeof(PGFPlotsX.procmap)}, Type{T} where T})
precompile(Tuple{typeof(MacroTools.blockunify), Expr, Type{T} where T})
precompile(Tuple{typeof(MacroTools.match_inner), Expr, Type{T} where T, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.walk), Type{T} where T, Function, typeof(Base.identity)})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{DataType}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#21#22")){typeof(PGFPlotsX.procmap)}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#21#22")){typeof(PGFPlotsX.procmap)}}, Int64})
precompile(Tuple{getfield(MacroTools, Symbol("#21#22")){typeof(PGFPlotsX.procmap)}, Bool})
precompile(Tuple{typeof(MacroTools.walk), Bool, Function, typeof(Base.identity)})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Symbol, 1}, Bool, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#21#22")){typeof(PGFPlotsX.procmap)}}, Int64, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Expr}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#21#22")){typeof(PGFPlotsX.procmap)}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#21#22")){typeof(PGFPlotsX.procmap)}}, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{DataType}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{DataType, 1}, Expr, Int64})
precompile(Tuple{getfield(MacroTools, Symbol("#21#22")){typeof(PGFPlotsX.procmap)}, String})
precompile(Tuple{typeof(MacroTools.walk), String, Function, typeof(Base.identity)})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Symbol, 1}, String, Int64})
precompile(Tuple{getfield(MacroTools, Symbol("#21#22")){typeof(PGFPlotsX.procmap)}, Int64})
precompile(Tuple{typeof(MacroTools.walk), Int64, Function, typeof(Base.identity)})
precompile(Tuple{getfield(MacroTools, Symbol("#21#22")){typeof(PGFPlotsX.procmap)}, LineNumberNode})
precompile(Tuple{typeof(MacroTools.blockunify), Expr, LineNumberNode})
precompile(Tuple{typeof(MacroTools.match_inner), Expr, LineNumberNode, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.walk), LineNumberNode, Function, typeof(Base.identity)})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{String, 1}, Symbol, Int64})
precompile(Tuple{getfield(MacroTools, Symbol("#21#22")){typeof(PGFPlotsX.procmap)}, QuoteNode})
precompile(Tuple{typeof(MacroTools.walk), QuoteNode, Function, typeof(Base.identity)})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Symbol, 1}, QuoteNode, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{String}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#21#22")){typeof(PGFPlotsX.procmap)}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#21#22")){typeof(PGFPlotsX.procmap)}}, Int64})
precompile(Tuple{getfield(LaTeXStrings, Symbol("#@L_str")), LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(LaTeXStrings.latexstring), String})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), typeof(Main.tsdiagram)}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(IJulia.display_dict), Function})
precompile(Tuple{typeof(IJulia.display_mimestring), Base.Multimedia.MIME{Symbol("text/plain")}, Function})
precompile(Tuple{typeof(Base._any), getfield(IJulia, Symbol("#26#27")){typeof(Main.tsdiagram)}, Array{Base.Multimedia.MIME{mime} where mime, 1}, Base.Colon})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.tsdiagram)}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.tsdiagram)}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.tsdiagram)}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.tsdiagram)}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.tsdiagram)}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.tsdiagram)}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.tsdiagram)}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.tsdiagram)}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.tsdiagram)}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.tsdiagram)}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia.execute_request), ZMQ.Socket, IJulia.Msg})
precompile(Tuple{typeof(REPL.ends_with_semicolon), AbstractString})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Unitful.ustrip), Tuple{Tuple{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}}})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Unitful.ustrip), Tuple{Tuple{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}}}})
precompile(Tuple{typeof(Unitful.ustrip), Float64})
precompile(Tuple{typeof(Unitful.ustrip), Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{LaTeXStrings.LaTeXString}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Nothing, PGFPlotsX.Coordinate{2}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{PGFPlotsX.Coordinate{2}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{PGFPlotsX.Plot, PGFPlotsX.Plot, PGFPlotsX.Plot, PGFPlotsX.Plot, PGFPlotsX.Plot, PGFPlotsX.Plot, PGFPlotsX.Plot, String}}})
precompile(Tuple{typeof(Main.tsdiagram), Float64, Int64, Float64, Float64, Float64, Float64, Float64, Float64})
precompile(Tuple{getfield(PGFPlotsX, Symbol("##Options#1")), Bool, Type{PGFPlotsX.Options}, Base.Pair{String, Int64}, Vararg{Union{PGFPlotsX.MergeEntry, Base.Pair{A, B} where B where A}, N} where N})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Any, Any}, Int64, String})
precompile(Tuple{typeof(OrderedCollections.hashindex), String, Int64})
precompile(Tuple{typeof(Base.:(!=)), Int32, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Any, Any}, String, String})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Any, Any}, LaTeXStrings.LaTeXString, String})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Any, Any}, Bool, String})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Any, Any}, Float64, String})
precompile(Tuple{typeof(Base.iterate), Base.Pair{Symbol, AbstractArray{Float64, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Pair{Symbol, AbstractArray{Float64, 1}}, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.Iterators.Pairs{Symbol, AbstractArray{Float64, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:x, :y), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, 1}, Base.Pair{Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Base.Generator{Base.Iterators.Pairs{Symbol, AbstractArray{Float64, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:x, :y), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}}}, getfield(PGFPlotsX, Symbol("#40#41"))}, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Pair{Symbol, B} where B}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Pair{Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Pair{Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, 1}, Base.Pair{Symbol, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, AbstractArray{Float64, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:x, :y), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}}}, getfield(PGFPlotsX, Symbol("#40#41"))}, Int64, Int64})
precompile(Tuple{Type{PGFPlotsX.TableData}, Array{Base.Pair{Symbol, B} where B, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.last), Tuple{Base.Broadcast.Extruded{Array{Base.Pair{Symbol, B} where B, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.last), Tuple{Base.Broadcast.Extruded{Array{Base.Pair{Symbol, B} where B, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Array{AbstractArray{Float64, 1}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{AbstractArray{Float64, 1}, 1}, Array{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.last), Tuple{Base.Broadcast.Extruded{Array{Base.Pair{Symbol, B} where B, 1}, Tuple{Bool}, Tuple{Int64}}}}, Array{Float64, 1}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.hcat), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{Type{PGFPlotsX.TableData}, Array{Float64, 2}, Array{Symbol, 1}, Int64, Bool})
precompile(Tuple{getfield(PGFPlotsX, Symbol("##Options#1")), Bool, Type{PGFPlotsX.Options}, Base.Pair{String, Nothing}, Vararg{Union{PGFPlotsX.MergeEntry, Base.Pair{A, B} where B where A}, N} where N})
precompile(Tuple{typeof(Base._array_for), Type{PGFPlotsX.Coordinate{2}}, Array{Tuple{Int64, Float64}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{PGFPlotsX.Coordinate{2}, 1}, Base.Generator{Array{Tuple{Int64, Float64}, 1}, getfield(PGFPlotsX, Symbol("#ensure_c#23")){getfield(PGFPlotsX, Symbol("#check_N#22"))}}, Int64, Int64})
precompile(Tuple{Type{PGFPlotsX.Coordinates{2}}, Array{PGFPlotsX.Coordinate{2}, 1}})
precompile(Tuple{Type{PGFPlotsX.Plot}, PGFPlotsX.Options, PGFPlotsX.Coordinates{2}, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Float64}, Vararg{Any, N} where N})
precompile(Tuple{Type{Array{Tuple{Real, Float64}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Real, Float64}, 1}, Tuple{Tuple{Int64, Float64}, Tuple{Float64, Float64}}})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#ensure_c#23")){getfield(PGFPlotsX, Symbol("#check_N#22"))}, Tuple{Int64, Float64}})
precompile(Tuple{typeof(Base._array_for), Type{PGFPlotsX.Coordinate{2}}, Array{Tuple{Real, Float64}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{PGFPlotsX.Coordinate{2}, 1}, Base.Generator{Array{Tuple{Real, Float64}, 1}, getfield(PGFPlotsX, Symbol("#ensure_c#23")){getfield(PGFPlotsX, Symbol("#check_N#22"))}}, Int64, Int64})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#ensure_c#23")){getfield(PGFPlotsX, Symbol("#check_N#22"))}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base._array_for), Type{PGFPlotsX.Coordinate{2}}, Array{Tuple{Float64, Float64}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{PGFPlotsX.Coordinate{2}, 1}, Base.Generator{Array{Tuple{Float64, Float64}, 1}, getfield(PGFPlotsX, Symbol("#ensure_c#23")){getfield(PGFPlotsX, Symbol("#check_N#22"))}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, PGFPlotsX.Axis, Int64})
precompile(Tuple{typeof(IJulia.undisplay), PGFPlotsX.Axis})
precompile(Tuple{typeof(IJulia.metadata), PGFPlotsX.Axis})
precompile(Tuple{typeof(IJulia.display_dict), PGFPlotsX.Axis})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, PGFPlotsX.Axis})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, OrderedCollections.OrderedDict{Any, Any}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{String, LaTeXStrings.LaTeXString}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{String, Bool}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Float64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{String, Float64}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Bool})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{String, Nothing}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{String, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Union{Nothing, PGFPlotsX.Coordinate{2}}, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Tuple{Int64, Float64}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, PGFPlotsX.Axis})
precompile(Tuple{typeof(IJulia.display_mimestring), Base.Multimedia.MIME{Symbol("image/svg+xml")}, PGFPlotsX.Axis})
precompile(Tuple{Type{NamedTuple{(:showing_ide,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#save##kw")), NamedTuple{(:showing_ide,), Tuple{Bool}}, typeof(PGFPlotsX.save), String, PGFPlotsX.Axis})
precompile(Tuple{getfield(PGFPlotsX, Symbol("##save#65")), Bool, PGFPlotsX.LaTeXEngine, Array{String, 1}, Int64, Bool, typeof(PGFPlotsX.save), String, PGFPlotsX.TikzDocument})
precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Any, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Any, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Int32, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Union{String, PGFPlotsX.TikzElement}, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Union{String, PGFPlotsX.TikzElement}, 1}})
precompile(Tuple{typeof(Base.length), Array{Union{String, PGFPlotsX.TikzElement}, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Float64, 2}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Int64, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Union{Nothing, PGFPlotsX.Coordinate{2}}, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Union{Nothing, PGFPlotsX.Coordinate{2}}, 1}})
precompile(Tuple{typeof(Base.length), Array{Union{Nothing, PGFPlotsX.Coordinate{2}}, 1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Real}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{Int64, Float64}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{Float64, Float64}, Base.IdDict{Any, Any}})
precompile(Tuple{getfield(Base, Symbol("##open#287")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(PGFPlotsX, Symbol("#67#68")){Bool, PGFPlotsX.TikzDocument}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.join), Array{String, 1}, Char})
precompile(Tuple{typeof(Base.append!), Array{Any, 1}, Array{String, 1}})
precompile(Tuple{typeof(PGFPlotsX.print_tex), Base.IOStream, String, PGFPlotsX.TikzDocument})
precompile(Tuple{typeof(PGFPlotsX.print_tex), Base.IOStream, PGFPlotsX.TikzPicture, PGFPlotsX.TikzDocument})
precompile(Tuple{typeof(PGFPlotsX.print_tex), Base.IOStream, PGFPlotsX.Axis, PGFPlotsX.TikzPicture})
precompile(Tuple{typeof(Base.print), Base.IOStream, String, String, Vararg{String, N} where N})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#replace_underline#9")), String})
precompile(Tuple{typeof(PGFPlotsX.print_opt), Base.IOStream, String})
precompile(Tuple{typeof(PGFPlotsX.print_opt), Base.IOStream, Int64})
precompile(Tuple{typeof(PGFPlotsX.print_opt), Base.IOStream, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(PGFPlotsX.print_opt), Base.IOStream, Bool})
precompile(Tuple{typeof(PGFPlotsX.print_opt), Base.IOStream, Float64})
precompile(Tuple{typeof(PGFPlotsX.print_tex), Base.GenericIOBuffer{Array{UInt8, 1}}, PGFPlotsX.Plot, PGFPlotsX.Axis})
precompile(Tuple{typeof(PGFPlotsX.print_opt), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(PGFPlotsX.print_indent), getfield(PGFPlotsX, Symbol("#49#50")){PGFPlotsX.Table, Array{Any, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.axes), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 2}, Int64, Int64})
precompile(Tuple{typeof(PGFPlotsX.print_tex), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Base.in), Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(PGFPlotsX, Symbol("#10#11")), Tuple{Base.Broadcast.Extruded{Array{Base.SubString{String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{String}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(PGFPlotsX, Symbol("#10#11")), Tuple{Base.Broadcast.Extruded{Array{Base.SubString{String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(PGFPlotsX.print_tex), Base.GenericIOBuffer{Array{UInt8, 1}}, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(PGFPlotsX.print_indent), getfield(PGFPlotsX, Symbol("#49#50")){PGFPlotsX.Coordinates{2}, Array{Any, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.iterate), Array{Union{Nothing, PGFPlotsX.Coordinate{2}}, 1}})
precompile(Tuple{typeof(PGFPlotsX.print_tex), Base.GenericIOBuffer{Array{UInt8, 1}}, PGFPlotsX.Coordinate{2}, PGFPlotsX.Coordinates{2}})
precompile(Tuple{typeof(PGFPlotsX.print_tex), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Int64, Float64}, PGFPlotsX.Coordinate{2}})
precompile(Tuple{typeof(Base.iterate), Array{Union{Nothing, PGFPlotsX.Coordinate{2}}, 1}, Int64})
precompile(Tuple{typeof(PGFPlotsX.print_tex), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Float64, Float64}, PGFPlotsX.Coordinate{2}})
precompile(Tuple{typeof(PGFPlotsX.print_tex), Base.GenericIOBuffer{Array{UInt8, 1}}, String, PGFPlotsX.Axis})
precompile(Tuple{typeof(Base.join), Array{AbstractString, 1}, Char})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Array{AbstractString, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{AbstractString, 1}, Char})
precompile(Tuple{typeof(Base.print), Base.IOStream, String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.IOStream, Char})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, PGFPlotsX.TikzDocument})
precompile(Tuple{typeof(PGFPlotsX.print_tex), Base.GenericIOBuffer{Array{UInt8, 1}}, PGFPlotsX.TikzDocument})
precompile(Tuple{typeof(PGFPlotsX.print_tex), Base.GenericIOBuffer{Array{UInt8, 1}}, String, PGFPlotsX.TikzDocument})
precompile(Tuple{typeof(PGFPlotsX.print_tex), Base.GenericIOBuffer{Array{UInt8, 1}}, PGFPlotsX.TikzPicture, PGFPlotsX.TikzDocument})
precompile(Tuple{typeof(PGFPlotsX.print_tex), Base.GenericIOBuffer{Array{UInt8, 1}}, PGFPlotsX.Axis, PGFPlotsX.TikzPicture})
precompile(Tuple{typeof(PGFPlotsX.print_opt), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(PGFPlotsX.print_opt), Base.GenericIOBuffer{Array{UInt8, 1}}, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(PGFPlotsX.print_opt), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool})
precompile(Tuple{typeof(PGFPlotsX.print_opt), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64})
precompile(Tuple{typeof(Base.vect), UInt64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{UInt64, String}})
precompile(Tuple{typeof(Base.string), String, UInt64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.:(+)), UInt64, Int64})
precompile(Tuple{typeof(Base.string), Base.Multimedia.MIME{Symbol("image/svg+xml")}})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, PGFPlotsX.Axis})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){PGFPlotsX.Axis}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/png")}, PGFPlotsX.Axis})
precompile(Tuple{typeof(IJulia.display_mimestring), Base.Multimedia.MIME{Symbol("image/png")}, PGFPlotsX.Axis})
precompile(Tuple{typeof(Base.:(==)), UInt64, UInt64})
precompile(Tuple{getfield(Base.Filesystem, Symbol("#rm##kw")), NamedTuple{(:force,), Tuple{Bool}}, typeof(Base.Filesystem.rm), String})
precompile(Tuple{typeof(Base.unsafe_write), Base.GenericIOBuffer{Array{UInt8, 1}}, Ptr{UInt8}, Int64})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt8, UInt8, Vararg{UInt8, N} where N})
precompile(Tuple{typeof(Base.string), Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){PGFPlotsX.Axis}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){PGFPlotsX.Axis}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, PGFPlotsX.Axis})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){PGFPlotsX.Axis}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){PGFPlotsX.Axis}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){PGFPlotsX.Axis}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){PGFPlotsX.Axis}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){PGFPlotsX.Axis}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){PGFPlotsX.Axis}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, PGFPlotsX.Axis})
precompile(Tuple{getfield(Base64, Symbol("#1#2")){Base64.Base64EncodePipe}, Base64.Buffer})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, PGFPlotsX.Axis})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.webio.node+json")}, PGFPlotsX.Axis})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#58#59")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.repr), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.empty), Array{Union{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, 1}, Type{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#148#150")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.empty), Array{Union{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, 1}, Type{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#149#151")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Array{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}})
precompile(Tuple{getfield(Unitful, Symbol("#146#147")){Base.GenericIOBuffer{Array{UInt8, 1}}, String}, Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{getfield(Unitful, Symbol("#146#147")){Base.GenericIOBuffer{Array{UInt8, 1}}, String}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.repr), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.empty), Array{Union{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, 1}, Type{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#148#150")), Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.empty), Array{Union{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, 1}, Type{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#149#151")), Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, 1}, Array{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}})
precompile(Tuple{getfield(Unitful, Symbol("#146#147")){Base.GenericIOBuffer{Array{UInt8, 1}}, String}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.:(-)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#58#59")), Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(-)), Int64, Float64})
precompile(Tuple{typeof(JpegTurbo_jll.__init__)})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Zstd_jll.__init__)})
precompile(Tuple{typeof(Libtiff_jll.__init__)})
precompile(Tuple{typeof(LittleCMS_jll.__init__)})
precompile(Tuple{typeof(OpenJpeg_jll.__init__)})
precompile(Tuple{typeof(Poppler_jll.__init__)})
precompile(Tuple{typeof(Base.:(*)), Float64, Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Float64, Base.Irrational{:π}})
precompile(Tuple{typeof(Base.:(*)), Int64, Base.Irrational{:π}})
precompile(Tuple{typeof(Base.:(*)), Int64, Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.:(/)), Int64, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Float64})
precompile(Tuple{typeof(Base.:(-)), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{getfield(Unitful, Symbol("#146#147")){Base.GenericIOBuffer{Array{UInt8, 1}}, String}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Base.Val{2}})
precompile(Tuple{typeof(Base.:(-)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Base.Irrational{:π}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.repr), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(-)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(+)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), nothing}}, Int64, Base.Irrational{:π}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Int64})
precompile(Tuple{typeof(Base.repr), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.show_call), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Symbol, Array{Any, 1}, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.:(+)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Int64})
precompile(Tuple{typeof(Base.sqrt), Float64})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Float64, Base.Val{2}})
precompile(Tuple{typeof(Base.:(+)), Int64, Float64})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Float64})
precompile(Tuple{typeof(Base.:(*)), Float64, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#67#68")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=2)),)}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.sqrt), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Float64, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)),)}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=2)),)}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)))}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)))}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Float64})
precompile(Tuple{typeof(Base.:(*)), Int64, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#58#59")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12")), Base.Order.ForwardOrdering}, Unitful.Dimension{:Time}, Unitful.Dimension{:Temperature}})
precompile(Tuple{typeof(Base.:(/)), Int64, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#49#50")){Int64}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Base.Val{2}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(-)), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Float64})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=2)),)}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Float64})
precompile(Tuple{getfield(Unitful, Symbol("##s50#94")), Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Unitful, Symbol("#95#96")), Tuple{Unitful.Dimension{:Length}, Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Unitful.Dimension{:Length}, Unitful.Dimension{:Time}}, getfield(Unitful, Symbol("#95#96"))}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Unitful.Dimension{:Length}, Unitful.Dimension{:Time}}, getfield(Unitful, Symbol("#95#96"))}, Int64})
precompile(Tuple{typeof(Base.:(^)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Base.Rational{Int64}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.tensfactor), typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.:(-)), Base.Rational{Int64}, Int64})
precompile(Tuple{typeof(Base.:(^)), Float64, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.:(>)), Base.Rational{Int64}, Int64})
precompile(Tuple{typeof(Base.:(^)), Base.Rational{Int64}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.:(*)), Base.Rational{Int64}, Float64})
precompile(Tuple{typeof(Base.:(-)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#49#50")){Int64}, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Base.Val{2}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(+)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#67#68")), Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.sqrt), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=2)),)}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)))}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Temperature}, Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Unitful, Symbol("#95#96")), Tuple{Unitful.Dimension{:Temperature}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Unitful.Dimension{:Temperature}}, getfield(Unitful, Symbol("#95#96"))}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Unitful.Dimension{:Temperature}}, getfield(Unitful, Symbol("#95#96"))}, Int64})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Float64, Int64}, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Float64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#86#90")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#87#91")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#88#92")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#89#93")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.tensfactor), typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.tensfactor), typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.:(+)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(-)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#49#50")){Int64}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)),)}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{()}(), nothing}}, Base.Val{2}})
precompile(Tuple{typeof(Base.:(*)), Float64, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{()}(), nothing}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Float64, Int64}, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Float64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#86#90")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#87#91")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#88#92")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#89#93")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.tensfactor), typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.:(+)), Int64, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{typeof(Base.:(+)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.print), IJulia.IJuliaStdio{Base.PipeEndpoint}, String, Char})
precompile(Tuple{typeof(Base.repr), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.repr), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.repr), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.empty), Array{Union{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}, 1}, Type{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#148#150")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.empty), Array{Union{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}, 1}, Type{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#149#151")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, 1}, Array{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}})
precompile(Tuple{typeof(Base.repr), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), nothing}}})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#148#150")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.push_widen), Array{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#148#150")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#149#151")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Unitful.Unit{U, D} where D where U, 1}, Array{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, 1}})
precompile(Tuple{typeof(Base.repr), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#148#150")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.push_widen), Array{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#148#150")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#149#151")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.tensfactor), typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.tensfactor), typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Unitful.uconvert), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.repr), Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#148#150")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#148#150")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#149#151")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.push_widen), Array{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, 1}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#149#151")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Unitful.Unit{U, D} where D where U, 1}, Array{Unitful.Unit{U, D} where D where U, 1}})
precompile(Tuple{typeof(Base.:(-)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(>)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(+)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Int64})
precompile(Tuple{typeof(IJulia.display_dict), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=2)),)}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(-)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=2)),)}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)))}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)))}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=4, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Float64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#86#90")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#87#91")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#88#92")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#89#93")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.tensfactor), typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.tensfactor), typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Unitful.uconvert), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=4, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=6, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}})
precompile(Tuple{typeof(Unitful.uconvert), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=6, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=6, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Int64})
precompile(Tuple{typeof(IJulia.undisplay), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=6, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia.metadata), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=6, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(IJulia.display_dict), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=6, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=6, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=6, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=6, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=6, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=6, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=6, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=6, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=6, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=6, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=6, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=6, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=6, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=6, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=6, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=6, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=6, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.webio.node+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=6, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Int64})
precompile(Tuple{typeof(IJulia.undisplay), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(IJulia.metadata), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(IJulia.display_dict), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.webio.node+json")}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(IJulia.display_dict), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=2)),)}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=2)),)}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}})
precompile(Tuple{typeof(Unitful.uconvert), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=6, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.repr), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), nothing}}})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), nothing}}, Float64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Unitful, Symbol("#5#7")){Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.any), Base.Generator{Array{Any, 1}, getfield(Unitful, Symbol("#5#7")){Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{Type{Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}, Int64, Base.Rational{Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.tensfactor), typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.tensfactor), typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Unitful.uconvert), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Watt, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Int64})
precompile(Tuple{typeof(IJulia.undisplay), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia.metadata), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(IJulia.display_dict), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.empty), Array{Union{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}, 1}, Type{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#148#150")), Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#148#150")), Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Unitful.Unit{U, D} where D where U, 1}, Array{Union{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Unitful, Symbol("#146#147")){Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String}, Array{Unitful.Unit{U, D} where D where U, 1}})
precompile(Tuple{getfield(Unitful, Symbol("#146#147")){Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{getfield(Unitful, Symbol("#146#147")){Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String}, Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.webio.node+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Int64})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35")), Base.Order.ForwardOrdering}, Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Int64})
precompile(Tuple{typeof(IJulia.undisplay), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia.metadata), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia.display_dict), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.webio.node+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Float64, Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Int64})
precompile(Tuple{typeof(IJulia.undisplay), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(IJulia.metadata), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(IJulia.display_dict), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.webio.node+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Int64})
precompile(Tuple{typeof(Base.:(-)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)))}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Int64})
precompile(Tuple{typeof(IJulia.undisplay), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia.metadata), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia.display_dict), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#148#150")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#148#150")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#149#151")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#149#151")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{getfield(Unitful, Symbol("#146#147")){Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{getfield(Unitful, Symbol("#146#147")){Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.webio.node+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#49#50")){Int64}, Tuple{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), nothing}}, Base.Val{2}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Int64})
precompile(Tuple{typeof(IJulia.undisplay), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia.metadata), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia.display_dict), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#148#150")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#148#150")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.empty), Array{Unitful.Unit{U, D} where D where U, 1}, Type{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#149#151")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Unitful.Unit{U, D} where D where U, 1}, Array{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.webio.node+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)),)}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(-)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(+)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.tensfactor), typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.tensfactor), typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Unitful.uconvert), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#49#50")){Int64}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=4, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Base.Val{2}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#49#50")){Int64}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=2, den=1)),)}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=2, den=1)))}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Base.Val{2}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#49#50")){Int64}, Tuple{Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Base.Val{2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Unitful, Symbol("#95#96")), Tuple{Unitful.Dimension{:Length}, Unitful.Dimension{:Mass}, Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Unitful.Dimension{:Length}, Unitful.Dimension{:Mass}, Unitful.Dimension{:Time}}, getfield(Unitful, Symbol("#95#96"))}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Unitful.Dimension{:Length}, Unitful.Dimension{:Mass}, Unitful.Dimension{:Time}}, getfield(Unitful, Symbol("#95#96"))}, Int64})
precompile(Tuple{getfield(Unitful, Symbol("#95#96")), Unitful.Dimension{:Mass}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=6, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-4, den=1)))}(), nothing}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-4, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-4, den=1)))}(), nothing}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Float64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#86#90")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#87#91")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#88#92")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#89#93")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.tensfactor), typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-4, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(+)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-4, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=6, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-4, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-4, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-4, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-4, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-4, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-4, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#67#68")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.sqrt), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-4, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-4, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-4, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(-)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Int64})
precompile(Tuple{typeof(Base.:(-)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Float64})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Float64})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Float64})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Float64})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Float64, Int64}, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Float64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#86#90")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#87#91")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#88#92")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Unitful, Symbol("#89#93")), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-3, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), nothing}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.tensfactor), typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.tensfactor), typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Unitful.uconvert), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-3, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), nothing}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=2)),)}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), Base.MappingRF{typeof(Unitful.dimension), Base.BottomRF{typeof(Base.:(*))}}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-3, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{getfield(Base, Symbol("#mapreduce##kw")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.tensfactor), typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Unitful.uconvert), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Unitful, Symbol("#95#96")), Tuple{Unitful.Dimension{:Mass}, Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Unitful.Dimension{:Mass}, Unitful.Dimension{:Time}}, getfield(Unitful, Symbol("#95#96"))}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Unitful.Dimension{:Mass}, Unitful.Dimension{:Time}}, getfield(Unitful, Symbol("#95#96"))}, Int64})
precompile(Tuple{typeof(Base.:(>)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Pascal, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(-)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Unitful.uconvert), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Int64, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Int64, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Int64, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{getfield(DocStringExtensions, Symbol("#29#30")){typeof(DocStringExtensions.template_hook)}, LineNumberNode, Vararg{Any, N} where N})
precompile(Tuple{typeof(DocStringExtensions.template_hook), LineNumberNode, Module, String, Expr})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Base.Docs.signature!), Any, Expr})
precompile(Tuple{typeof(Base.Docs.objectdoc), Any, Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Module}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, String}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Module}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Module}}, Int64})
precompile(Tuple{typeof(Base.Docs.docstr), Any, Any})
precompile(Tuple{typeof(Base.Docs._docstr), Core.SimpleVector, Any})
precompile(Tuple{typeof(Base.Docs.doc!), Module, Base.Docs.Binding, Base.Docs.DocStr, Any})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, Base.Docs.Binding, Int64})
precompile(Tuple{typeof(IJulia.undisplay), Base.Docs.Binding})
precompile(Tuple{typeof(IJulia.metadata), Base.Docs.Binding})
precompile(Tuple{typeof(IJulia.display_dict), Base.Docs.Binding})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, Base.Docs.Binding})
precompile(Tuple{typeof(Base.show), IO, Base.Docs.Binding})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Base.Docs.Binding})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, Base.Docs.Binding})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.Docs.Binding}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.Docs.Binding}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.Docs.Binding}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.Docs.Binding}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, Base.Docs.Binding})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.Docs.Binding}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.Docs.Binding}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.Docs.Binding}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.Docs.Binding}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.Docs.Binding}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.Docs.Binding}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Base.Docs.Binding})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Base.Docs.Binding})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.webio.node+json")}, Base.Docs.Binding})
precompile(Tuple{typeof(Base.vect), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Vararg{Any, N} where N})
precompile(Tuple{Type{Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, 1}, Tuple{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}}})
precompile(Tuple{typeof(Base.vect), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Vararg{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, 1}, Tuple{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}}})
precompile(Tuple{typeof(Main.tikz_triangles), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, 1}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, 1}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, 1}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, 1}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=2)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=2))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, TikzPictures.TikzPicture, Int64})
precompile(Tuple{typeof(IJulia.undisplay), TikzPictures.TikzPicture})
precompile(Tuple{typeof(IJulia.metadata), TikzPictures.TikzPicture})
precompile(Tuple{typeof(IJulia.display_dict), TikzPictures.TikzPicture})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, TikzPictures.TikzPicture})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, TikzPictures.TikzPicture})
precompile(Tuple{typeof(IJulia.display_mimestring), Base.Multimedia.MIME{Symbol("image/svg+xml")}, TikzPictures.TikzPicture})
precompile(Tuple{typeof(Base.println), Base.IOStream, String})
precompile(Tuple{typeof(Base.println), Base.IOStream, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{String}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}, String}, Tuple{String}}})
precompile(Tuple{typeof(Base.withenv), getfield(Poppler_jll, Symbol("#32#33")){getfield(TikzPictures, Symbol("#11#13")){String}}, Base.Pair{String, String}, Vararg{Base.Pair{String, String}, N} where N})
precompile(Tuple{getfield(TikzPictures, Symbol("#11#13")){String}, String})
precompile(Tuple{typeof(Base.arg_gen), String, Base.SubString{String}})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, TikzPictures.TikzPicture})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){TikzPictures.TikzPicture}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){TikzPictures.TikzPicture}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){TikzPictures.TikzPicture}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){TikzPictures.TikzPicture}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, TikzPictures.TikzPicture})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){TikzPictures.TikzPicture}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){TikzPictures.TikzPicture}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){TikzPictures.TikzPicture}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){TikzPictures.TikzPicture}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){TikzPictures.TikzPicture}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){TikzPictures.TikzPicture}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, TikzPictures.TikzPicture})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, TikzPictures.TikzPicture})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.webio.node+json")}, TikzPictures.TikzPicture})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), typeof(Main.yresidual)}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base._any), getfield(IJulia, Symbol("#26#27")){typeof(Main.yresidual)}, Array{Base.Multimedia.MIME{mime} where mime, 1}, Base.Colon})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.yresidual)}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.yresidual)}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.yresidual)}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.yresidual)}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.yresidual)}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.yresidual)}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.yresidual)}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.yresidual)}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.yresidual)}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.yresidual)}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), typeof(Main.residualsθ)}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base._any), getfield(IJulia, Symbol("#26#27")){typeof(Main.residualsθ)}, Array{Base.Multimedia.MIME{mime} where mime, 1}, Base.Colon})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.residualsθ)}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.residualsθ)}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.residualsθ)}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.residualsθ)}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.residualsθ)}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.residualsθ)}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.residualsθ)}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.residualsθ)}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.residualsθ)}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.residualsθ)}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(Main.residualsθ), Float64})
precompile(Tuple{typeof(NLsolve.n_ary), Function})
precompile(Tuple{typeof(Base.:(/)), Base.Irrational{:π}, Int64})
precompile(Tuple{getfield(ForwardDiff, Symbol("##s35#61")), Any, Any, Any, Any})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:method,), Tuple{Symbol}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Val{x} where x}, Bool})
precompile(Tuple{typeof(NLsolve.nlsolve), Function, Array{Float64, 1}})
precompile(Tuple{getfield(ForwardDiff, Symbol("##s35#69")), Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(ForwardDiff, Symbol("#70#71")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(ForwardDiff, Symbol("#70#71"))}})
precompile(Tuple{getfield(ForwardDiff, Symbol("##s12#11")), Any, Any, Any, Any, Type{T} where T, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(ForwardDiff, Symbol("#12#13")){Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(ForwardDiff, Symbol("#12#13")){Int64}}})
precompile(Tuple{Type{NLSolversBase.OnceDifferentiable{TF, TDF, TX} where TX where TDF where TF}, getfield(NLsolve, Symbol("#f!#3")){getfield(Main, Symbol("#8#9")){Float64}}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Symbol, ForwardDiff.Chunk{2}})
precompile(Tuple{Type{FiniteDiff.JacobianCache{CacheType1, CacheType2, CacheType3, ColorType, SparsityType, fdtype, returntype} where returntype where fdtype where SparsityType where ColorType where CacheType3 where CacheType2 where CacheType1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Type{Base.Val{:central}}})
precompile(Tuple{getfield(NLSolversBase, Symbol("##OnceDifferentiable#28")), Bool, Type{NLSolversBase.OnceDifferentiable{TF, TDF, TX} where TX where TDF where TF}, Function, Function, Function, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}})
precompile(Tuple{getfield(NLSolversBase, Symbol("#fj_finitediff!#21")){getfield(NLsolve, Symbol("#f!#3")){getfield(Main, Symbol("#8#9")){Float64}}, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:central}, Float64}}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{getfield(Main, Symbol("#8#9")){Float64}, Float64, Float64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(FiniteDiff.finite_difference_jacobian!), Array{Float64, 2}, Function, Array{Float64, 1}, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:central}, Float64}, Nothing})
precompile(Tuple{getfield(FiniteDiff, Symbol("##finite_difference_jacobian!#39")), Float64, Float64, Base.UnitRange{Int64}, Nothing, Bool, typeof(FiniteDiff.finite_difference_jacobian!), Array{Float64, 2}, getfield(NLsolve, Symbol("#f!#3")){getfield(Main, Symbol("#8#9")){Float64}}, Array{Float64, 1}, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:central}, Float64}, Nothing})
precompile(Tuple{getfield(NLSolversBase, Symbol("#j_finitediff!#22")){Array{Float64, 1}, getfield(NLSolversBase, Symbol("#fj_finitediff!#21")){getfield(NLsolve, Symbol("#f!#3")){getfield(Main, Symbol("#8#9")){Float64}}, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:central}, Float64}}}, Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.string), Expr})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_call), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol, Symbol, Array{Any, 1}, Int64, Int64, Bool})
precompile(Tuple{typeof(NLsolve.converged), NLsolve.SolverResults{Float64, Float64, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.getproperty), NLsolve.SolverResults{Float64, Float64, Array{Float64, 1}, Array{Float64, 1}}, Symbol})
precompile(Tuple{typeof(Unitful.uconvert), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}, Float64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Int64})
precompile(Tuple{typeof(IJulia.undisplay), Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{typeof(IJulia.metadata), Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{typeof(IJulia.display_dict), Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.webio.node+json")}, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{typeof(Main.residualsθ), Unitful.Quantity{Int64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{Type{NLSolversBase.OnceDifferentiable{TF, TDF, TX} where TX where TDF where TF}, getfield(NLsolve, Symbol("#f!#3")){getfield(Main, Symbol("#8#9")){Unitful.Quantity{Int64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Symbol, ForwardDiff.Chunk{2}})
precompile(Tuple{getfield(NLSolversBase, Symbol("#fj_finitediff!#21")){getfield(NLsolve, Symbol("#f!#3")){getfield(Main, Symbol("#8#9")){Unitful.Quantity{Int64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:central}, Float64}}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{getfield(Main, Symbol("#8#9")){Unitful.Quantity{Int64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Float64, Float64})
precompile(Tuple{getfield(FiniteDiff, Symbol("##finite_difference_jacobian!#39")), Float64, Float64, Base.UnitRange{Int64}, Nothing, Bool, typeof(FiniteDiff.finite_difference_jacobian!), Array{Float64, 2}, getfield(NLsolve, Symbol("#f!#3")){getfield(Main, Symbol("#8#9")){Unitful.Quantity{Int64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Array{Float64, 1}, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:central}, Float64}, Nothing})
precompile(Tuple{getfield(NLSolversBase, Symbol("#j_finitediff!#22")){Array{Float64, 1}, getfield(NLSolversBase, Symbol("#fj_finitediff!#21")){getfield(NLsolve, Symbol("#f!#3")){getfield(Main, Symbol("#8#9")){Unitful.Quantity{Int64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:central}, Float64}}}, Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(-)), Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), typeof(Main.animatefoot)}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base._any), getfield(IJulia, Symbol("#26#27")){typeof(Main.animatefoot)}, Array{Base.Multimedia.MIME{mime} where mime, 1}, Base.Colon})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.animatefoot)}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.animatefoot)}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.animatefoot)}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.animatefoot)}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.animatefoot)}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.animatefoot)}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.animatefoot)}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.animatefoot)}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.animatefoot)}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){typeof(Main.animatefoot)}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{Base.Colon, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Int64})
precompile(Tuple{typeof(IJulia.undisplay), Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{typeof(IJulia.metadata), Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{typeof(IJulia.display_dict), Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Char, Vararg{Any, N} where N})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.webio.node+json")}, Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{getfield(Widgets, Symbol("#widget##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.widget), Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{getfield(Widgets, Symbol("#slider##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.slider), Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{getfield(Widgets, Symbol("##slider#56")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:label,), Tuple{String}}}, typeof(Widgets.slider), Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{getfield(Widgets, Symbol("#slider##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.slider), Interact.Bulma, Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{getfield(Widgets, Symbol("#slider##kw")), NamedTuple{(:label,), Tuple{String}}, typeof(Widgets.slider), Interact.Bulma, Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Array{String, 1}})
precompile(Tuple{getfield(InteractBase, Symbol("##slider#74")), Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:label,), Tuple{String}}}, typeof(Widgets.slider), Interact.Bulma, Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Array{String, 1}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:f, :g), Tuple{getfield(InteractBase, Symbol("#75#78")), getfield(InteractBase, Symbol("#77#80"))}}, Type{Observables.ObservablePair{S, T} where T where S}, Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}})
precompile(Tuple{getfield(Observables, Symbol("##ObservablePair#42")), getfield(InteractBase, Symbol("#75#78")), Function, Type{Observables.ObservablePair{S, T} where T where S}, Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}})
precompile(Tuple{typeof(InteractBase._searchsortedfirst), Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{getfield(Base.Sort, Symbol("##searchsortedfirst#4")), Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.Sort.searchsortedfirst), Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:f, :g), Tuple{getfield(InteractBase, Symbol("#75#78")), getfield(InteractBase, Symbol("#77#80"))}}, Type{Observables.ObservablePair{S, T} where T where S}, Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Observables.Observable{Any}})
precompile(Tuple{typeof(WebIO.setup_comm), Function, Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:output,), Tuple{Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}}, Type{Widgets.Widget{T, S} where S where T}, Widgets.Widget{:slider, Any}})
precompile(Tuple{Type{NamedTuple{(:output, :components, :layout, :scope), T} where T<:Tuple}, Tuple{Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, OrderedCollections.OrderedDict{Symbol, Any}, getfield(Base, Symbol("#62#63")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, getfield(Base, Symbol("#62#63")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:output, :components, :layout, :scope), Tuple{Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, OrderedCollections.OrderedDict{Symbol, Any}, getfield(Base, Symbol("#62#63")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, WebIO.Scope}}, Type{Widgets.Widget{:slider, S} where S}})
precompile(Tuple{getfield(Widgets, Symbol("#_#1#2")), Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, WebIO.Scope, Function, Type{Widgets.Widget{:slider, S} where S}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Widgets.Widget{:slider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, String})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Widgets.Widget{:slider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Base.Pair{Symbol, Widgets.Widget{:slider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{typeof(Base.map), Function, Widgets.Widget{:slider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}})
precompile(Tuple{getfield(Main, Symbol("#12#13")), Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{Type{NLSolversBase.OnceDifferentiable{TF, TDF, TX} where TX where TDF where TF}, getfield(NLsolve, Symbol("#f!#3")){getfield(Main, Symbol("#6#7")){Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Symbol, ForwardDiff.Chunk{2}})
precompile(Tuple{getfield(NLSolversBase, Symbol("#fj_finitediff!#21")){getfield(NLsolve, Symbol("#f!#3")){getfield(Main, Symbol("#6#7")){Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:central}, Float64}}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{getfield(Main, Symbol("#6#7")){Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Float64, Float64})
precompile(Tuple{getfield(FiniteDiff, Symbol("##finite_difference_jacobian!#39")), Float64, Float64, Base.UnitRange{Int64}, Nothing, Bool, typeof(FiniteDiff.finite_difference_jacobian!), Array{Float64, 2}, getfield(NLsolve, Symbol("#f!#3")){getfield(Main, Symbol("#6#7")){Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Array{Float64, 1}, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:central}, Float64}, Nothing})
precompile(Tuple{getfield(NLSolversBase, Symbol("#j_finitediff!#22")){Array{Float64, 1}, getfield(NLSolversBase, Symbol("#fj_finitediff!#21")){getfield(NLsolve, Symbol("#f!#3")){getfield(Main, Symbol("#6#7")){Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:central}, Float64}}}, Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Tuple{Int64, Float64}, Tuple{Float64, Float64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Tuple{Int64, Float64}, Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(+)), Tuple{Tuple{Int64, Float64}, Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(+)), Tuple{Tuple{Int64, Float64}, Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Tuple{Float64, Int64}, Tuple{Float64, Float64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Tuple{Float64, Int64}, Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(+)), Tuple{Tuple{Float64, Int64}, Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(+)), Tuple{Tuple{Float64, Int64}, Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{Float64, Float64}, Tuple{Float64, Float64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(+)), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(+)), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Main.drawsegment), Tuple{Int64, Float64}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Main.drawsegment), Tuple{Float64, Float64}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{Float64, Float64}, Tuple{Float64, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(-)), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Int64}}}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(-)), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Int64}}}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{Float64, Int64}, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(-)), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Int64}}}, Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Tuple{Float64, Int64}, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(-)), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Int64}}}, Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(+)), Tuple{Tuple{Float64, Int64}, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(-)), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Int64}}}, Float64}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(+)), Tuple{Tuple{Float64, Int64}, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(-)), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Int64}}}, Float64}}}}})
precompile(Tuple{typeof(Main.drawsegment), Tuple{Float64, Int64}, Tuple{Float64, Float64}})
precompile(Tuple{getfield(Observables, Symbol("##map#31")), Luxor.Drawing, typeof(Base.map), Function, Widgets.Widget{:slider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}})
precompile(Tuple{Type{Observables.MapUpdater{F, T} where T where F}, getfield(Main, Symbol("#12#13")), Observables.Observable{Any}})
precompile(Tuple{typeof(Observables.onany), Function, Widgets.Widget{:slider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}})
precompile(Tuple{Type{Observables.OnUpdate{F, Args} where Args where F}, Observables.MapUpdater{getfield(Main, Symbol("#12#13")), Any}, Tuple{Widgets.Widget{:slider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{typeof(Observables.on), Function, Widgets.Widget{:slider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}})
precompile(Tuple{typeof(WebIO.setup_comm), Function, Widgets.Widget{:slider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:output, :layout), Tuple{Observables.Observable{Any}, getfield(InteractBase, Symbol("#158#159"))}}, Type{Widgets.Widget{:manipulate, S} where S}, OrderedCollections.OrderedDict{Symbol, Widgets.Widget{:slider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{typeof(InteractBase.center), Widgets.Widget{:slider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}})
precompile(Tuple{typeof(Base._array_for), Type{Widgets.Widget{:slider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Base.ValueIterator{OrderedCollections.OrderedDict{Symbol, Any}}, Base.HasLength})
precompile(Tuple{typeof(Base.allocatedinline), Type{Widgets.Widget{:slider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Widgets.Widget{:slider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, 1}, Widgets.Widget{:slider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.Generator{Base.ValueIterator{OrderedCollections.OrderedDict{Symbol, Any}}, typeof(InteractBase.center)}, Int64})
precompile(Tuple{typeof(Widgets.node), Symbol, Widgets.Widget{:slider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Vararg{Any, N} where N})
precompile(Tuple{Type{WebIO.Node{T} where T}, Symbol, Widgets.Widget{:slider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(WebIO, Symbol("##Node#25")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{WebIO.Node{T} where T}, Symbol, Widgets.Widget{:slider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol})
precompile(Tuple{typeof(Base.show_unquoted_quote_expr), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Any, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Widgets.Widget{:slider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}})
precompile(Tuple{getfield(Base, Symbol("#62#63")){WebIO.Node{WebIO.DOM}, typeof(Widgets.scope)}, Widgets.Widget{:slider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/html")}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(WebIO.render), Widgets.Widget{:slider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, V} where V, 1}}}, Int64})
precompile(Tuple{typeof(WebIO.render), Luxor.Drawing})
precompile(Tuple{typeof(Base64.stringmime), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Luxor.Drawing})
precompile(Tuple{Type{NamedTuple{(:dpi,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Main.footangle), Tuple{Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.footangle), Tuple{Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{PGFPlotsX.Plot}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:dpi,), Tuple{Int64}}, typeof(RecipesBase.plot), Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:dpi,), Tuple{Int64}}}, typeof(RecipesBase.plot), Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.is_axis_attribute), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{typeof(IJulia.undisplay), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia.display_dict), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("image/svg+xml")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}})
precompile(Tuple{getfield(Plots, Symbol("#gr_set_font##kw")), NamedTuple{(:halign, :valign, :rotation), Tuple{Symbol, Symbol, Int64}}, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#334")), Symbol, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Int64, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 2}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Int64})
precompile(Tuple{typeof(Plots.gr_display), Plots.Subplot{Plots.GRBackend}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#334")), Symbol, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.length), Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{typeof(Base.collect), Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}})
precompile(Tuple{typeof(Base.in), Float64, Array{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, 1}})
precompile(Tuple{typeof(Plots.iter_segments), Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#64#65")){getfield(Plots, Symbol("#9#10")){Tuple{Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#9#10")){Tuple{Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Plots, Symbol("#gr_polyline##kw")), NamedTuple{(:arrowside, :arrowstyle), Tuple{Symbol, Symbol}}, typeof(Plots.gr_polyline), Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_legend_pos), Plots.Subplot{Plots.GRBackend}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.get_linecolor), Plots.Series, Tuple{Float64, Float64}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Int64}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{Base.Colon, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Base.Dict{Any, Any}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, Any}}}}})
precompile(Tuple{typeof(IJulia.CommManager.comm_open), ZMQ.Socket, IJulia.Msg})
precompile(Tuple{Type{IJulia.CommManager.Comm{target} where target}, String, String, Bool})
precompile(Tuple{getfield(IJulia.CommManager, Symbol("##Comm#1")), Base.Dict{Any, Any}, Base.Dict{Any, Any}, Type{IJulia.CommManager.Comm{target} where target}, String, String, Bool, Function, Function})
precompile(Tuple{Type{IJulia.CommManager.Comm{:webio_comm}}, String, Bool, Function, Function})
precompile(Tuple{typeof(IJulia.CommManager.comm_msg), ZMQ.Socket, IJulia.Msg})
precompile(Tuple{typeof(Base.haskey), Base.Dict{String, IJulia.CommManager.Comm{target} where target}, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, IJulia.CommManager.Comm{target} where target}, String})
precompile(Tuple{getfield(WebIO, Symbol("#93#94")){WebIO.IJuliaConnection}, IJulia.Msg})
precompile(Tuple{typeof(WebIO.dispatch), WebIO.IJuliaConnection, Base.Dict{String, Any}})
precompile(Tuple{typeof(WebIO.dispatch), WebIO.Scope, String, Int64})
precompile(Tuple{typeof(WebIO.set_nosync), Observables.Observable{Any}, Int64})
precompile(Tuple{getfield(Observables, Symbol("#38#41")){getfield(InteractBase, Symbol("#77#80")), Observables.Observable{Float64}, Array{Function, 1}}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{getfield(Base, Symbol("#setindex!##kw")), NamedTuple{(:notify,), Tuple{getfield(Base, Symbol("#64#65")){Base.Fix2{typeof(Base.in), Array{Function, 1}}}}}, typeof(Base.setindex!), Observables.Observable{Float64}, Float64})
precompile(Tuple{getfield(Base, Symbol("#64#65")){Base.Fix2{typeof(Base.in), Array{Function, 1}}}, Function})
precompile(Tuple{Observables.OnUpdate{Observables.MapUpdater{getfield(Main, Symbol("#3#4")), Any}, Tuple{Widgets.Widget{:slider, Float64}}}, Float64})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{Observables.OnUpdate{Observables.MapUpdater{typeof(InteractBase.center), Any}, Tuple{Observables.Observable{Any}}}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{Observables.MapUpdater{typeof(InteractBase.center), Any}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{Observables.OnUpdate{Observables.MapUpdater{getfield(WebIO, Symbol("#54#57")){Observables.Observable{Any}, WebIO.Scope}, WebIO.Node{WebIO.DOM}}, Tuple{Observables.Observable{Any}}}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{Observables.MapUpdater{getfield(WebIO, Symbol("#54#57")){Observables.Observable{Any}, WebIO.Scope}, WebIO.Node{WebIO.DOM}}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{WebIO.SyncCallback, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, WebIO.Node{WebIO.DOM}}}}})
precompile(Tuple{getfield(WebIO, Symbol("#49#51")){WebIO.Scope, String}, WebIO.Node{WebIO.DOM}})
precompile(Tuple{typeof(WebIO.send_command), WebIO.Scope, String, Base.Pair{String, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, WebIO.Node{WebIO.DOM}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, WebIO.Node{WebIO.DOM}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, WebIO.Node{WebIO.DOM}}}, Int64})
precompile(Tuple{typeof(Sockets.send), WebIO.ConnectionPool, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.allocatedinline), Type{WebIO.AbstractConnection}})
precompile(Tuple{getfield(WebIO, Symbol("#5#6")){WebIO.ConnectionPool, Base.Dict{String, Any}, WebIO.IJuliaConnection}})
precompile(Tuple{typeof(IJulia.CommManager.send_comm), IJulia.CommManager.Comm{:webio_comm}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, Any}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, Any}}}, Int64})
precompile(Tuple{typeof(IJulia.msg_pub), IJulia.Msg, String, Base.Dict{String, Any}, Base.Dict{Any, Any}})
precompile(Tuple{Type{IJulia.Msg}, Array{String, 1}, Base.Dict{String, Any}, Base.Dict{String, Any}, Base.Dict{String, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.json), Base.Dict{Any, Any}})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base64.stringmime), Base.Multimedia.MIME{Symbol("text/html")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(WebIO.set_nosync), Observables.Observable{Int64}, Int64})
precompile(Tuple{getfield(Observables, Symbol("#38#41")){getfield(InteractBase, Symbol("#77#80")), Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Array{Function, 1}}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.StepRangeLen{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Base.TwicePrecision{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}, Int64})
precompile(Tuple{getfield(Base, Symbol("#setindex!##kw")), NamedTuple{(:notify,), Tuple{getfield(Base, Symbol("#64#65")){Base.Fix2{typeof(Base.in), Array{Function, 1}}}}}, typeof(Base.setindex!), Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{Observables.OnUpdate{Observables.MapUpdater{getfield(Main, Symbol("#12#13")), Any}, Tuple{Widgets.Widget{:slider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}}}, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{Observables.OnUpdate{Observables.MapUpdater{typeof(InteractBase.center), Any}, Tuple{Observables.Observable{Any}}}, Luxor.Drawing})
precompile(Tuple{Observables.MapUpdater{typeof(InteractBase.center), Any}, Luxor.Drawing})
precompile(Tuple{typeof(WebIO.dispatch), WebIO.Scope, String, Bool})
precompile(Tuple{typeof(WebIO.set_nosync), Observables.Observable{Bool}, Bool})
precompile(Tuple{getfield(Observables, Symbol("#38#41")){getfield(InteractBase, Symbol("#70#73")), Observables.Observable{Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Array{Function, 1}}, Int64})
precompile(Tuple{Observables.OnUpdate{Observables.MapUpdater{getfield(Main, Symbol("#1#2")), Any}, Tuple{Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Widgets.Widget{:togglebuttons, Any}}}, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{Observables.MapUpdater{getfield(Main, Symbol("#1#2")), Any}, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Main, Symbol("#1#2")), Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}, Bool})
precompile(Tuple{getfield(Archimedes, Symbol("##draw#16")), Bool, Bool, typeof(Archimedes.draw), Archimedes.BoxShip, Int64, Function})
precompile(Tuple{getfield(Archimedes, Symbol("##draw#11")), Bool, Bool, typeof(Archimedes.draw), Archimedes.CoordMapping, Archimedes.BoxShip, typeof(Archimedes.toship)})
precompile(Tuple{typeof(Cairo.destroy), Cairo.CairoContext})
precompile(Tuple{getfield(Observables, Symbol("#38#41")){getfield(InteractBase, Symbol("#126#129")){Observables.Observable{Any}}, Observables.Observable{Any}, Array{Function, 1}}, Int64})
precompile(Tuple{typeof(Base.getindex), InteractBase.Vals2Idxs{Bool}, Int64})
precompile(Tuple{getfield(Base, Symbol("#setindex!##kw")), NamedTuple{(:notify,), Tuple{getfield(Base, Symbol("#64#65")){Base.Fix2{typeof(Base.in), Array{Function, 1}}}}}, typeof(Base.setindex!), Observables.Observable{Any}, Bool})
precompile(Tuple{Observables.OnUpdate{Observables.MapUpdater{getfield(Main, Symbol("#1#2")), Any}, Tuple{Widgets.Widget{:rangeslider, Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Degree, Unitful.Dimensions{()}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{()}(), nothing}}}, Widgets.Widget{:togglebuttons, Any}}}, Bool})
precompile(Tuple{getfield(Archimedes, Symbol("##draw#11")), Bool, Bool, typeof(Archimedes.draw), Archimedes.CoordMapping, Archimedes.BoxShip, getfield(Archimedes, Symbol("#18#22"))})
precompile(Tuple{typeof(Archimedes.triangulate), Tuple{Archimedes.Point2D, Archimedes.Point2D, Archimedes.Point2D}})
precompile(Tuple{typeof(IJulia.shutdown_request), ZMQ.Socket, IJulia.Msg})
precompile(Tuple{typeof(Base.getindex), Base.EnvDict, String})
precompile(Tuple{typeof(REPL.Terminals.hascolor), REPL.Terminals.TTYTerminal})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, REPL.LineEdit.Prompt}, Vararg{Base.Pair{Symbol, REPL.LineEdit.Prompt}, N} where N})
precompile(Tuple{Type{REPL.REPLHistoryProvider}, Any, Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#45#76"))}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#74#105")){REPL.LineEdit.HistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, getfield(REPL, Symbol("#65#74")){REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#251#255")){REPL.LineEdit.PrefixHistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, getfield(REPL, Symbol("#55#58")){REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(REPL.run_repl), REPL.AbstractREPL, Any})
precompile(Tuple{typeof(Base.:(==)), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, REPL.REPLDisplay{R} where R<:REPL.AbstractREPL})
precompile(Tuple{Type{REPL.LineEdit.PromptState}, REPL.Terminals.AbstractTerminal, REPL.LineEdit.Prompt, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Array{Base.GenericIOBuffer{Array{UInt8, 1}}, 1}, Int64, REPL.LineEdit.InputAreaState, Int64, Base.AbstractLock, Float64, Float64})
precompile(Tuple{typeof(REPL.LineEdit.init_state), Any, REPL.LineEdit.HistoryPrompt})
precompile(Tuple{typeof(REPL.LineEdit.init_state), Any, REPL.LineEdit.PrefixHistoryPrompt})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{typeof(REPL.LineEdit.prompt_string), Function})
precompile(Tuple{typeof(REPL.LineEdit.prompt_string), AbstractString})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(REPL.LineEdit, Symbol("#133#186")), String}, Any, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(REPL.LineEdit, Symbol("#110#163")), String}, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.ModeState})
precompile(Tuple{typeof(REPL.LineEdit.state), REPL.LineEdit.MIState, Any})
precompile(Tuple{typeof(MbedTLS_jll.__init__)})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#parse_mapping#5")){String}, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#parse_mapping#5")){String}, String, String})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{String}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Base.Generator{Base.Dict{String, Any}, getfield(Pkg.Artifacts, Symbol("#4#6")){String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}, Base.Dict{String, Union{Base.SHA1, String}}, Base.UUID})
precompile(Tuple{typeof(Base.keys), Base.Dict{String, String}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{String, Base.Dict{String, String}}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, String}, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}, Base.UUID})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Union{Base.SHA1, String}}, String, String})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{String, Base.Dict{String, String}}, Int64})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.FreeBSD, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Libdl.dlopen), String, UInt32})
precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("#64#65")){typeof(Base.isempty)}, Array{String, 1}})
precompile(Tuple{typeof(MbedTLS.f_send), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.f_recv), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.__init__)})
precompile(Tuple{typeof(HTTP.URIs.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{HTTP.URIs.RegexAndMatchData, 1}, HTTP.URIs.RegexAndMatchData})
precompile(Tuple{typeof(HTTP.Parsers.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{HTTP.Parsers.RegexAndMatchData, 1}, HTTP.Parsers.RegexAndMatchData})
precompile(Tuple{typeof(HTTP.CookieRequest.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}, 1}, Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}})
precompile(Tuple{typeof(HTTP.ConnectionRequest.__init__)})
precompile(Tuple{typeof(HTTP.Servers.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.Dict{Sockets.IPAddr, HTTP.Servers.RateLimit}, 1}, Base.Dict{Sockets.IPAddr, HTTP.Servers.RateLimit}})
precompile(Tuple{typeof(REPL.LineEdit.deactivate), REPL.LineEdit.TextInterface, REPL.LineEdit.ModeState, Any, REPL.Terminals.TextTerminal})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(REPL.LineEdit, Symbol("#111#164")), String}, Any, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##edit_splice!#17")), Bool, typeof(REPL.LineEdit.edit_splice!), Any, Base.Pair{#s828, #s827} where #s827<:Integer where #s828<:Integer, AbstractString})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(REPL, Symbol("#67#76")){REPL.LineEdit.Prompt}, String}, Any, Any})
precompile(Tuple{typeof(Base.CoreLogging.with_logger), Function, Base.CoreLogging.NullLogger})
precompile(Tuple{getfield(REPL, Symbol("#repl##kw")), NamedTuple{(:brief,), Tuple{Bool}}, typeof(REPL.repl), Base.TTY, Expr})
precompile(Tuple{typeof(REPL.lookup_doc), Expr})
precompile(Tuple{typeof(Markdown.image), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{Type{Markdown.Header{2}}, Array{Any, 1}})
precompile(Tuple{typeof(Markdown.underscore_bold), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.underscore_italic), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(REPL._trimdocs), Markdown.Header{2}, Bool})
precompile(Tuple{typeof(REPL._trimdocs), Markdown.List, Bool})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, Any})
precompile(Tuple{getfield(Base, Symbol("#foldl##kw")), NamedTuple{(:init,), Tuple{Base.IOContext{REPL.Terminals.TTYTerminal}}}, typeof(Base.foldl), Type{T} where T, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Markdown.term), Base.IOContext{REPL.Terminals.TTYTerminal}, Markdown.Header{2}, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, String, Int64}}})
precompile(Tuple{typeof(Markdown.term), Base.IOContext{REPL.Terminals.TTYTerminal}, Markdown.List, Int64})
precompile(Tuple{getfield(Markdown, Symbol("#171#172")){Int64, Array{Any, 1}}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Markdown.term), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Markdown.Paragraph, Int64})
precompile(Tuple{getfield(Markdown, Symbol("##print_wrapped#167")), Int64, String, Int64, typeof(Markdown.print_wrapped), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Function})
precompile(Tuple{typeof(Markdown.terminline), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Markdown.Italic})
precompile(Tuple{typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.print), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.SubString{String}})
precompile(Tuple{typeof(Pluto.run)})
precompile(Tuple{Type{HTTP.Handlers.Router{Symbol("##253")}}, HTTP.Handlers.RequestHandlerFunction{getfield(HTTP.Handlers, Symbol("#1#2"))}, Base.Dict{HTTP.Handlers.Route, String}, Base.Dict{String, Base.Val{x} where x}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{HTTP.Handlers.Route, Any}, Function, HTTP.Handlers.Route})
precompile(Tuple{typeof(HTTP.Handlers.gh), String})
precompile(Tuple{getfield(Pluto, Symbol("#195#202")){Pluto.ServerSession, HTTP.Handlers.Router{Symbol("##253")}, Sockets.IPv4, Base.RefValue{Function}}})
precompile(Tuple{Type{UInt16}, UInt16})
precompile(Tuple{Type{NamedTuple{(:stream, :server), T} where T<:Tuple}, Tuple{Bool, Sockets.TCPServer}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(HTTP.Handlers, Symbol("#serve##kw")), NamedTuple{(:stream, :server), Tuple{Bool, Sockets.TCPServer}}, typeof(HTTP.Handlers.serve), Function, Sockets.IPv4, UInt16})
precompile(Tuple{Type{HTTP.Handlers.StreamHandlerFunction{F} where F}, getfield(Pluto, Symbol("#196#203")){Pluto.ServerSession, HTTP.Handlers.Router{Symbol("##253")}, Base.RefValue{Function}}})
precompile(Tuple{getfield(HTTP.Servers, Symbol("#listen##kw")), NamedTuple{(:server,), Tuple{Sockets.TCPServer}}, typeof(HTTP.Servers.listen), Function, Sockets.IPv4, UInt16})
precompile(Tuple{getfield(HTTP.Servers, Symbol("##listen#1")), Nothing, Function, Sockets.TCPServer, Bool, Base.RefValue{Int64}, Nothing, Int64, Int64, Bool, typeof(HTTP.Servers.listen), getfield(HTTP.Handlers, Symbol("#4#5")){HTTP.Handlers.StreamHandlerFunction{getfield(Pluto, Symbol("#196#203")){Pluto.ServerSession, HTTP.Handlers.Router{Symbol("##253")}, Base.RefValue{Function}}}}, Sockets.IPv4, UInt16})
precompile(Tuple{typeof(HTTP.Servers.listenloop), Function, HTTP.Servers.Server{Nothing, Sockets.TCPServer}, getfield(HTTP.Servers, Symbol("#2#5")){Nothing, getfield(HTTP.Servers, Symbol("#4#7"))}, Base.RefValue{Int64}, Int64, Int64, Bool})
precompile(Tuple{getfield(HTTP.Servers, Symbol("#8#9")){getfield(HTTP.Handlers, Symbol("#4#5")){HTTP.Handlers.StreamHandlerFunction{getfield(Pluto, Symbol("#196#203")){Pluto.ServerSession, HTTP.Handlers.Router{Symbol("##253")}, Base.RefValue{Function}}}}, HTTP.Servers.Server{Nothing, Sockets.TCPServer}, Base.RefValue{Int64}, Int64, Int64, Bool, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}}})
precompile(Tuple{typeof(HTTP.Servers.handle_connection), Function, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}, HTTP.Servers.Server{Nothing, Sockets.TCPServer}, Int64, Int64})
precompile(Tuple{getfield(HTTP.Servers, Symbol("##handle_transaction#12")), Bool, typeof(HTTP.Servers.handle_transaction), getfield(HTTP.Handlers, Symbol("#4#5")){HTTP.Handlers.StreamHandlerFunction{getfield(Pluto, Symbol("#196#203")){Pluto.ServerSession, HTTP.Handlers.Router{Symbol("##253")}, Base.RefValue{Function}}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Servers.Server{Nothing, Sockets.TCPServer}})
precompile(Tuple{typeof(Base.readuntil), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, Function, Int64})
precompile(Tuple{typeof(Base.readuntil), Base.GenericIOBuffer{Array{UInt8, 1}}, typeof(HTTP.Parsers.find_end_of_header)})
precompile(Tuple{getfield(HTTP.Servers, Symbol("#13#14")){getfield(HTTP.Handlers, Symbol("#4#5")){HTTP.Handlers.StreamHandlerFunction{getfield(Pluto, Symbol("#196#203")){Pluto.ServerSession, HTTP.Handlers.Router{Symbol("##253")}, Base.RefValue{Function}}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}})
precompile(Tuple{typeof(HTTP.ConnectionPool.hashconn), Type{T} where T, String, String, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.split), String, String})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Base.SubString{String}, 1}, getfield(HTTP.Handlers, Symbol("#6#7")){HTTP.Handlers.Router{Symbol("##253")}}}})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##253")}, Base.Val{:GET}, Base.Val{()}, Base.Val{Symbol("")}})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.RequestHandlerFunction{getfield(Pluto, Symbol("#82#93")){String}}, HTTP.Messages.Request})
precompile(Tuple{typeof(Base.string), Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(Base.setproperty!), HTTP.Messages.Request, Symbol, HTTP.Messages.Response})
precompile(Tuple{typeof(Base.convert), Type{HTTP.Messages.Response}, HTTP.Messages.Response})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Int16})
precompile(Tuple{typeof(Base.string), Base.SubString{String}, String, Vararg{Union{Char, Base.SubString{String}, String}, N} where N})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#14#15")){HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Base.SubString{String}, 1}, getfield(HTTP.Handlers, Symbol("#6#7")){HTTP.Handlers.Router{Symbol("##253")}}}, Int64})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.RequestHandlerFunction{getfield(Pluto, Symbol("#serve_asset#108"))}, HTTP.Messages.Request})
precompile(Tuple{typeof(Base.string), Base.Multimedia.MIME{Symbol("text/javascript")}})
precompile(Tuple{typeof(Base.string), Base.Multimedia.MIME{Symbol("text/css")}})
precompile(Tuple{typeof(Base.string), Base.Multimedia.MIME{Symbol("image/svg+xml")}})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##253")}, Base.Val{:GET}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:websocket_url_please}})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.RequestHandlerFunction{getfield(Pluto, Symbol("#90#101")){Pluto.ServerSession}}, HTTP.Messages.Request})
precompile(Tuple{getfield(Base64, Symbol("##base64encode#3")), Nothing, typeof(Base64.base64encode), Function, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.write), Base64.Base64EncodePipe, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.unsafe_write), Base.GenericIOBuffer{Array{UInt8, 1}}, Ptr{UInt8}, Int64})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt8, UInt8, UInt8, Vararg{UInt8, N} where N})
precompile(Tuple{getfield(MsgPack, Symbol("##unpack_type#9")), Tuple{}, typeof(MsgPack.unpack_type), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt8, MsgPack.AnyType, Type{T} where T})
precompile(Tuple{getfield(Base64, Symbol("#1#2")){Base64.Base64EncodePipe}, Base64.Buffer})
precompile(Tuple{getfield(MsgPack, Symbol("#_unpack_any##kw")), NamedTuple{(:strict,), Tuple{Tuple{}}}, typeof(MsgPack._unpack_any), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt8, Type{Any}})
precompile(Tuple{getfield(MsgPack, Symbol("#unpack_type##kw")), NamedTuple{(:strict,), Tuple{Tuple{}}}, typeof(MsgPack.unpack_type), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt8, MsgPack.AnyType, Type{T} where T})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Any, Any}, String})
precompile(Tuple{typeof(Base.:(|>)), Base.Dict{Any, Any}, typeof(Pluto.decode_extension_and_addbits)})
precompile(Tuple{typeof(Pluto.decode_extension_and_addbits), String})
precompile(Tuple{typeof(Pluto.process_ws_message), Pluto.ServerSession, Base.Dict{Any, Any}, HTTP.WebSockets.WebSocket{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(Base.get!), Base.Dict{Symbol, Pluto.ClientSession}, Symbol, Pluto.ClientSession})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Base.Dict{String, String}}}}})
precompile(Tuple{getfield(Pluto, Symbol("#110#113##kw")), NamedTuple{(:initiator,), Tuple{Pluto.Initiator}}, getfield(Pluto, Symbol("#110#113")), Pluto.ServerSession, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{Bool}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Bool}, Bool, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Bool}, Tuple{Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Base.Dict{String, String}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Bool}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Bool}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Dict{String, String}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Base.Dict{String, String}}}, Int64})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Pluto.UpdateMessage})
precompile(Tuple{typeof(Base.isopen), HTTP.WebSockets.WebSocket{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(Base.setproperty!), HTTP.WebSockets.WebSocket{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Symbol, UInt8})
precompile(Tuple{typeof(Base.convert), Type{UInt8}, UInt8})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Pluto.UpdateMessage})
precompile(Tuple{typeof(Pluto.serialize_message_to_stream), Base.GenericIOBuffer{Array{UInt8, 1}}, Pluto.UpdateMessage})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Symbol}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Symbol, Any}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Symbol, Any}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{Symbol}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Symbol}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Symbol, Any}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Symbol}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Symbol}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Symbol, Any}}}, Int64})
precompile(Tuple{typeof(Pluto.pack), Base.GenericIOBuffer{Array{UInt8, 1}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(MsgPack.pack), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(MsgPack.pack), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(MsgPack.pack), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool})
precompile(Tuple{typeof(MsgPack.pack), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.write), HTTP.WebSockets.WebSocket{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, String, Array{UInt8, 1}})
precompile(Tuple{getfield(Base, Symbol("#cat_t##kw")), NamedTuple{(:dims,), Tuple{Base.Val{1}}}, typeof(Base.cat_t), Type{UInt8}, UInt8, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat_t#110")), Base.Val{1}, typeof(Base.cat_t), Type{UInt8}, UInt8, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._cat_t), Base.Val{1}, Type{T} where T, UInt8, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.map), typeof(Base.cat_size), Tuple{UInt8, UInt8, Base.ReinterpretArray{UInt8, 1, UInt16, Array{UInt16, 1}}, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.cat_similar), UInt8, Type{T} where T, Tuple{Int64}})
precompile(Tuple{Type{Array{UInt8, N} where N}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.__cat), Array{UInt8, 1}, Tuple{Int64}, Tuple{Bool}, UInt8, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, UInt8})
precompile(Tuple{typeof(Base.cat_indices), Base.ReinterpretArray{UInt8, 1, UInt16, Array{UInt16, 1}}, Int64})
precompile(Tuple{typeof(Base.cat_size), Base.ReinterpretArray{UInt8, 1, UInt16, Array{UInt16, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{UInt8, 1}, Base.ReinterpretArray{UInt8, 1, UInt16, Array{UInt16, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.cat_indices), Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{UInt8, 1}, Array{UInt8, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Pluto.ClientSession}})
precompile(Tuple{getfield(Pluto, Symbol("#165#167##kw")), NamedTuple{(:initiator,), Tuple{Pluto.Initiator}}, getfield(Pluto, Symbol("#165#167")), Pluto.ServerSession, Base.Dict{Any, Any}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Base.Dict{K, V} where V where K, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Array{Base.Dict{K, V} where V where K, 1}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.Dict{Symbol, Array{Base.Dict{K, V} where V where K, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Symbol, Array{Base.Dict{K, V} where V where K, 1}}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Symbol, Array{Base.Dict{K, V} where V where K, 1}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Symbol}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Symbol, Array{Base.Dict{K, V} where V where K, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Array{Base.Dict{K, V} where V where K, 1}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Symbol, Array{Base.Dict{K, V} where V where K, 1}}}}, Int64})
precompile(Tuple{typeof(MsgPack.pack), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Symbol, Array{Base.Dict{K, V} where V where K, 1}}})
precompile(Tuple{getfield(Pluto, Symbol("#115#117##kw")), NamedTuple{(:initiator,), Tuple{Pluto.Initiator}}, getfield(Pluto, Symbol("#115#117")), Pluto.ServerSession, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Symbol, String}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Symbol, String}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Symbol}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Symbol, String}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Symbol, String}}}, Int64})
precompile(Tuple{typeof(MsgPack.pack), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Symbol, String}})
precompile(Tuple{getfield(Pluto, Symbol("#183#186##kw")), NamedTuple{(:initiator,), Tuple{Pluto.Initiator}}, getfield(Pluto, Symbol("#183#186")), Pluto.ServerSession, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{getfield(Base, Symbol("#sort##kw")), NamedTuple{(:by,), Tuple{getfield(Pluto, Symbol("#185#187"))}}, typeof(Base.sort), Array{Any, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Int64}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Array{Any, 1}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{Int64}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Int64}, Tuple{Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Array{Any, 1}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Int64}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Array{Any, 1}}}, Int64})
precompile(Tuple{typeof(MsgPack.pack), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(MsgPack.pack), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##253")}, Base.Val{:GET}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:new}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Sort.MergeSortAlg, getfield(Pluto, Symbol("#35#37")){Pluto.NotebookTopology}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Pluto.Cell}})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.RequestHandlerFunction{getfield(Pluto, Symbol("#serve_newfile#104")){Pluto.ServerSession}}, HTTP.Messages.Request})
precompile(Tuple{typeof(Base.:(*)), String, String, String})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(Pluto.ExpressionExplorer.compute_usings), LineNumberNode})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(Pluto.ExpressionExplorer.compute_usings), Nothing})
precompile(Tuple{typeof(Base.union!), Base.Set{Expr}, Base.Set{Expr}, Base.Set{Expr}})
precompile(Tuple{typeof(Pluto.ExpressionExplorer.explore!), Expr, Pluto.ExpressionExplorer.ScopeState})
precompile(Tuple{Type{Pluto.ExpressionExplorer.SymbolsState}, Base.Set{Symbol}, Base.Set{Symbol}, Base.Set{Symbol}, Base.Dict{Array{Symbol, 1}, Pluto.ExpressionExplorer.SymbolsState}})
precompile(Tuple{getfield(Base, Symbol("#mapfoldl##kw")), NamedTuple{(:init,), Tuple{Pluto.ExpressionExplorer.SymbolsState}}, typeof(Base.mapfoldl), Function, Function, Array{Any, 1}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Pluto.ExpressionExplorer, Symbol("#30#38")){Pluto.ExpressionExplorer.ScopeState}, typeof(Base.union!), NamedTuple{(:init,), Tuple{Pluto.ExpressionExplorer.SymbolsState}}, Array{Any, 1}})
precompile(Tuple{getfield(Pluto.ExpressionExplorer, Symbol("#30#38")){Pluto.ExpressionExplorer.ScopeState}, LineNumberNode})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Pluto.ExpressionExplorer.SymbolsState}, getfield(Pluto.ExpressionExplorer, Symbol("#1#5"))}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Pluto.ExpressionExplorer.SymbolsState}, getfield(Pluto.ExpressionExplorer, Symbol("#1#5"))}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Pluto.ExpressionExplorer.SymbolsState}, getfield(Pluto.ExpressionExplorer, Symbol("#2#6"))}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Pluto.ExpressionExplorer.SymbolsState}, getfield(Pluto.ExpressionExplorer, Symbol("#2#6"))}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Pluto.ExpressionExplorer.SymbolsState}, getfield(Pluto.ExpressionExplorer, Symbol("#3#7"))}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Pluto.ExpressionExplorer.SymbolsState}, getfield(Pluto.ExpressionExplorer, Symbol("#3#7"))}, Int64})
precompile(Tuple{typeof(Base.union!), Base.Set{Array{Symbol, 1}}, Base.Set{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Pluto.ExpressionExplorer.SymbolsState}, getfield(Pluto.ExpressionExplorer, Symbol("#4#8"))}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Pluto.ExpressionExplorer.SymbolsState}, getfield(Pluto.ExpressionExplorer, Symbol("#4#8"))}, Int64})
precompile(Tuple{typeof(Base.union!), Base.Dict{Array{Symbol, 1}, Pluto.ExpressionExplorer.SymbolsState}, Base.Dict{Array{Symbol, 1}, Pluto.ExpressionExplorer.SymbolsState}})
precompile(Tuple{getfield(Pluto.ExpressionExplorer, Symbol("#30#38")){Pluto.ExpressionExplorer.ScopeState}, Nothing})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Dict{Pluto.Cell, Pluto.ExpressionExplorer.SymbolsState}, getfield(Pluto, Symbol("#43#45"))}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Dict{Pluto.Cell, Pluto.ExpressionExplorer.SymbolsState}, getfield(Pluto, Symbol("#43#45"))}, Int64})
precompile(Tuple{typeof(Base.union), Base.Dict{Array{Symbol, 1}, Pluto.ExpressionExplorer.SymbolsState}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Set{Array{Symbol, 1}}, getfield(Pluto, Symbol("#46#48")){Pluto.NotebookTopology}}})
precompile(Tuple{typeof(Base.union!), Base.Set{Symbol}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Set{Array{Symbol, 1}}, getfield(Pluto, Symbol("#47#49")){Pluto.NotebookTopology}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(|>)), Tuple{Array{Array{Symbol, 1}, 1}, Base.RefValue{typeof(Pluto.ExpressionExplorer.join_funcname_parts)}}}})
precompile(Tuple{typeof(Base.push!), Base.Set{Symbol}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Set{Array{Symbol, 1}}, getfield(Pluto, Symbol("#50#52")){Pluto.NotebookTopology}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Set{Array{Symbol, 1}}, getfield(Pluto, Symbol("#51#53")){Pluto.NotebookTopology}}})
precompile(Tuple{getfield(Base, Symbol("##open#287")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Pluto, Symbol("#6#7")){Pluto.Notebook}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.print), Base.IOStream, String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.IOStream, Char})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Iterators.Reverse{Array{Pluto.Cell, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(Pluto, Symbol("#dfs#36")){Bool, Pluto.Notebook, Pluto.NotebookTopology, Array{Pluto.Cell, 1}, Array{Pluto.Cell, 1}, Base.Dict{Pluto.Cell, Pluto.ReactivityError}}, Tuple{Array{Pluto.Cell, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(Pluto, Symbol("#dfs#36")){Bool, Pluto.Notebook, Pluto.NotebookTopology, Array{Pluto.Cell, 1}, Array{Pluto.Cell, 1}, Base.Dict{Pluto.Cell, Pluto.ReactivityError}}, Tuple{Array{Pluto.Cell, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(Pluto, Symbol("#dfs#36")){Bool, Pluto.Notebook, Pluto.NotebookTopology, Array{Pluto.Cell, 1}, Array{Pluto.Cell, 1}, Base.Dict{Pluto.Cell, Pluto.ReactivityError}}, Tuple{Array{Pluto.Cell, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.combine_eltypes), Function, Tuple{Array{Pluto.Cell, 1}}})
precompile(Tuple{typeof(Base._grow!), Function, Array{Pluto.Cell, 1}, Tuple{Array{Pluto.Cell, 1}, Base.Iterators.Reverse{Array{Pluto.Cell, 1}}}})
precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("#89#90")){typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Pluto.Cell}}, Array{Pluto.Cell, 1}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Base, Symbol("#89#90")){typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Pluto.Cell}}, typeof(Base.push!), Array{Pluto.Cell, 1}, Array{Pluto.Cell, 1}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Base, Symbol("#89#90")){typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Pluto.Cell}}, typeof(Base.push!), Base.Iterators.Reverse{Array{Pluto.Cell, 1}}, Array{Pluto.Cell, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(Pluto, Symbol("#dfs#36")){Bool, Pluto.Notebook, Pluto.NotebookTopology, Array{Pluto.Cell, 1}, Array{Pluto.Cell, 1}, Base.Dict{Pluto.Cell, Pluto.ReactivityError}}, Tuple{Base.Broadcast.Extruded{Array{Pluto.Cell, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Array{Pluto.Cell, 1}}})
precompile(Tuple{typeof(Base.setindex!), Array{Array{Pluto.Cell, 1}, 1}, Array{Pluto.Cell, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Array{Pluto.Cell, 1}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(Pluto, Symbol("#dfs#36")){Bool, Pluto.Notebook, Pluto.NotebookTopology, Array{Pluto.Cell, 1}, Array{Pluto.Cell, 1}, Base.Dict{Pluto.Cell, Pluto.ReactivityError}}, Tuple{Base.Broadcast.Extruded{Array{Pluto.Cell, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base._grow!), Function, Array{Pluto.Cell, 1}, Tuple{Array{Pluto.Cell, 1}, Base.KeySet{Pluto.Cell, Base.Dict{Pluto.Cell, Pluto.ReactivityError}}}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Base, Symbol("#89#90")){typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Pluto.Cell}}, typeof(Base.push!), Base.KeySet{Pluto.Cell, Base.Dict{Pluto.Cell, Pluto.ReactivityError}}, Array{Pluto.Cell, 1}})
precompile(Tuple{getfield(Distributed, Symbol("#155#156")){Module, Expr}})
precompile(Tuple{typeof(Base.MainInclude.include), String})
precompile(Tuple{Type{Base.Dict{Base.UUID, WeakRef}}})
precompile(Tuple{typeof(Base.in), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.filter), Base.Fix2{typeof(Base.in), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.:(|>)), Array{Symbol, 1}, typeof(Base.first)})
precompile(Tuple{typeof(Base.methods), Any})
precompile(Tuple{typeof(Base.getproperty), Base.MethodList, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{Method, 1}, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.TTY, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Bool}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.TTY}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Bool}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.TTY}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Tuple{Int64, Int64}}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.TTY}, Base.Pair{Symbol, Bool}})
precompile(Tuple{typeof(Base.vect), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Base.Multimedia.MIME{Symbol("image/png")}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Multimedia.MIME{Symbol("image/png")}, Base.Multimedia.MIME{Symbol("image/jpg")}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Multimedia.MIME{Symbol("image/jpg")}, Base.Multimedia.MIME{Symbol("image/jpeg")}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Multimedia.MIME{Symbol("image/jpeg")}, Base.Multimedia.MIME{Symbol("image/bmp")}, Vararg{Any, N} where N})
precompile(Tuple{Type{Array{Base.Multimedia.MIME{mime} where mime, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Multimedia.MIME{mime} where mime, 1}, Tuple{Base.Multimedia.MIME{Symbol("image/svg+xml")}, Base.Multimedia.MIME{Symbol("image/png")}, Base.Multimedia.MIME{Symbol("image/jpg")}, Base.Multimedia.MIME{Symbol("image/jpeg")}, Base.Multimedia.MIME{Symbol("image/bmp")}, Base.Multimedia.MIME{Symbol("image/gif")}}})
precompile(Tuple{typeof(Base.vcat), Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}, Base.Multimedia.MIME{Symbol("text/html")}, Array{Base.Multimedia.MIME{mime} where mime, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("#cat##kw")), NamedTuple{(:dims,), Tuple{Base.Val{1}}}, typeof(Base.cat), Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat#111")), Base.Val{1}, typeof(Base.cat), Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._cat), Base.Val{1}, Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}, Base.Multimedia.MIME{Symbol("text/html")}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), Base.Multimedia.MIME{Symbol("text/html")}, Array{Base.Multimedia.MIME{mime} where mime, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), Array{Base.Multimedia.MIME{mime} where mime, 1}, Base.Multimedia.MIME{Symbol("text/latex")}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("#cat_t##kw")), NamedTuple{(:dims,), Tuple{Base.Val{1}}}, typeof(Base.cat_t), Type{Base.Multimedia.MIME{mime} where mime}, Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat_t#110")), Base.Val{1}, typeof(Base.cat_t), Type{Base.Multimedia.MIME{mime} where mime}, Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._cat_t), Base.Val{1}, Type{S} where S, Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.map), typeof(Base.cat_size), Tuple{Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}, Base.Multimedia.MIME{Symbol("text/html")}, Array{Base.Multimedia.MIME{mime} where mime, 1}, Base.Multimedia.MIME{Symbol("text/latex")}, Base.Multimedia.MIME{Symbol("text/plain")}}})
precompile(Tuple{typeof(Base.cat_similar), Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}, Type{T} where T, Tuple{Int64}})
precompile(Tuple{Type{Array{Base.Multimedia.MIME{mime} where mime, N} where N}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Multimedia.MIME{mime} where mime}})
precompile(Tuple{typeof(Base.__cat), Array{Base.Multimedia.MIME{mime} where mime, 1}, Tuple{Int64}, Tuple{Bool}, Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Base.Multimedia.MIME{mime} where mime, 1, Array{Base.Multimedia.MIME{mime} where mime, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Base.Multimedia.MIME{mime} where mime, 1, Array{Base.Multimedia.MIME{mime} where mime, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(Base.cat_indices), Array{Base.Multimedia.MIME{mime} where mime, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{Base.Multimedia.MIME{mime} where mime, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Multimedia.MIME{mime} where mime, 1}, Array{Base.Multimedia.MIME{mime} where mime, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Base.Multimedia.MIME{mime} where mime, 1, Array{Base.Multimedia.MIME{mime} where mime, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Multimedia.MIME{Symbol("text/latex")}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Base.Multimedia.MIME{mime} where mime, 1, Array{Base.Multimedia.MIME{mime} where mime, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Multimedia.MIME{Symbol("text/plain")}})
precompile(Tuple{typeof(PlutoRunner.set_current_module), Symbol})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.TTY}, Base.Pair{Symbol, Module}})
precompile(Tuple{typeof(Pluto.WorkspaceManager.cd_workspace), Pluto.WorkspaceManager.Workspace, String})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, UInt64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, UInt64}, Int64, Int64})
precompile(Tuple{Type{WeakRef}, Any})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.UUID, WeakRef}, WeakRef, Base.UUID})
precompile(Tuple{typeof(PlutoRunner.formatted_result_of), Base.UUID, Bool})
precompile(Tuple{typeof(PlutoRunner.format_output), Nothing})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Union{Array{UInt8, 1}, String}, Base.Multimedia.MIME{mime} where mime}}, Tuple{String, Base.Multimedia.MIME{Symbol("text/plain")}}})
precompile(Tuple{Type{NamedTuple{(:output_formatted, :errored, :interrupted, :runtime), T} where T<:Tuple}, Tuple{Tuple{String, Base.Multimedia.MIME{Symbol("text/plain")}}, Bool, Bool, UInt64}})
precompile(Tuple{typeof(Base.convert), Type{NamedTuple{(:output_formatted, :errored, :interrupted, :runtime), Tuple{Tuple{Union{Array{UInt8, 1}, String}, Base.Multimedia.MIME{mime} where mime}, Bool, Bool, Union{Base.Missing, UInt64}}}}, NamedTuple{(:output_formatted, :errored, :interrupted, :runtime), Tuple{Tuple{String, Base.Multimedia.MIME{Symbol("text/plain")}}, Bool, Bool, UInt64}}})
precompile(Tuple{typeof(Base.convert), Type{NamedTuple{(:output_formatted, :errored, :interrupted, :runtime), Tuple{Tuple{Union{Array{UInt8, 1}, String}, Base.Multimedia.MIME{mime} where mime}, Bool, Bool, Union{Base.Missing, UInt64}}}}, NamedTuple{(:output_formatted, :errored, :interrupted, :runtime), Tuple{Tuple{Union{Array{UInt8, 1}, String}, Base.Multimedia.MIME{mime} where mime}, Bool, Bool, Union{Base.Missing, UInt64}}}})
precompile(Tuple{typeof(Base.setproperty!), Pluto.Cell, Symbol, UInt64})
precompile(Tuple{typeof(Base.convert), Type{Union{Base.Missing, UInt64}}, UInt64})
precompile(Tuple{typeof(Base.setproperty!), Pluto.Cell, Symbol, String})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Array{UInt8, 1}, String}}, String})
precompile(Tuple{typeof(Base.setproperty!), Pluto.Cell, Symbol, Base.Multimedia.MIME{Symbol("text/plain")}})
precompile(Tuple{typeof(Base.setproperty!), Pluto.Cell, Symbol, Bool})
precompile(Tuple{getfield(Pluto, Symbol("#71#73")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Pluto.ServerSession, Pluto.Notebook, Pluto.NotebookTopology, Pluto.NotebookTopology, Array{Pluto.Cell, 1}}})
precompile(Tuple{getfield(Pluto, Symbol("##run_reactive!#54")), Function, typeof(Pluto.run_reactive!), Pluto.ServerSession, Pluto.Notebook, Pluto.NotebookTopology, Pluto.NotebookTopology, Array{Pluto.Cell, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(Pluto, Symbol("#dfs#36")){Bool, Pluto.Notebook, Pluto.NotebookTopology, Array{Pluto.Cell, 1}, Array{Pluto.Cell, 1}, Base.Dict{Pluto.Cell, Pluto.ReactivityError}}, Tuple{Base.Broadcast.Extruded{Array{Pluto.Cell, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Union{Nothing, Array{Pluto.Cell, 1}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Pluto.Cell, 1}, getfield(Pluto, Symbol("#55#62")){Pluto.NotebookTopology}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Pluto.Cell, 1}, getfield(Pluto, Symbol("#56#63")){Pluto.NotebookTopology}}})
precompile(Tuple{typeof(Base.union!), Base.Set{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Pluto.Cell, 1}, getfield(Pluto, Symbol("#57#64")){Pluto.NotebookTopology}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Pluto.Cell, 1}, getfield(Pluto, Symbol("#58#65")){Pluto.NotebookTopology}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.KeySet{Pluto.Cell, Base.Dict{Pluto.Cell, Pluto.ReactivityError}}, getfield(Pluto, Symbol("#59#66")){Pluto.NotebookTopology}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.KeySet{Pluto.Cell, Base.Dict{Pluto.Cell, Pluto.ReactivityError}}, getfield(Pluto, Symbol("#60#67")){Pluto.NotebookTopology}}})
precompile(Tuple{typeof(Base.union), Base.Set{Expr}, Base.Set{Expr}})
precompile(Tuple{getfield(Pluto.WorkspaceManager, Symbol("#delete_vars##kw")), NamedTuple{(:to_run,), Tuple{Array{Pluto.Cell, 1}}}, typeof(Pluto.WorkspaceManager.delete_vars), Pluto.Notebook, Base.Set{Symbol}, Base.Set{Array{Symbol, 1}}, Base.Set{Expr}})
precompile(Tuple{getfield(Pluto.WorkspaceManager, Symbol("#create_workspaceprocess##kw")), NamedTuple{(:environment_path,), Tuple{Nothing}}, typeof(Pluto.WorkspaceManager.create_workspaceprocess)})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, Symbol}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{getfield(Pluto.SessionActions, Symbol("#6#7")){Pluto.ServerSession}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Base.UUID}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Base.UUID}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, String}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Base.UUID}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, String}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{Base.UUID}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.UUID}, Base.UUID, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Base.UUID}, Tuple{Base.Pair{Symbol, Base.UUID}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Base.UUID}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Base.UUID}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Base.UUID}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Base.Dict{Symbol, Any}}, Base.ValueIterator{Base.Dict{Base.UUID, Pluto.Notebook}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}, Base.Generator{Base.ValueIterator{Base.Dict{Base.UUID, Pluto.Notebook}}, getfield(Pluto, Symbol("#22#23"))}, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Array{Base.Dict{Symbol, Any}, 1}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.Dict{Symbol, Array{Base.Dict{Symbol, Any}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Symbol, Array{Base.Dict{Symbol, Any}, 1}}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Symbol, Array{Base.Dict{Symbol, Any}, 1}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Symbol}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Symbol, Array{Base.Dict{Symbol, Any}, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Array{Base.Dict{Symbol, Any}, 1}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Symbol, Array{Base.Dict{Symbol, Any}, 1}}}}, Int64})
precompile(Tuple{typeof(MsgPack.pack), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Symbol, Array{Base.Dict{Symbol, Any}, 1}}})
precompile(Tuple{typeof(MsgPack.pack), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(MsgPack.pack), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UUID})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.Cmd}, Tuple{String}, Tuple{Base.SubString{String}}, Tuple{Base.Cmd}, Tuple{Base.SubString{String}}}})
precompile(Tuple{getfield(HTTP.Servers, Symbol("#13#14")){getfield(HTTP.Handlers, Symbol("#4#5")){HTTP.Handlers.StreamHandlerFunction{getfield(Pluto, Symbol("#196#203")){Pluto.ServerSession, HTTP.Handlers.Router{Symbol("##253")}, Base.RefValue{Function}}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##253")}, Base.Val{:GET}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:edit}})
precompile(Tuple{typeof(Base.get), Base.Dict{Base.UUID, Pluto.Notebook}, Base.UUID, Nothing})
precompile(Tuple{getfield(Pluto, Symbol("#110#113##kw")), NamedTuple{(:initiator,), Tuple{Pluto.Initiator}}, getfield(Pluto, Symbol("#110#113")), Pluto.ServerSession, Base.Dict{Any, Any}, Pluto.Notebook})
precompile(Tuple{typeof(Base.string), Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(Pluto, Symbol("#160#163##kw")), NamedTuple{(:initiator,), Tuple{Pluto.Initiator}}, getfield(Pluto, Symbol("#160#163")), Pluto.ServerSession, Base.Dict{Any, Any}, Pluto.Notebook})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.Dict{Symbol, Array{Base.Dict{Symbol, String}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Symbol, Array{Base.Dict{Symbol, String}, 1}}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Symbol, Array{Base.Dict{Symbol, String}, 1}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Symbol}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Symbol, Array{Base.Dict{Symbol, String}, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Array{Base.Dict{Symbol, String}, 1}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Symbol, Array{Base.Dict{Symbol, String}, 1}}}}, Int64})
precompile(Tuple{typeof(MsgPack.pack), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Symbol, Array{Base.Dict{Symbol, String}, 1}}})
precompile(Tuple{getfield(Pluto, Symbol("#157#159##kw")), NamedTuple{(:initiator,), Tuple{Pluto.Initiator}}, getfield(Pluto, Symbol("#157#159")), Pluto.ServerSession, Base.Dict{Any, Any}, Pluto.Notebook, Pluto.Cell})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.Multimedia.MIME{Symbol("text/plain")}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("text/plain")}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("text/plain")}}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Nothing}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("text/plain")}}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Nothing}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{Base.Multimedia.MIME{Symbol("text/plain")}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Multimedia.MIME{Symbol("text/plain")}}, Base.Multimedia.MIME{Symbol("text/plain")}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Base.Multimedia.MIME{Symbol("text/plain")}}, Tuple{Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("text/plain")}}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Nothing}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Base.Multimedia.MIME{Symbol("text/plain")}}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Base.Multimedia.MIME{Symbol("text/plain")}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("text/plain")}}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Nothing}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Nothing, Symbol})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Bool}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, UInt64}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Base.Dict{Symbol, Any}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, UInt64}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Base.Dict{Symbol, Any}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Bool}, Tuple{Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, UInt64}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Base.Dict{Symbol, Any}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Bool}, Type{Symbol}, Type{Integer}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Integer}, Base.Dict{Symbol, Bool}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Integer}, UInt64, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Integer}, Tuple{Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, UInt64}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Base.Dict{Symbol, Any}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Integer}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Integer}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, UInt64, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, UInt64}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Base.Dict{Symbol, Any}}}, Int64})
precompile(Tuple{typeof(MsgPack.pack), Base.GenericIOBuffer{Array{UInt8, 1}}, Nothing})
precompile(Tuple{typeof(MsgPack.pack), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/plain")}})
precompile(Tuple{typeof(MsgPack.pack), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Bool}}}})
precompile(Tuple{getfield(Pluto, Symbol("#151#153##kw")), NamedTuple{(:initiator,), Tuple{Pluto.Initiator}}, getfield(Pluto, Symbol("#151#153")), Pluto.ServerSession, Base.Dict{Any, Any}, Pluto.Notebook, Pluto.Cell})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, String}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Bool}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Bool}}, Int64})
precompile(Tuple{typeof(Serialization.serialize), Distributed.ClusterSerializer{Sockets.TCPSocket}, Any})
precompile(Tuple{getfield(Distributed, Symbol("##remotecall#141")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Distributed.remotecall), Function, Int64, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Distributed.remotecall), Function, Distributed.Worker, Module, Vararg{Any, N} where N})
precompile(Tuple{getfield(Distributed, Symbol("##remotecall#140")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Distributed.remotecall), Function, Distributed.Worker, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Distributed.serialize_msg), Distributed.ClusterSerializer{Sockets.TCPSocket}, Distributed.CallMsg{:call}})
precompile(Tuple{typeof(Serialization.serialize), Distributed.ClusterSerializer{Sockets.TCPSocket}, Tuple{Module, Expr}})
precompile(Tuple{typeof(Base.wait), Distributed.Future})
precompile(Tuple{getfield(Distributed, Symbol("##remotecall_fetch#146")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Distributed.remotecall_fetch), Function, Int64, Distributed.RRID, Vararg{Any, N} where N})
precompile(Tuple{typeof(Distributed.remotecall_fetch), Function, Distributed.Worker, Distributed.RRID, Vararg{Any, N} where N})
precompile(Tuple{getfield(Distributed, Symbol("##remotecall_fetch#143")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Distributed.remotecall_fetch), Function, Distributed.Worker, Distributed.RRID, Vararg{Any, N} where N})
precompile(Tuple{typeof(Serialization.serialize), Distributed.ClusterSerializer{Sockets.TCPSocket}, Tuple{Distributed.RRID, Int64}})
precompile(Tuple{typeof(Base.put!), Distributed.RemoteValue, Nothing})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Nothing})
precompile(Tuple{getfield(Pluto.WorkspaceManager, Symbol("#2#3")){Int64}})
precompile(Tuple{typeof(Serialization.serialize), Distributed.ClusterSerializer{Sockets.TCPSocket}, Base.Dict{Symbol, Nothing}})
precompile(Tuple{typeof(Distributed.finalize_ref), Distributed.Future})
precompile(Tuple{typeof(Base.isequal), Distributed.Future, Distributed.Future})
precompile(Tuple{getfield(Base, Symbol("#501#502")){Base.WeakKeyDict{Distributed.AbstractRemoteRef, Nothing}}, Distributed.Future})
precompile(Tuple{typeof(Serialization.serialize), Distributed.ClusterSerializer{Sockets.TCPSocket}, Base.Dict{Array{Symbol, 1}, Nothing}})
precompile(Tuple{typeof(Serialization.serialize), Distributed.ClusterSerializer{Sockets.TCPSocket}, Base.Dict{Expr, Nothing}})
precompile(Tuple{typeof(Serialization.serialize), Distributed.ClusterSerializer{Sockets.TCPSocket}, Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.RequestHandlerFunction{getfield(Pluto, Symbol("#86#97"))}, HTTP.Messages.Request})
precompile(Tuple{typeof(Pluto.format_path_completion), REPL.REPLCompletions.PathCompletion})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Pluto.format_path_completion), Tuple{Base.Broadcast.Extruded{Array{REPL.REPLCompletions.Completion, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{String}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Pluto.format_path_completion), Tuple{Base.Broadcast.Extruded{Array{REPL.REPLCompletions.Completion, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("#sort##kw")), NamedTuple{(:by,), Tuple{getfield(Pluto, Symbol("#185#187"))}}, typeof(Base.sort), Array{String, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{String, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Array{String, 1}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Array{String, 1}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Int64}, Tuple{Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Array{String, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{String, 1}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Array{String, 1}}}, Int64})
precompile(Tuple{typeof(MsgPack.pack), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{getfield(Pluto, Symbol("#168#170##kw")), NamedTuple{(:initiator,), Tuple{Pluto.Initiator}}, getfield(Pluto, Symbol("#168#170")), Pluto.ServerSession, Base.Dict{Any, Any}, Pluto.Notebook})
precompile(Tuple{getfield(Base, Symbol("#62#63")){typeof(Base.Filesystem.abspath), typeof(Pluto.tryexpanduser)}, String})
precompile(Tuple{typeof(Pluto.SessionActions.move), Pluto.ServerSession, Pluto.Notebook, String})
precompile(Tuple{typeof(Pluto.only_versions_differ), String, String})
precompile(Tuple{typeof(Base.setproperty!), Pluto.Notebook, Symbol, String})
precompile(Tuple{typeof(Base.convert), Type{AbstractString}, String})
precompile(Tuple{typeof(Base.Filesystem.rm), String})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, NamedTuple{(:success, :reason), Tuple{Bool, String}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, NamedTuple{(:success, :reason), Tuple{Bool, String}}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, NamedTuple{(:success, :reason), Tuple{Bool, String}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Symbol}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, NamedTuple{(:success, :reason), Tuple{Bool, String}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, NamedTuple{(:success, :reason), Tuple{Bool, String}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, NamedTuple{(:success, :reason), Tuple{Bool, String}}}}, Int64})
precompile(Tuple{getfield(MsgPack, Symbol("##s13#1")), Any, Any, Any})
precompile(Tuple{typeof(MsgPack.pack), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:success, :reason), Tuple{Bool, String}}})
precompile(Tuple{getfield(Pluto, Symbol("#188#190##kw")), NamedTuple{(:initiator,), Tuple{Pluto.Initiator}}, getfield(Pluto, Symbol("#188#190")), Pluto.ServerSession, Base.Dict{Any, Any}, Pluto.Notebook})
precompile(Tuple{typeof(Distributed.remotecall_fetch), Function, Distributed.Worker, Module, Vararg{Any, N} where N})
precompile(Tuple{getfield(Distributed, Symbol("##remotecall_fetch#143")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Distributed.remotecall_fetch), Function, Distributed.Worker, Module, Vararg{Any, N} where N})
precompile(Tuple{Type{Array{String, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{String, 1}, Distributed.ClusterSerializer{Sockets.TCPSocket}})
precompile(Tuple{typeof(Serialization.deserialize), Distributed.ClusterSerializer{Sockets.TCPSocket}, DataType})
precompile(Tuple{typeof(Base.put!), Distributed.RemoteValue, Tuple{Array{String, 1}, Base.UnitRange{Int64}, Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Array{String, 1}, Base.UnitRange{Int64}, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{String, 1}, Base.UnitRange{Int64}, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{String, 1}, Base.UnitRange{Int64}, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(Base.hashindex), Distributed.RRID, Int64})
precompile(Tuple{typeof(Base.isequal), Distributed.RRID, Distributed.RRID})
precompile(Tuple{getfield(Pluto, Symbol("#135#137##kw")), NamedTuple{(:initiator,), Tuple{Pluto.Initiator}}, getfield(Pluto, Symbol("#135#137")), Pluto.ServerSession, Base.Dict{Any, Any}, Pluto.Notebook, Pluto.Cell})
precompile(Tuple{getfield(Pluto, Symbol("#change_remote_cellinput!##kw")), NamedTuple{(:initiator,), Tuple{Pluto.Initiator}}, typeof(Pluto.change_remote_cellinput!), Pluto.ServerSession, Pluto.Notebook, Pluto.Cell, String})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Any, Any}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Symbol}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(MsgPack.pack), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.count), Function, Array{Any, 1}})
precompile(Tuple{typeof(Base._simple_count), getfield(Pluto, Symbol("#30#31")), Array{Any, 1}})
precompile(Tuple{typeof(Base.CoreLogging.with_logger), Function, Logging.ConsoleLogger})
precompile(Tuple{typeof(Base.convert), Type{Array{#s129, 1} where #s129<:Integer}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(Pluto.ExpressionExplorer.compute_usings), Expr})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(Pluto.ExpressionExplorer.compute_usings), String})
precompile(Tuple{getfield(Pluto.ExpressionExplorer, Symbol("#30#38")){Pluto.ExpressionExplorer.ScopeState}, Expr})
precompile(Tuple{getfield(Pluto.ExpressionExplorer, Symbol("#30#38")){Pluto.ExpressionExplorer.ScopeState}, String})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Pluto.Cell, 1}, getfield(Pluto, Symbol("#55#62")){Pluto.NotebookTopology}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Pluto.Cell, 1}, getfield(Pluto, Symbol("#56#63")){Pluto.NotebookTopology}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Pluto.Cell, 1}, getfield(Pluto, Symbol("#57#64")){Pluto.NotebookTopology}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Pluto.Cell, 1}, getfield(Pluto, Symbol("#58#65")){Pluto.NotebookTopology}}, Int64})
precompile(Tuple{typeof(Base.union), Base.Set{Expr}})
precompile(Tuple{typeof(Serialization.serialize), Distributed.ClusterSerializer{Sockets.TCPSocket}, UInt128})
precompile(Tuple{typeof(Serialization.deserialize), Distributed.ClusterSerializer{Sockets.TCPSocket}, Type{UnionAll}})
precompile(Tuple{typeof(Base.put!), Distributed.RemoteValue, NamedTuple{(:output_formatted, :errored, :interrupted, :runtime), Tuple{Tuple{Union{Array{UInt8, 1}, String}, Base.Multimedia.MIME{mime} where mime}, Bool, Bool, Union{Base.Missing, UInt64}}}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, NamedTuple{(:output_formatted, :errored, :interrupted, :runtime), Tuple{Tuple{Union{Array{UInt8, 1}, String}, Base.Multimedia.MIME{mime} where mime}, Bool, Bool, Union{Base.Missing, UInt64}}}})
precompile(Tuple{typeof(Base.setproperty!), Pluto.Cell, Symbol, Base.Missing})
precompile(Tuple{typeof(Base.setproperty!), Pluto.Cell, Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.stacktrace+json")}})
precompile(Tuple{typeof(Base.:(|)), Bool, Bool})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.stacktrace+json")}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.stacktrace+json")}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.stacktrace+json")}}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Nothing}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.stacktrace+json")}}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Nothing}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{Base.Multimedia.MIME{Symbol("application/vnd.pluto.stacktrace+json")}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.stacktrace+json")}}, Base.Multimedia.MIME{Symbol("application/vnd.pluto.stacktrace+json")}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.stacktrace+json")}}, Tuple{Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.stacktrace+json")}}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Nothing}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.stacktrace+json")}}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.stacktrace+json")}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.stacktrace+json")}}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Nothing}}, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Base.Missing}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Base.Dict{Symbol, Any}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Base.Missing}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Base.Dict{Symbol, Any}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Bool}, Tuple{Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Base.Missing}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Base.Dict{Symbol, Any}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Bool}, Type{Symbol}, Type{Union{Base.Missing, Bool}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Union{Base.Missing, Bool}}, Base.Dict{Symbol, Bool}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Union{Base.Missing, Bool}}, Base.Missing, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Union{Base.Missing, Bool}}, Tuple{Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Base.Missing}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Base.Dict{Symbol, Any}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Union{Base.Missing, Bool}}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Union{Base.Missing, Bool}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Base.Missing}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Base.Dict{Symbol, Any}}}, Int64})
precompile(Tuple{typeof(MsgPack.pack), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("application/vnd.pluto.stacktrace+json")}})
precompile(Tuple{typeof(MsgPack.pack), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Missing})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Expr})
precompile(Tuple{typeof(Base.hash), Base.Pair{Int64, Expr}, UInt64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(Pluto.ExpressionExplorer.compute_usings), Symbol})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(Pluto.ExpressionExplorer.compute_usings), QuoteNode})
precompile(Tuple{typeof(Base.union!), Base.Set{Expr}, Base.Set{Expr}, Base.Set{Expr}, Vararg{Base.Set{Expr}, N} where N})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Pluto.ExpressionExplorer, Symbol("#29#37")), Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(Pluto.ExpressionExplorer, Symbol("#29#37"))}})
precompile(Tuple{getfield(Pluto.ExpressionExplorer, Symbol("#29#37")), Expr})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Symbol}, Base.Generator{Array{Any, 1}, getfield(Pluto.ExpressionExplorer, Symbol("#29#37"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Any, 1}, getfield(Pluto.ExpressionExplorer, Symbol("#29#37"))}, Int64})
precompile(Tuple{typeof(Base.:(|>)), Expr, typeof(Pluto.ExpressionExplorer.split_funcname)})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Pluto.ExpressionExplorer.split_funcname), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.setindex!), Array{Array{Symbol, 1}, 1}, Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Array{Symbol, 1}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Pluto.ExpressionExplorer.split_funcname), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Pluto.ExpressionExplorer.split_funcname), QuoteNode})
precompile(Tuple{typeof(Base.vcat), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.lastindex), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.vect), Array{Symbol, 1}})
precompile(Tuple{Type{Base.Set{Array{Symbol, 1}}}, Array{Array{Symbol, 1}, 1}})
precompile(Tuple{Type{Pluto.ExpressionExplorer.SymbolsState}, Base.Set{Symbol}, Base.Set{Symbol}, Base.Set{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.:(|>)), Symbol, typeof(Pluto.ExpressionExplorer.split_funcname)})
precompile(Tuple{typeof(Base.push!), Base.Set{Symbol}, Symbol, Symbol})
precompile(Tuple{typeof(Base.:(!=)), Pluto.Cell, Pluto.Cell})
precompile(Tuple{typeof(Base.iterate), Array{Pluto.Cell, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, UInt8, String})
precompile(Tuple{typeof(Pluto.decode_extension_and_addbits), UInt8})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Int64, String})
precompile(Tuple{getfield(Pluto, Symbol("#118#120##kw")), NamedTuple{(:initiator,), Tuple{Pluto.Initiator}}, getfield(Pluto, Symbol("#118#120")), Pluto.ServerSession, Base.Dict{Any, Any}, Pluto.Notebook})
precompile(Tuple{typeof(Base.insert!), Array{Pluto.Cell, 1}, Int64, Pluto.Cell})
precompile(Tuple{getfield(Pluto, Symbol("#clientupdate_cell_added##kw")), NamedTuple{(:initiator,), Tuple{Pluto.Initiator}}, typeof(Pluto.clientupdate_cell_added), Pluto.Notebook, Pluto.Cell, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Symbol, Int64}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Symbol, Int64}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Symbol}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Symbol, Int64}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Base.Dict{Symbol, Int64}}}, Int64})
precompile(Tuple{typeof(MsgPack.pack), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Base.union), Base.Dict{Array{Symbol, 1}, Pluto.ExpressionExplorer.SymbolsState}, Base.Dict{Array{Symbol, 1}, Pluto.ExpressionExplorer.SymbolsState}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(Pluto.ExpressionExplorer.compute_usings), Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(Pluto.ExpressionExplorer.compute_usings), Float64})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Symbol}}, Symbol})
precompile(Tuple{typeof(Base.setproperty!), Pluto.Cell, Symbol, Symbol})
precompile(Tuple{typeof(Pluto.ExpressionExplorer.get_global_assignees), Array{Symbol, 1}, Pluto.ExpressionExplorer.ScopeState})
precompile(Tuple{getfield(Pluto.ExpressionExplorer, Symbol("#30#38")){Pluto.ExpressionExplorer.ScopeState}, Int64})
precompile(Tuple{getfield(Pluto.ExpressionExplorer, Symbol("#30#38")){Pluto.ExpressionExplorer.ScopeState}, Float64})
precompile(Tuple{getfield(Pluto.ExpressionExplorer, Symbol("#30#38")){Pluto.ExpressionExplorer.ScopeState}, Symbol})
precompile(Tuple{typeof(Base.setdiff), Array{Symbol, 1}, Base.Set{Symbol}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Symbol}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Symbol}, Int64})
precompile(Tuple{typeof(Base.union), Base.Dict{Array{Symbol, 1}, Pluto.ExpressionExplorer.SymbolsState}, Base.Dict{Array{Symbol, 1}, Pluto.ExpressionExplorer.SymbolsState}, Base.Dict{Array{Symbol, 1}, Pluto.ExpressionExplorer.SymbolsState}})
precompile(Tuple{typeof(Base.union!), Base.Dict{Array{Symbol, 1}, Pluto.ExpressionExplorer.SymbolsState}, Base.Dict{Array{Symbol, 1}, Pluto.ExpressionExplorer.SymbolsState}, Base.Dict{Array{Symbol, 1}, Pluto.ExpressionExplorer.SymbolsState}, Vararg{Base.Dict{Array{Symbol, 1}, Pluto.ExpressionExplorer.SymbolsState}, N} where N})
precompile(Tuple{typeof(Base.union), Base.Set{Expr}, Base.Set{Expr}, Base.Set{Expr}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("text/plain")}}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Symbol}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("text/plain")}}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Symbol}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Base.Multimedia.MIME{Symbol("text/plain")}}, Tuple{Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("text/plain")}}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Symbol}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("text/plain")}}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Symbol}}, Int64})
precompile(Tuple{typeof(Serialization.serialize), Distributed.ClusterSerializer{Sockets.TCPSocket}, Float64})
precompile(Tuple{typeof(Base.setproperty!), Pluto.Cell, Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Symbol}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Symbol}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}}, Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}}, Tuple{Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Symbol}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Symbol}}, Int64})
precompile(Tuple{typeof(MsgPack.pack), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("application/vnd.pluto.tree+xml")}})
precompile(Tuple{typeof(Pluto.ExpressionExplorer.explore!), Int64, Pluto.ExpressionExplorer.ScopeState})
precompile(Tuple{typeof(Base.union), Base.Dict{Array{Symbol, 1}, Pluto.ExpressionExplorer.SymbolsState}, Base.Dict{Array{Symbol, 1}, Pluto.ExpressionExplorer.SymbolsState}, Base.Dict{Array{Symbol, 1}, Pluto.ExpressionExplorer.SymbolsState}, Vararg{Base.Dict{Array{Symbol, 1}, Pluto.ExpressionExplorer.SymbolsState}, N} where N})
precompile(Tuple{typeof(Base.union), Base.Set{Expr}, Base.Set{Expr}, Base.Set{Expr}, Vararg{Base.Set{Expr}, N} where N})
precompile(Tuple{typeof(Base.promote_eltype), Base.Set{Expr}, Base.Set{Expr}, Vararg{Base.Set{Expr}, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.stacktrace+json")}}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Symbol}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.stacktrace+json")}}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Symbol}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.stacktrace+json")}}, Tuple{Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.stacktrace+json")}}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Symbol}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("application/vnd.pluto.stacktrace+json")}}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Symbol}}, Int64})
precompile(Tuple{typeof(Base.setproperty!), Pluto.Cell, Symbol, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("text/html")}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("text/html")}}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Nothing}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("text/html")}}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Nothing}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{Base.Multimedia.MIME{Symbol("text/html")}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Multimedia.MIME{Symbol("text/html")}}, Base.Multimedia.MIME{Symbol("text/html")}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Base.Multimedia.MIME{Symbol("text/html")}}, Tuple{Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("text/html")}}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Nothing}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Base.Multimedia.MIME{Symbol("text/html")}}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Base.Multimedia.MIME{Symbol("text/html")}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Base.Multimedia.MIME{Symbol("text/html")}}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Nothing}}, Int64})
precompile(Tuple{typeof(MsgPack.pack), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{getfield(Pluto, Symbol("#191#193##kw")), NamedTuple{(:initiator,), Tuple{Pluto.Initiator}}, getfield(Pluto, Symbol("#191#193")), Pluto.ServerSession, Base.Dict{Any, Any}, Pluto.Notebook})
precompile(Tuple{typeof(Base.:(|>)), String, Type{T} where T})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Base.Docs.DocStr}, Symbol})
precompile(Tuple{typeof(Base.put!), Distributed.RemoteValue, Tuple{String, Symbol}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{String, Symbol}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Symbol}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Symbol}, Int64, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, String}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, String}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Symbol}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Base.Docs.DocStr}, Symbol})
precompile(Tuple{typeof(Markdown.html), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.html), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Code})
precompile(Tuple{typeof(Markdown.withtag), getfield(Markdown, Symbol("#104#106")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Code}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Markdown.html), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Paragraph})
precompile(Tuple{typeof(Markdown.htmlinline), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Markdown.htmlinline), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Code})
precompile(Tuple{typeof(Markdown.htmlinline), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Markdown.htmlinline), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Link})
precompile(Tuple{typeof(Base.isequal), Distributed.Future, Distributed.RemoteChannel{Base.Channel{Any}}})
precompile(Tuple{getfield(Pluto.PlutoRunner, Symbol("#@bind")), LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Base.Meta.quot), Symbol})
precompile(Tuple{typeof(Pluto.ExpressionExplorer.split_funcname), GlobalRef})
precompile(Tuple{getfield(Pluto.ExpressionExplorer, Symbol("#30#38")){Pluto.ExpressionExplorer.ScopeState}, GlobalRef})
precompile(Tuple{getfield(Pluto.ExpressionExplorer, Symbol("#30#38")){Pluto.ExpressionExplorer.ScopeState}, QuoteNode})
precompile(Tuple{typeof(Base.push!), Base.Set{Symbol}, Symbol, Symbol, Symbol, Vararg{Symbol, N} where N})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Pluto.Cell, 1}, getfield(Pluto, Symbol("#28#29")){Pluto.NotebookTopology, Pluto.Cell}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Pluto.Cell, 1}, getfield(Pluto, Symbol("#28#29")){Pluto.NotebookTopology, Pluto.Cell}}, Int64})
precompile(Tuple{typeof(Base.union), Base.Set{Symbol}})
precompile(Tuple{typeof(Pluto.relay_reactivity_error!), Pluto.Cell, Pluto.MultipleDefinitionsError})
precompile(Tuple{typeof(Base.reverse), Array{Any, 1}})
precompile(Tuple{typeof(Base.findnext), getfield(Pluto.PlutoRunner, Symbol("#10#13")), Array{Any, 1}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Pluto.PlutoRunner, Symbol("#11#14")), Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(Pluto.PlutoRunner, Symbol("#11#14"))}})
precompile(Tuple{typeof(Base.sprint), Function, Pluto.MultipleDefinitionsError})
precompile(Tuple{typeof(Pluto.PlutoRunner.try_showerror), Base.GenericIOBuffer{Array{UInt8, 1}}, Pluto.MultipleDefinitionsError})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Base.Set{Symbol}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Set{Symbol}, String, String})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Array{Base.Dict{K, V} where V where K, 1}}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Dict{K, V} where V where K}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Array{Base.Dict{K, V} where V where K, 1}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, String}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Array{Base.Dict{K, V} where V where K, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Base.Dict{K, V} where V where K, 1}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Array{Base.Dict{K, V} where V where K, 1}}}, Int64})
precompile(Tuple{typeof(Base.sprint), Function, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Pluto.PlutoRunner.json), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Char, Symbol, Char, Vararg{Char, N} where N})
precompile(Tuple{typeof(Pluto.PlutoRunner.json), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt8})
precompile(Tuple{typeof(Pluto.PlutoRunner.json), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Base.Dict{K, V} where V where K, 1}})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Union{Array{UInt8, 1}, String}, Base.Multimedia.MIME{mime} where mime}}, Tuple{String, Base.Multimedia.MIME{Symbol("application/vnd.pluto.stacktrace+json")}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Base.Multimedia.MIME{Symbol("application/vnd.pluto.stacktrace+json")}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Base.Multimedia.MIME{Symbol("application/vnd.pluto.stacktrace+json")}}, Int64, Int64})
precompile(Tuple{typeof(Base.union!), Base.Set{Symbol}, Base.Set{Symbol}, Base.Set{Symbol}})
precompile(Tuple{typeof(Base.union!), Base.Set{Array{Symbol, 1}}, Base.KeySet{Array{Symbol, 1}, Base.Dict{Array{Symbol, 1}, Pluto.ExpressionExplorer.SymbolsState}}, Base.KeySet{Array{Symbol, 1}, Base.Dict{Array{Symbol, 1}, Pluto.ExpressionExplorer.SymbolsState}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.KeySet{Pluto.Cell, Base.Dict{Pluto.Cell, Pluto.ReactivityError}}, getfield(Pluto, Symbol("#59#66")){Pluto.NotebookTopology}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.KeySet{Pluto.Cell, Base.Dict{Pluto.Cell, Pluto.ReactivityError}}, getfield(Pluto, Symbol("#60#67")){Pluto.NotebookTopology}}, Int64})
precompile(Tuple{getfield(Pluto, Symbol("#121#125##kw")), NamedTuple{(:initiator,), Tuple{Pluto.Initiator}}, getfield(Pluto, Symbol("#121#125")), Pluto.ServerSession, Base.Dict{Any, Any}, Pluto.Notebook, Pluto.Cell})
precompile(Tuple{getfield(Pluto, Symbol("#123#126")){Pluto.Initiator, Pluto.ServerSession, Pluto.Notebook, Pluto.Cell, Task}})
precompile(Tuple{typeof(Base.union!), Base.Set{Symbol}, Base.Set{Symbol}, Base.Set{Symbol}, Vararg{Base.Set{Symbol}, N} where N})
precompile(Tuple{typeof(Base.union!), Base.Set{Array{Symbol, 1}}, Base.KeySet{Array{Symbol, 1}, Base.Dict{Array{Symbol, 1}, Pluto.ExpressionExplorer.SymbolsState}}, Base.KeySet{Array{Symbol, 1}, Base.Dict{Array{Symbol, 1}, Pluto.ExpressionExplorer.SymbolsState}}, Vararg{Base.KeySet{Array{Symbol, 1}, Base.Dict{Array{Symbol, 1}, Pluto.ExpressionExplorer.SymbolsState}}, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Float64, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Bool, String})
precompile(Tuple{typeof(Pluto.decode_extension_and_addbits), Float64})
precompile(Tuple{typeof(Pluto.decode_extension_and_addbits), Bool})
precompile(Tuple{getfield(Pluto, Symbol("#177#180##kw")), NamedTuple{(:initiator,), Tuple{Pluto.Initiator}}, getfield(Pluto, Symbol("#177#180")), Pluto.ServerSession, Base.Dict{Any, Any}, Pluto.Notebook})
precompile(Tuple{typeof(Base.put!), Distributed.RemoteValue, Bool})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Bool})
precompile(Tuple{typeof(MsgPack.pack), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64})
precompile(Tuple{Type{NamedTuple{(:deletion_hook, :run_async, :save), T} where T<:Tuple}, Tuple{getfield(Pluto, Symbol("#custom_deletion_hook#181")){getfield(Pluto, Symbol("#custom_deletion_hook#179#182")){Symbol, Float64}}, Bool, Bool}})
precompile(Tuple{getfield(Pluto, Symbol("#update_save_run!##kw")), NamedTuple{(:deletion_hook, :run_async, :save), Tuple{getfield(Pluto, Symbol("#custom_deletion_hook#181")){getfield(Pluto, Symbol("#custom_deletion_hook#179#182")){Symbol, Float64}}, Bool, Bool}}, typeof(Pluto.update_save_run!), Pluto.ServerSession, Pluto.Notebook, Array{Pluto.Cell, 1}})
precompile(Tuple{getfield(Pluto, Symbol("#71#73")){Base.Iterators.Pairs{Symbol, getfield(Pluto, Symbol("#custom_deletion_hook#181")){getfield(Pluto, Symbol("#custom_deletion_hook#179#182")){Symbol, Float64}}, Tuple{Symbol}, NamedTuple{(:deletion_hook,), Tuple{getfield(Pluto, Symbol("#custom_deletion_hook#181")){getfield(Pluto, Symbol("#custom_deletion_hook#179#182")){Symbol, Float64}}}}}, Pluto.ServerSession, Pluto.Notebook, Pluto.NotebookTopology, Pluto.NotebookTopology, Array{Pluto.Cell, 1}}})
precompile(Tuple{getfield(Pluto, Symbol("#custom_deletion_hook#181##kw")), NamedTuple{(:to_run,), Tuple{Array{Pluto.Cell, 1}}}, getfield(Pluto, Symbol("#custom_deletion_hook#181")){getfield(Pluto, Symbol("#custom_deletion_hook#179#182")){Symbol, Float64}}, Pluto.Notebook, Base.Set{Symbol}, Base.Set{Array{Symbol, 1}}, Base.Set{Expr}})
precompile(Tuple{Type{NamedTuple{(:deletion_hook, :run_async, :save), T} where T<:Tuple}, Tuple{getfield(Pluto, Symbol("#custom_deletion_hook#181")){getfield(Pluto, Symbol("#custom_deletion_hook#179#182")){Symbol, Int64}}, Bool, Bool}})
precompile(Tuple{getfield(Pluto, Symbol("#update_save_run!##kw")), NamedTuple{(:deletion_hook, :run_async, :save), Tuple{getfield(Pluto, Symbol("#custom_deletion_hook#181")){getfield(Pluto, Symbol("#custom_deletion_hook#179#182")){Symbol, Int64}}, Bool, Bool}}, typeof(Pluto.update_save_run!), Pluto.ServerSession, Pluto.Notebook, Array{Pluto.Cell, 1}})
precompile(Tuple{getfield(Pluto, Symbol("#71#73")){Base.Iterators.Pairs{Symbol, getfield(Pluto, Symbol("#custom_deletion_hook#181")){getfield(Pluto, Symbol("#custom_deletion_hook#179#182")){Symbol, Int64}}, Tuple{Symbol}, NamedTuple{(:deletion_hook,), Tuple{getfield(Pluto, Symbol("#custom_deletion_hook#181")){getfield(Pluto, Symbol("#custom_deletion_hook#179#182")){Symbol, Int64}}}}}, Pluto.ServerSession, Pluto.Notebook, Pluto.NotebookTopology, Pluto.NotebookTopology, Array{Pluto.Cell, 1}}})
precompile(Tuple{getfield(Pluto, Symbol("#custom_deletion_hook#181##kw")), NamedTuple{(:to_run,), Tuple{Array{Pluto.Cell, 1}}}, getfield(Pluto, Symbol("#custom_deletion_hook#181")){getfield(Pluto, Symbol("#custom_deletion_hook#179#182")){Symbol, Int64}}, Pluto.Notebook, Base.Set{Symbol}, Base.Set{Array{Symbol, 1}}, Base.Set{Expr}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Pluto.Notebook}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Pluto.WorkspaceManager.Workspace}})
precompile(Tuple{getfield(Pluto, Symbol("#174#176##kw")), NamedTuple{(:initiator,), Tuple{Pluto.Initiator}}, getfield(Pluto, Symbol("#174#176")), Pluto.ServerSession, Base.Dict{Any, Any}, Pluto.Notebook})
precompile(Tuple{Type{NamedTuple{(:keep_in_session,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(Pluto.SessionActions, Symbol("#shutdown##kw")), NamedTuple{(:keep_in_session,), Tuple{Bool}}, typeof(Pluto.SessionActions.shutdown), Pluto.ServerSession, Pluto.Notebook})
precompile(Tuple{typeof(Distributed.rmprocs), Int64})
precompile(Tuple{typeof(Base.vcat), Int64})
precompile(Tuple{typeof(Distributed._rmprocs), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Distributed.RRID, Distributed.RemoteValue}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Distributed.RRID, Distributed.RemoteValue}, Int64, Int64})
precompile(Tuple{typeof(Base.close), Base.Channel{Any}, Distributed.ProcessExitedException})
precompile(Tuple{typeof(Base.getproperty), REPL.REPLBackend, Symbol})
precompile(Tuple{typeof(Base.getproperty), Task, Symbol})
precompile(Tuple{typeof(Base.throwto), Task, Any})
precompile(Tuple{getfield(Pluto, Symbol("#198#205")){Pluto.ServerSession}})
precompile(Tuple{getfield(Pluto, Symbol("#199#206"))})
precompile(Tuple{getfield(Pluto, Symbol("#200#207")){Pluto.ClientSession}})
precompile(Tuple{typeof(Base.close), HTTP.WebSockets.WebSocket{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(Base._uv_hook_close), Sockets.TCPServer})
precompile(Tuple{typeof(Base.rethrow), Base.IOError})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(REPL.LineEdit, Symbol("#113#166")), String}, Any, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#113#166")), Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.edit_abort), Any, Bool})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##edit_abort#108")), Any, typeof(REPL.LineEdit.edit_abort), Any, Bool})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Nothing, Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.uvfinalize), Sockets.TCPServer})
precompile(Tuple{getfield(REPL, Symbol("#63#72")){Base.IOStream}, Any})
